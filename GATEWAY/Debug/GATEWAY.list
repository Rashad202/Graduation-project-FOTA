
GATEWAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001260  08001260  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001260  08001260  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001260  08001260  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001264  08001264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001268  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000004  0800126c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800126c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001705  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000089c  00000000  00000000  0002177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00022018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000205  00000000  00000000  000222e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000174b  00000000  00000000  000224ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000193c  00000000  00000000  00023c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000676b  00000000  00000000  00025574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009c0  00000000  00000000  0002bce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0002c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800122c 	.word	0x0800122c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800122c 	.word	0x0800122c

080001d4 <LED_Init>:
/* 1- Function Description -> Function Set The Mode Of Pin Output Take led structure                   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Init(const LedX_t *LED){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	MGPIO_voidSetPinMode(LED->LED_port,LED->LED_Pin,MODE_OUTPUT);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	b2d8      	uxtb	r0, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	2201      	movs	r2, #1
 80001ea:	4619      	mov	r1, r3
 80001ec:	f000 f894 	bl	8000318 <MGPIO_voidSetPinMode>

}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <LED_On>:
/* 1- Function Description -> Function turn on the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_On(const LedX_t *LED){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,HIGH);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	b2d8      	uxtb	r0, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2201      	movs	r2, #1
 800020e:	4619      	mov	r1, r3
 8000210:	f000 f8fa 	bl	8000408 <MGPIO_voidWriteData>

}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <LED_Off>:
/* 1- Function Description -> Function turn off the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Off(const LedX_t *LED){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,LOW);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b2d8      	uxtb	r0, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2200      	movs	r2, #0
 8000232:	4619      	mov	r1, r3
 8000234:	f000 f8e8 	bl	8000408 <MGPIO_voidWriteData>

}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <Led_Toggle>:
/* 1- Function Description -> Function toggle the led condition      								   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void Led_Toggle	(const LedX_t *LED){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	MGPIO_voidToggleData(LED->LED_port,LED->LED_Pin);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f000 f9a8 	bl	80005ac <MGPIO_voidToggleData>

}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <EXTI0_IRQHandler>:

}
/*******************************************************************************************************/

void EXTI0_IRQHandler(void)								
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI0_IRQHandler+0x1c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_0 );					// With Out That It Will Do INT Alaways
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <EXTI0_IRQHandler+0x20>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <EXTI0_IRQHandler+0x20>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6153      	str	r3, [r2, #20]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000020 	.word	0x20000020
 8000284:	40013c00 	.word	0x40013c00

08000288 <EXTI1_IRQHandler>:

/*******************************************************************************************************/
void EXTI1_IRQHandler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <EXTI1_IRQHandler+0x1c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_1 );					// With Out That It Will Do INT Alaways
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <EXTI1_IRQHandler+0x20>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <EXTI1_IRQHandler+0x20>)
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	6153      	str	r3, [r2, #20]
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000024 	.word	0x20000024
 80002a8:	40013c00 	.word	0x40013c00

080002ac <EXTI2_IRQHandler>:

/*******************************************************************************************************/
void EXTI2_IRQHandler(void)								
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI2_CallBack();
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI2_IRQHandler+0x1c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_2 );					// With Out That It Will Do INT Alaways
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI2_IRQHandler+0x20>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI2_IRQHandler+0x20>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6153      	str	r3, [r2, #20]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000028 	.word	0x20000028
 80002cc:	40013c00 	.word	0x40013c00

080002d0 <EXTI3_IRQHandler>:

/*******************************************************************************************************/
void EXTI3_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI3_CallBack();
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI3_IRQHandler+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_3 );					// With Out That It Will Do INT Alaways
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI3_IRQHandler+0x20>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI3_IRQHandler+0x20>)
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	6153      	str	r3, [r2, #20]
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	40013c00 	.word	0x40013c00

080002f4 <EXTI4_IRQHandler>:

/*******************************************************************************************************/
void EXTI4_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI4_CallBack();
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI4_IRQHandler+0x1c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_4 );					// With Out That It Will Do INT Alaways
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI4_IRQHandler+0x20>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI4_IRQHandler+0x20>)
 8000304:	f043 0310 	orr.w	r3, r3, #16
 8000308:	6153      	str	r3, [r2, #20]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000030 	.word	0x20000030
 8000314:	40013c00 	.word	0x40013c00

08000318 <MGPIO_voidSetPinMode>:
#include "MGPIO_interface.h"
#include "MGPIO_config.h"
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/
void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
 8000322:	460b      	mov	r3, r1
 8000324:	71bb      	strb	r3, [r7, #6]
 8000326:	4613      	mov	r3, r2
 8000328:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b05      	cmp	r3, #5
 800032e:	d857      	bhi.n	80003e0 <MGPIO_voidSetPinMode+0xc8>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <MGPIO_voidSetPinMode+0x20>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000351 	.word	0x08000351
 800033c:	08000369 	.word	0x08000369
 8000340:	08000381 	.word	0x08000381
 8000344:	08000399 	.word	0x08000399
 8000348:	080003b1 	.word	0x080003b1
 800034c:	080003c9 	.word	0x080003c9
	{
	  case GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <MGPIO_voidSetPinMode+0xd8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	7979      	ldrb	r1, [r7, #5]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0052      	lsls	r2, r2, #1
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	4611      	mov	r1, r2
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <MGPIO_voidSetPinMode+0xd8>)
 8000362:	430b      	orrs	r3, r1
 8000364:	6013      	str	r3, [r2, #0]
 8000366:	e03c      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  case GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MGPIO_voidSetPinMode+0xdc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	7979      	ldrb	r1, [r7, #5]
 800036e:	79ba      	ldrb	r2, [r7, #6]
 8000370:	0052      	lsls	r2, r2, #1
 8000372:	fa01 f202 	lsl.w	r2, r1, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <MGPIO_voidSetPinMode+0xdc>)
 800037a:	430b      	orrs	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
 800037e:	e030      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  case GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MGPIO_voidSetPinMode+0xe0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	7979      	ldrb	r1, [r7, #5]
 8000386:	79ba      	ldrb	r2, [r7, #6]
 8000388:	0052      	lsls	r2, r2, #1
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	4611      	mov	r1, r2
 8000390:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <MGPIO_voidSetPinMode+0xe0>)
 8000392:	430b      	orrs	r3, r1
 8000394:	6013      	str	r3, [r2, #0]
 8000396:	e024      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  case GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MGPIO_voidSetPinMode+0xe4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	7979      	ldrb	r1, [r7, #5]
 800039e:	79ba      	ldrb	r2, [r7, #6]
 80003a0:	0052      	lsls	r2, r2, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <MGPIO_voidSetPinMode+0xe4>)
 80003aa:	430b      	orrs	r3, r1
 80003ac:	6013      	str	r3, [r2, #0]
 80003ae:	e018      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  case GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MGPIO_voidSetPinMode+0xe8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	7979      	ldrb	r1, [r7, #5]
 80003b6:	79ba      	ldrb	r2, [r7, #6]
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	4611      	mov	r1, r2
 80003c0:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <MGPIO_voidSetPinMode+0xe8>)
 80003c2:	430b      	orrs	r3, r1
 80003c4:	6013      	str	r3, [r2, #0]
 80003c6:	e00c      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  case GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MGPIO_voidSetPinMode+0xec>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	7979      	ldrb	r1, [r7, #5]
 80003ce:	79ba      	ldrb	r2, [r7, #6]
 80003d0:	0052      	lsls	r2, r2, #1
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <MGPIO_voidSetPinMode+0xec>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	6013      	str	r3, [r2, #0]
 80003de:	e000      	b.n	80003e2 <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 80003e0:	bf00      	nop
    }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40020400 	.word	0x40020400
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40020c00 	.word	0x40020c00
 8000400:	40021000 	.word	0x40021000
 8000404:	40021c00 	.word	0x40021c00

08000408 <MGPIO_voidWriteData>:
	return L_u8Data;
	
}
/*******************************************************************************************************/
void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]

	if(Copy_u8State==HIGH)
 800041a:	797b      	ldrb	r3, [r7, #5]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d155      	bne.n	80004cc <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b05      	cmp	r3, #5
 8000424:	f200 80ac 	bhi.w	8000580 <MGPIO_voidWriteData+0x178>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <MGPIO_voidWriteData+0x28>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000449 	.word	0x08000449
 8000434:	0800045f 	.word	0x0800045f
 8000438:	08000475 	.word	0x08000475
 800043c:	0800048b 	.word	0x0800048b
 8000440:	080004a1 	.word	0x080004a1
 8000444:	080004b7 	.word	0x080004b7
		{
		case GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8000448:	4b52      	ldr	r3, [pc, #328]	; (8000594 <MGPIO_voidWriteData+0x18c>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a4f      	ldr	r2, [pc, #316]	; (8000594 <MGPIO_voidWriteData+0x18c>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	e093      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800045e:	4b4e      	ldr	r3, [pc, #312]	; (8000598 <MGPIO_voidWriteData+0x190>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a4a      	ldr	r2, [pc, #296]	; (8000598 <MGPIO_voidWriteData+0x190>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	e088      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  SET_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8000474:	4b49      	ldr	r3, [pc, #292]	; (800059c <MGPIO_voidWriteData+0x194>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	79ba      	ldrb	r2, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a46      	ldr	r2, [pc, #280]	; (800059c <MGPIO_voidWriteData+0x194>)
 8000484:	430b      	orrs	r3, r1
 8000486:	6153      	str	r3, [r2, #20]
 8000488:	e07d      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 800048a:	4b45      	ldr	r3, [pc, #276]	; (80005a0 <MGPIO_voidWriteData+0x198>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a41      	ldr	r2, [pc, #260]	; (80005a0 <MGPIO_voidWriteData+0x198>)
 800049a:	430b      	orrs	r3, r1
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	e072      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80004a0:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <MGPIO_voidWriteData+0x19c>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a3d      	ldr	r2, [pc, #244]	; (80005a4 <MGPIO_voidWriteData+0x19c>)
 80004b0:	430b      	orrs	r3, r1
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	e067      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 80004b6:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <MGPIO_voidWriteData+0x1a0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a38      	ldr	r2, [pc, #224]	; (80005a8 <MGPIO_voidWriteData+0x1a0>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	e05c      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	d858      	bhi.n	8000584 <MGPIO_voidWriteData+0x17c>
 80004d2:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <MGPIO_voidWriteData+0xd0>)
 80004d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d8:	080004f1 	.word	0x080004f1
 80004dc:	08000509 	.word	0x08000509
 80004e0:	08000521 	.word	0x08000521
 80004e4:	08000539 	.word	0x08000539
 80004e8:	08000551 	.word	0x08000551
 80004ec:	08000569 	.word	0x08000569
		{
		case GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MGPIO_voidWriteData+0x18c>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	79ba      	ldrb	r2, [r7, #6]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <MGPIO_voidWriteData+0x18c>)
 8000502:	400b      	ands	r3, r1
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	e03e      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8000508:	4b23      	ldr	r3, [pc, #140]	; (8000598 <MGPIO_voidWriteData+0x190>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	79ba      	ldrb	r2, [r7, #6]
 800050e:	2101      	movs	r1, #1
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	43d2      	mvns	r2, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <MGPIO_voidWriteData+0x190>)
 800051a:	400b      	ands	r3, r1
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	e032      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MGPIO_voidWriteData+0x194>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	79ba      	ldrb	r2, [r7, #6]
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	43d2      	mvns	r2, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MGPIO_voidWriteData+0x194>)
 8000532:	400b      	ands	r3, r1
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	e026      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MGPIO_voidWriteData+0x198>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	43d2      	mvns	r2, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MGPIO_voidWriteData+0x198>)
 800054a:	400b      	ands	r3, r1
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	e01a      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MGPIO_voidWriteData+0x19c>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	79ba      	ldrb	r2, [r7, #6]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	43d2      	mvns	r2, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <MGPIO_voidWriteData+0x19c>)
 8000562:	400b      	ands	r3, r1
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	e00e      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MGPIO_voidWriteData+0x1a0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	43d2      	mvns	r2, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <MGPIO_voidWriteData+0x1a0>)
 800057a:	400b      	ands	r3, r1
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	e002      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 8000584:	bf00      	nop
		}
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40020000 	.word	0x40020000
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40021c00 	.word	0x40021c00

080005ac <MGPIO_voidToggleData>:
/*******************************************************************************************************/
void MGPIO_voidToggleData(u8 Copy_u8PortName ,u8 Copy_u8PinNum)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8PortName)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b05      	cmp	r3, #5
 80005c0:	d850      	bhi.n	8000664 <MGPIO_voidToggleData+0xb8>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <MGPIO_voidToggleData+0x1c>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005e1 	.word	0x080005e1
 80005cc:	080005f7 	.word	0x080005f7
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000623 	.word	0x08000623
 80005d8:	08000639 	.word	0x08000639
 80005dc:	0800064f 	.word	0x0800064f
		{
		case GPIOA_PORT :  TOG_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MGPIO_voidToggleData+0xc8>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	2101      	movs	r1, #1
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MGPIO_voidToggleData+0xc8>)
 80005f0:	404b      	eors	r3, r1
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	e037      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		case GPIOB_PORT :  TOG_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MGPIO_voidToggleData+0xcc>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	79ba      	ldrb	r2, [r7, #6]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MGPIO_voidToggleData+0xcc>)
 8000606:	404b      	eors	r3, r1
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	e02c      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		case GPIOC_PORT :  TOG_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MGPIO_voidToggleData+0xd0>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	4611      	mov	r1, r2
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MGPIO_voidToggleData+0xd0>)
 800061c:	404b      	eors	r3, r1
 800061e:	6153      	str	r3, [r2, #20]
 8000620:	e021      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		case GPIOD_PORT :  TOG_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MGPIO_voidToggleData+0xd4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	79ba      	ldrb	r2, [r7, #6]
 8000628:	2101      	movs	r1, #1
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	4611      	mov	r1, r2
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MGPIO_voidToggleData+0xd4>)
 8000632:	404b      	eors	r3, r1
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	e016      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		case GPIOE_PORT :  TOG_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MGPIO_voidToggleData+0xd8>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <MGPIO_voidToggleData+0xd8>)
 8000648:	404b      	eors	r3, r1
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	e00b      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		case GPIOH_PORT :  TOG_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MGPIO_voidToggleData+0xdc>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	79ba      	ldrb	r2, [r7, #6]
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <MGPIO_voidToggleData+0xdc>)
 800065e:	404b      	eors	r3, r1
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	e000      	b.n	8000666 <MGPIO_voidToggleData+0xba>

		default : /*ERROR*/ break ;
 8000664:	bf00      	nop
		}

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021000 	.word	0x40021000
 8000688:	40021c00 	.word	0x40021c00

0800068c <MGPIO_voidSetPinAltFn>:
		}
	}
}
/*******************************************************************************************************/
void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	460b      	mov	r3, r1
 8000698:	71bb      	strb	r3, [r7, #6]
 800069a:	4613      	mov	r3, r2
 800069c:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d85b      	bhi.n	800075c <MGPIO_voidSetPinAltFn+0xd0>
	{
		/* Alf pins 0:7 */
		switch(Copy_u8PortNum )
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	f200 80be 	bhi.w	8000828 <MGPIO_voidSetPinAltFn+0x19c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <MGPIO_voidSetPinAltFn+0x28>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006cd 	.word	0x080006cd
 80006b8:	080006e5 	.word	0x080006e5
 80006bc:	080006fd 	.word	0x080006fd
 80006c0:	08000715 	.word	0x08000715
 80006c4:	0800072d 	.word	0x0800072d
 80006c8:	08000745 	.word	0x08000745
		{
			 case GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006cc:	4b5b      	ldr	r3, [pc, #364]	; (800083c <MGPIO_voidSetPinAltFn+0x1b0>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	7979      	ldrb	r1, [r7, #5]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	0092      	lsls	r2, r2, #2
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	4a57      	ldr	r2, [pc, #348]	; (800083c <MGPIO_voidSetPinAltFn+0x1b0>)
 80006de:	430b      	orrs	r3, r1
 80006e0:	6213      	str	r3, [r2, #32]
 80006e2:	e0a4      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006e4:	4b56      	ldr	r3, [pc, #344]	; (8000840 <MGPIO_voidSetPinAltFn+0x1b4>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	7979      	ldrb	r1, [r7, #5]
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a52      	ldr	r2, [pc, #328]	; (8000840 <MGPIO_voidSetPinAltFn+0x1b4>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6213      	str	r3, [r2, #32]
 80006fa:	e098      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006fc:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MGPIO_voidSetPinAltFn+0x1b8>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	7979      	ldrb	r1, [r7, #5]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a4d      	ldr	r2, [pc, #308]	; (8000844 <MGPIO_voidSetPinAltFn+0x1b8>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6213      	str	r3, [r2, #32]
 8000712:	e08c      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8000714:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <MGPIO_voidSetPinAltFn+0x1bc>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	7979      	ldrb	r1, [r7, #5]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a48      	ldr	r2, [pc, #288]	; (8000848 <MGPIO_voidSetPinAltFn+0x1bc>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6213      	str	r3, [r2, #32]
 800072a:	e080      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800072c:	4b47      	ldr	r3, [pc, #284]	; (800084c <MGPIO_voidSetPinAltFn+0x1c0>)
 800072e:	6a1b      	ldr	r3, [r3, #32]
 8000730:	7979      	ldrb	r1, [r7, #5]
 8000732:	79ba      	ldrb	r2, [r7, #6]
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a43      	ldr	r2, [pc, #268]	; (800084c <MGPIO_voidSetPinAltFn+0x1c0>)
 800073e:	430b      	orrs	r3, r1
 8000740:	6213      	str	r3, [r2, #32]
 8000742:	e074      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MGPIO_voidSetPinAltFn+0x1c4>)
 8000746:	6a1b      	ldr	r3, [r3, #32]
 8000748:	7979      	ldrb	r1, [r7, #5]
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a3e      	ldr	r2, [pc, #248]	; (8000850 <MGPIO_voidSetPinAltFn+0x1c4>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6213      	str	r3, [r2, #32]
 800075a:	e068      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
		
	}
	/* Alf pins 8:15 */
	else
	{
	switch(Copy_u8PortNum )
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b05      	cmp	r3, #5
 8000760:	d864      	bhi.n	800082c <MGPIO_voidSetPinAltFn+0x1a0>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <MGPIO_voidSetPinAltFn+0xdc>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000781 	.word	0x08000781
 800076c:	0800079d 	.word	0x0800079d
 8000770:	080007b9 	.word	0x080007b9
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007f1 	.word	0x080007f1
 800077c:	0800080d 	.word	0x0800080d
		{
			 case GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MGPIO_voidSetPinAltFn+0x1b0>)
 8000782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000784:	7979      	ldrb	r1, [r7, #5]
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	f002 0207 	and.w	r2, r2, #7
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <MGPIO_voidSetPinAltFn+0x1b0>)
 8000796:	430b      	orrs	r3, r1
 8000798:	6253      	str	r3, [r2, #36]	; 0x24
 800079a:	e048      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MGPIO_voidSetPinAltFn+0x1b4>)
 800079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a0:	7979      	ldrb	r1, [r7, #5]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	f002 0207 	and.w	r2, r2, #7
 80007a8:	0092      	lsls	r2, r2, #2
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MGPIO_voidSetPinAltFn+0x1b4>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24
 80007b6:	e03a      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MGPIO_voidSetPinAltFn+0x1b8>)
 80007ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007bc:	7979      	ldrb	r1, [r7, #5]
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	f002 0207 	and.w	r2, r2, #7
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <MGPIO_voidSetPinAltFn+0x1b8>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6253      	str	r3, [r2, #36]	; 0x24
 80007d2:	e02c      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MGPIO_voidSetPinAltFn+0x1bc>)
 80007d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d8:	7979      	ldrb	r1, [r7, #5]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	f002 0207 	and.w	r2, r2, #7
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MGPIO_voidSetPinAltFn+0x1bc>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24
 80007ee:	e01e      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MGPIO_voidSetPinAltFn+0x1c0>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	7979      	ldrb	r1, [r7, #5]
 80007f6:	79ba      	ldrb	r2, [r7, #6]
 80007f8:	f002 0207 	and.w	r2, r2, #7
 80007fc:	0092      	lsls	r2, r2, #2
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <MGPIO_voidSetPinAltFn+0x1c0>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6253      	str	r3, [r2, #36]	; 0x24
 800080a:	e010      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MGPIO_voidSetPinAltFn+0x1c4>)
 800080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000810:	7979      	ldrb	r1, [r7, #5]
 8000812:	79ba      	ldrb	r2, [r7, #6]
 8000814:	f002 0207 	and.w	r2, r2, #7
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <MGPIO_voidSetPinAltFn+0x1c4>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6253      	str	r3, [r2, #36]	; 0x24
 8000826:	e002      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 800082c:	bf00      	nop
		
		
	}

	
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40021000 	.word	0x40021000
 8000850:	40021c00 	.word	0x40021c00

08000854 <MRCC_voidEnablePeripheralClock>:
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/

void MRCC_voidEnablePeripheralClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d836      	bhi.n	80008d8 <MRCC_voidEnablePeripheralClock+0x84>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <MRCC_voidEnablePeripheralClock+0x1c>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000881 	.word	0x08000881
 8000874:	08000897 	.word	0x08000897
 8000878:	080008ad 	.word	0x080008ad
 800087c:	080008c3 	.word	0x080008c3
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MRCC_voidEnablePeripheralClock+0x94>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <MRCC_voidEnablePeripheralClock+0x94>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e021      	b.n	80008da <MRCC_voidEnablePeripheralClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MRCC_voidEnablePeripheralClock+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <MRCC_voidEnablePeripheralClock+0x98>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e016      	b.n	80008da <MRCC_voidEnablePeripheralClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MRCC_voidEnablePeripheralClock+0x9c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79ba      	ldrb	r2, [r7, #6]
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <MRCC_voidEnablePeripheralClock+0x9c>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	e00b      	b.n	80008da <MRCC_voidEnablePeripheralClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MRCC_voidEnablePeripheralClock+0xa0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	79ba      	ldrb	r2, [r7, #6]
 80008c8:	2101      	movs	r1, #1
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <MRCC_voidEnablePeripheralClock+0xa0>)
 80008d2:	430b      	orrs	r3, r1
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e000      	b.n	80008da <MRCC_voidEnablePeripheralClock+0x86>
		default :     /*   ERROR   */          break ;
 80008d8:	bf00      	nop
		
	}
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023830 	.word	0x40023830
 80008ec:	40023834 	.word	0x40023834
 80008f0:	40023840 	.word	0x40023840
 80008f4:	40023844 	.word	0x40023844

080008f8 <MRCC_voidInitSystemClk>:
	
}
/*******************************************************************************************************/

void MRCC_voidInitSystemClk(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	/********** HSI **********/
#if CLKSRC == HSI 
	/* 1- EN HSI */
	SET_BIT(MRCC->CR , 0U);
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]
	/* 2- CLK SYS --> HSI */
	CLR_BIT(MRCC->CFGR, 0U);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6093      	str	r3, [r2, #8]
	CLR_BIT(MRCC->CFGR, 1U);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <MRCC_voidInitSystemClk+0x34>)
 800091a:	f023 0302 	bic.w	r3, r3, #2
 800091e:	6093      	str	r3, [r2, #8]
/****************************************************/

#else 
/* Error*/
#endif // The End Of Big IF	
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MSTK_voidInit>:
static void (* MSTK_CallBack) (void) = NULL;
static u8	MSTK_u8ModeOfInterval;

/*******************************************************************************************************/
/*                                      01- MSTK_voidInit                                              */
void MSTK_voidInit( void ){
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

	#if CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB
	SET_BIT(MSTK->CTRL , CLKSOURCE);
	#elif CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB_DIV8
	CLR_BIT(MSTK->CTRL , CLKSOURCE);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <MSTK_voidInit+0x1c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <MSTK_voidInit+0x1c>)
 800093a:	f023 0304 	bic.w	r3, r3, #4
 800093e:	6013      	str	r3, [r2, #0]
	#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <MSTK_voidStart>:

/*******************************************************************************************************/
/*                                      02- MSTK_voidStart                                              */
void MSTK_voidStart( u32 Copy_PreloadValue ){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue;
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MSTK_voidStart+0x54>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6053      	str	r3, [r2, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MSTK_voidStart+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
	/* Enable Systick    */
	SET_BIT( MSTK->CTRL , 0 );
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MSTK_voidStart+0x54>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <MSTK_voidStart+0x54>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]
	/*  POLL On the Counter Flag */
	while(GET_BIT( MSTK->CTRL , COUNTFLAG ) == 0);
 8000970:	bf00      	nop
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MSTK_voidStart+0x54>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f9      	beq.n	8000972 <MSTK_voidStart+0x22>

	/*		Stop Timer 						*/
	CLR_BIT(MSTK->CTRL , 0);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MSTK_voidStart+0x54>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <MSTK_voidStart+0x54>)
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MSTK_voidStart+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <MSTK_voidStart+0x54>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]

}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <MSTK_voidStopInterval>:

/*******************************************************************************************************/
/*                                      03- MSTK_voidStopInterval                                              */
void MSTK_voidStopInterval(void) 
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    /*	Stop Timer 	*/
	CLR_BIT(MSTK->CTRL , 0);
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MSTK_voidStopInterval+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <MSTK_voidStopInterval+0x28>)
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MSTK_voidStopInterval+0x28>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <MSTK_voidStopInterval+0x28>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <_delay_ms>:
	return local_u32ElapsedTime;
}

/*******************************************************************************************************/
/*                                      09- _delay_ms                                              */
void _delay_ms( u32 Copy_u32Time ){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	MSTK_voidInit();
 80009dc:	f7ff ffa8 	bl	8000930 <MSTK_voidInit>
	/*	1- Disable the Interrupt 	*/
	CLR_BIT(MSTK->CTRL , 1);
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <_delay_ms+0x34>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <_delay_ms+0x34>)
 80009e6:	f023 0302 	bic.w	r3, r3, #2
 80009ea:	6013      	str	r3, [r2, #0]
	
	MSTK_voidStart( Copy_u32Time * 2000 );
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009f2:	fb02 f303 	mul.w	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffaa 	bl	8000950 <MSTK_voidStart>
	/*    Stop Timer      */
	MSTK_voidStopInterval();
 80009fc:	f7ff ffd4 	bl	80009a8 <MSTK_voidStopInterval>

}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <SysTick_Handler>:

/*******************************************************************************************************/
/*                                      //Core Peripheral                                              */

void	SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	u8 Local_u8Temp = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
	if(MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <SysTick_Handler+0x5c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d111      	bne.n	8000a42 <SysTick_Handler+0x36>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(MSTK->CTRL , 1);
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SysTick_Handler+0x60>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <SysTick_Handler+0x60>)
 8000a24:	f023 0302 	bic.w	r3, r3, #2
 8000a28:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(MSTK->CTRL , 0);
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <SysTick_Handler+0x60>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <SysTick_Handler+0x60>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	6013      	str	r3, [r2, #0]
			MSTK->LOAD	= 0;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <SysTick_Handler+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
			MSTK->VAL	= 0;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SysTick_Handler+0x60>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
	}
	 /*Execute Action to be done after the time passed*/
	if(MSTK_CallBack !=NULL)
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SysTick_Handler+0x64>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <SysTick_Handler+0x44>
	{	
	MSTK_CallBack();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <SysTick_Handler+0x64>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4798      	blx	r3
	}
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(MSTK->CTRL , COUNTFLAG);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SysTick_Handler+0x60>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	0c1b      	lsrs	r3, r3, #16
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000038 	.word	0x20000038
 8000a6c:	e000e010 	.word	0xe000e010
 8000a70:	20000034 	.word	0x20000034

08000a74 <MUSART_voidInit>:
/*******************************************************************************************************/


/*******************************************************************************************************/
void MUSART_voidInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

	/***********	USART_1		***********/
#if (USART1_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART1_REG->BRR = USART1_BUAD_RATE;
 8000a78:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a7a:	f240 6283 	movw	r2, #1667	; 0x683
 8000a7e:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART1_REG->CR2 |= (USART1_STOP_BITS << 12);
 8000a80:	4b4f      	ldr	r3, [pc, #316]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART1_REG->CR1.SBK = USART1_SEND_BREAK;
 8000a88:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a8a:	68d3      	ldr	r3, [r2, #12]
 8000a8c:	f36f 0300 	bfc	r3, #0, #1
 8000a90:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART1_REG->CR1.RE = USART1_RECEIVER;
 8000a92:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a94:	68d3      	ldr	r3, [r2, #12]
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART1_REG->CR1.TE = USART1_TRANSMITTER;
 8000a9c:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000a9e:	68d3      	ldr	r3, [r2, #12]
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART1_REG->CR1.RXNEIE = USART1_RX_INT;
 8000aa6:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000aa8:	68d3      	ldr	r3, [r2, #12]
 8000aaa:	f36f 1345 	bfc	r3, #5, #1
 8000aae:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART1_REG->CR1.TCIE = USART1_T_COMP_INT;
 8000ab0:	4a43      	ldr	r2, [pc, #268]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000ab2:	68d3      	ldr	r3, [r2, #12]
 8000ab4:	f36f 1386 	bfc	r3, #6, #1
 8000ab8:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART1_REG->CR1.PCE = USART1_PARITY_ENABLE;
 8000aba:	4a41      	ldr	r2, [pc, #260]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000abc:	68d3      	ldr	r3, [r2, #12]
 8000abe:	f36f 238a 	bfc	r3, #10, #1
 8000ac2:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART1_REG->CR1.PS = USART1_PARITY_MODE;
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000ac6:	68d3      	ldr	r3, [r2, #12]
 8000ac8:	f36f 2349 	bfc	r3, #9, #1
 8000acc:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART1_REG->CR1.M = USART1_WORD_LEN;
 8000ace:	4a3c      	ldr	r2, [pc, #240]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000ad0:	68d3      	ldr	r3, [r2, #12]
 8000ad2:	f36f 330c 	bfc	r3, #12, #1
 8000ad6:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART1_REG->CR1.OVER8	= USART1_OVER_SAMPLING;
 8000ad8:	4a39      	ldr	r2, [pc, #228]	; (8000bc0 <MUSART_voidInit+0x14c>)
 8000ada:	68d3      	ldr	r3, [r2, #12]
 8000adc:	f36f 33cf 	bfc	r3, #15, #1
 8000ae0:	60d3      	str	r3, [r2, #12]
#endif

	/***********	USART_2		***********/
#if (USART2_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART2_REG->BRR = USART2_BUAD_RATE;
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000ae4:	f240 6283 	movw	r2, #1667	; 0x683
 8000ae8:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART2_REG->CR2 |= (USART2_STOP_BITS << 12);
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000aec:	4a35      	ldr	r2, [pc, #212]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART2_REG->CR1.SBK = USART2_SEND_BREAK;
 8000af2:	4a34      	ldr	r2, [pc, #208]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000af4:	68d3      	ldr	r3, [r2, #12]
 8000af6:	f36f 0300 	bfc	r3, #0, #1
 8000afa:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART2_REG->CR1.RE = USART2_RECEIVER;
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000afe:	68d3      	ldr	r3, [r2, #12]
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART2_REG->CR1.TE = USART2_TRANSMITTER;
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b08:	68d3      	ldr	r3, [r2, #12]
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART2_REG->CR1.RXNEIE = USART2_RX_INT;
 8000b10:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b12:	68d3      	ldr	r3, [r2, #12]
 8000b14:	f36f 1345 	bfc	r3, #5, #1
 8000b18:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART2_REG->CR1.TCIE = USART2_T_COMP_INT;
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b1c:	68d3      	ldr	r3, [r2, #12]
 8000b1e:	f36f 1386 	bfc	r3, #6, #1
 8000b22:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART2_REG->CR1.PCE = USART2_PARITY_ENABLE;
 8000b24:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b26:	68d3      	ldr	r3, [r2, #12]
 8000b28:	f36f 238a 	bfc	r3, #10, #1
 8000b2c:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART2_REG->CR1.PS = USART2_PARITY_MODE;
 8000b2e:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b30:	68d3      	ldr	r3, [r2, #12]
 8000b32:	f36f 2349 	bfc	r3, #9, #1
 8000b36:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART2_REG->CR1.M = USART2_WORD_LEN;
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b3a:	68d3      	ldr	r3, [r2, #12]
 8000b3c:	f36f 330c 	bfc	r3, #12, #1
 8000b40:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART2_REG->CR1.OVER8	= USART2_OVER_SAMPLING;
 8000b42:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <MUSART_voidInit+0x150>)
 8000b44:	68d3      	ldr	r3, [r2, #12]
 8000b46:	f36f 33cf 	bfc	r3, #15, #1
 8000b4a:	60d3      	str	r3, [r2, #12]
#endif

	/***********	USART_6		***********/
#if (USART6_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART6_REG->BRR = USART6_BUAD_RATE;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b4e:	f240 6283 	movw	r2, #1667	; 0x683
 8000b52:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART6_REG->CR2 |= (USART6_STOP_BITS << 12);
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART6_REG->CR1.SBK = USART6_SEND_BREAK;
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b5e:	68d3      	ldr	r3, [r2, #12]
 8000b60:	f36f 0300 	bfc	r3, #0, #1
 8000b64:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART6_REG->CR1.RE = USART6_RECEIVER;
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b68:	68d3      	ldr	r3, [r2, #12]
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART6_REG->CR1.TE = USART6_TRANSMITTER;
 8000b70:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b72:	68d3      	ldr	r3, [r2, #12]
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART6_REG->CR1.RXNEIE = USART6_RX_INT;
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b7c:	68d3      	ldr	r3, [r2, #12]
 8000b7e:	f36f 1345 	bfc	r3, #5, #1
 8000b82:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART6_REG->CR1.TCIE = USART6_T_COMP_INT;
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b86:	68d3      	ldr	r3, [r2, #12]
 8000b88:	f36f 1386 	bfc	r3, #6, #1
 8000b8c:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART6_REG->CR1.PCE = USART6_PARITY_ENABLE;
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b90:	68d3      	ldr	r3, [r2, #12]
 8000b92:	f36f 238a 	bfc	r3, #10, #1
 8000b96:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART6_REG->CR1.PS = USART6_PARITY_MODE;
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000b9a:	68d3      	ldr	r3, [r2, #12]
 8000b9c:	f36f 2349 	bfc	r3, #9, #1
 8000ba0:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART6_REG->CR1.M = USART6_WORD_LEN;
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000ba4:	68d3      	ldr	r3, [r2, #12]
 8000ba6:	f36f 330c 	bfc	r3, #12, #1
 8000baa:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART6_REG->CR1.OVER8	= USART6_OVER_SAMPLING;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <MUSART_voidInit+0x154>)
 8000bae:	68d3      	ldr	r3, [r2, #12]
 8000bb0:	f36f 33cf 	bfc	r3, #15, #1
 8000bb4:	60d3      	str	r3, [r2, #12]
#endif
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40011400 	.word	0x40011400

08000bcc <MUSART_voidEnable>:

/*******************************************************************************************************/

void MUSART_voidEnable(u8 copy_u8Index){
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8Index){
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d012      	beq.n	8000c02 <MUSART_voidEnable+0x36>
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	dc16      	bgt.n	8000c0e <MUSART_voidEnable+0x42>
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d002      	beq.n	8000bea <MUSART_voidEnable+0x1e>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d006      	beq.n	8000bf6 <MUSART_voidEnable+0x2a>
	case 1: USART1_REG -> CR1.UE = 1; break;
	case 2: USART2_REG -> CR1.UE = 1; break;
	case 6: USART6_REG -> CR1.UE = 1; break;
	}
}
 8000be8:	e011      	b.n	8000c0e <MUSART_voidEnable+0x42>
	case 1: USART1_REG -> CR1.UE = 1; break;
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <MUSART_voidEnable+0x50>)
 8000bec:	68d3      	ldr	r3, [r2, #12]
 8000bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf2:	60d3      	str	r3, [r2, #12]
 8000bf4:	e00b      	b.n	8000c0e <MUSART_voidEnable+0x42>
	case 2: USART2_REG -> CR1.UE = 1; break;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <MUSART_voidEnable+0x54>)
 8000bf8:	68d3      	ldr	r3, [r2, #12]
 8000bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfe:	60d3      	str	r3, [r2, #12]
 8000c00:	e005      	b.n	8000c0e <MUSART_voidEnable+0x42>
	case 6: USART6_REG -> CR1.UE = 1; break;
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <MUSART_voidEnable+0x58>)
 8000c04:	68d3      	ldr	r3, [r2, #12]
 8000c06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c0a:	60d3      	str	r3, [r2, #12]
 8000c0c:	bf00      	nop
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40011400 	.word	0x40011400

08000c28 <MUSART_u8Send_Byte>:
	case 6: USART6_REG -> CR1.UE = 0; break;
	}
}

/*******************************************************************************************************/
void MUSART_u8Send_Byte(u8 copy_u8Index ,u8 copy_u8Data){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f858 	bl	8000cf0 <MUSART_SetUSART>
 8000c40:	60f8      	str	r0, [r7, #12]
	while(0==GET_BIT(_USART_->SR, 7));// wait until transmission complete into the shift register
 8000c42:	bf00      	nop
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f9      	beq.n	8000c44 <MUSART_u8Send_Byte+0x1c>
	_USART_->DR = copy_u8Data;
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	605a      	str	r2, [r3, #4]
	while(0==GET_BIT(_USART_->SR, 6));// wait until transmission of a frame containing data is complete
 8000c56:	bf00      	nop
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f9      	beq.n	8000c58 <MUSART_u8Send_Byte+0x30>
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <MUSART_u8Send_Data>:

/*******************************************************************************************************/
void MUSART_u8Send_Data(u8 copy_u8Index , u8 *copy_u8Data){
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	6039      	str	r1, [r7, #0]
 8000c78:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index =0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8000c7e:	e00b      	b.n	8000c98 <MUSART_u8Send_Data+0x2a>
	{
		MUSART_u8Send_Byte(copy_u8Index,copy_u8Data[Local_u8Index]);
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffcb 	bl	8000c28 <MUSART_u8Send_Byte>
		Local_u8Index++;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	3301      	adds	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1ed      	bne.n	8000c80 <MUSART_u8Send_Data+0x12>
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <MUSART_u8Receive_Byte>:
/*******************************************************************************************************/
u8 MUSART_u8Receive_Byte(u8 copy_u8Index,u8 *copy_u8Data){
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	6039      	str	r1, [r7, #0]
 8000cb8:	71fb      	strb	r3, [r7, #7]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f817 	bl	8000cf0 <MUSART_SetUSART>
 8000cc2:	60b8      	str	r0, [r7, #8]
	u8 Statue = Receive;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
	if( GET_BIT( _USART_->SR ,5) == 1 )
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d105      	bne.n	8000ce2 <MUSART_u8Receive_Byte+0x34>
	{
		*copy_u8Data= _USART_->DR;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e001      	b.n	8000ce6 <MUSART_u8Receive_Byte+0x38>
	}
	else
	{
		Statue = NoReceive ;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
	}
		return Statue ;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MUSART_SetUSART>:
	*copy_u8Data= _USART_->DR;
	return *copy_u8Data ;

}
/*******************************************************************************************************/
USART_REG MUSART_SetUSART(u8 copy_u8Index){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	USART_REG L_handle= (USART_REG) USART1_BASE_ADRESS;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MUSART_SetUSART+0x44>)
 8000cfc:	60fb      	str	r3, [r7, #12]
	switch (copy_u8Index)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b06      	cmp	r3, #6
 8000d02:	d00c      	beq.n	8000d1e <MUSART_SetUSART+0x2e>
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	dc0d      	bgt.n	8000d24 <MUSART_SetUSART+0x34>
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d002      	beq.n	8000d12 <MUSART_SetUSART+0x22>
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d003      	beq.n	8000d18 <MUSART_SetUSART+0x28>
 8000d10:	e008      	b.n	8000d24 <MUSART_SetUSART+0x34>
	{
	case 1: L_handle =  (USART_REG) USART1_BASE_ADRESS; break;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MUSART_SetUSART+0x44>)
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e005      	b.n	8000d24 <MUSART_SetUSART+0x34>
	case 2: L_handle =  (USART_REG) USART2_BASE_ADRESS; break;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MUSART_SetUSART+0x48>)
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e002      	b.n	8000d24 <MUSART_SetUSART+0x34>
	case 6: L_handle =  (USART_REG) USART6_BASE_ADRESS; break;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MUSART_SetUSART+0x4c>)
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	bf00      	nop
	}
	return L_handle;
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40011400 	.word	0x40011400

08000d40 <USART1_IRQHandler>:
}

/*******************************************************************************************************/
/** ISR of USART1 **/
void USART1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	USART1_REG->SR = 0 ;	//reset flags
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <USART1_IRQHandler+0x14>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
	USART_USART1Function();
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <USART1_IRQHandler+0x18>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4798      	blx	r3
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40011000 	.word	0x40011000
 8000d58:	2000003c 	.word	0x2000003c

08000d5c <USART2_IRQHandler>:

/** ISR of USART2 **/
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	USART2_REG->SR = 0 ;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <USART2_IRQHandler+0x14>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	USART_USART2Function();
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <USART2_IRQHandler+0x18>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4798      	blx	r3
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	20000040 	.word	0x20000040

08000d78 <USART6_IRQHandler>:

/** ISR of USART6 **/
void USART6_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	USART6_REG->SR = 0 ;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <USART6_IRQHandler+0x14>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
	USART_USART6Function();
 8000d82:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <USART6_IRQHandler+0x18>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4798      	blx	r3
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40011400 	.word	0x40011400
 8000d90:	20000044 	.word	0x20000044

08000d94 <main>:
/* functions deceleration  END */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	/*Initialize System Clock to be 16MHz from HSI*/
	MRCC_voidInitSystemClk();
 8000d9a:	f7ff fdad 	bl	80008f8 <MRCC_voidInitSystemClk>
	MSTK_voidInit();
 8000d9e:	f7ff fdc7 	bl	8000930 <MSTK_voidInit>
	_delay_ms(1500);
 8000da2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000da6:	f7ff fe15 	bl	80009d4 <_delay_ms>
	/*Initialize  USARTs GPIO clock*/
	MRCC_voidEnablePeripheralClock(AHB1,GPIOA_PORT);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fd51 	bl	8000854 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1,GPIOC_PORT);
 8000db2:	2102      	movs	r1, #2
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fd4d 	bl	8000854 <MRCC_voidEnablePeripheralClock>
	/*USART 1 initializing*/								//for Node_1
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART1);
 8000dba:	2104      	movs	r1, #4
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff fd49 	bl	8000854 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_9,  MODE_ALTF);
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff faa6 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_10, MODE_ALTF);
 8000dcc:	2202      	movs	r2, #2
 8000dce:	210a      	movs	r1, #10
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff faa1 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_9,  ALTFN_7);
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	2109      	movs	r1, #9
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fc56 	bl	800068c <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_10, ALTFN_7);
 8000de0:	2207      	movs	r2, #7
 8000de2:	210a      	movs	r1, #10
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fc51 	bl	800068c <MGPIO_voidSetPinAltFn>
	/*USART 2 initializing*/								//for Node_2
	MRCC_voidEnablePeripheralClock(APB1,PERIPHERAL_EN_UART2);
 8000dea:	2111      	movs	r1, #17
 8000dec:	2002      	movs	r0, #2
 8000dee:	f7ff fd31 	bl	8000854 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_2,  MODE_ALTF);
 8000df2:	2202      	movs	r2, #2
 8000df4:	2102      	movs	r1, #2
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fa8e 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_3,  MODE_ALTF);
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	2103      	movs	r1, #3
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fa89 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_2,  ALTFN_7);
 8000e06:	2207      	movs	r2, #7
 8000e08:	2102      	movs	r1, #2
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fc3e 	bl	800068c <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_3,  ALTFN_7);
 8000e10:	2207      	movs	r2, #7
 8000e12:	2103      	movs	r1, #3
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fc39 	bl	800068c <MGPIO_voidSetPinAltFn>
	/*USART 6 initializing*/								//for ESP32
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART6);
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fd19 	bl	8000854 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_11,  MODE_ALTF);
 8000e22:	2202      	movs	r2, #2
 8000e24:	210b      	movs	r1, #11
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fa76 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_12,  MODE_ALTF);
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	210c      	movs	r1, #12
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fa71 	bl	8000318 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_11,  ALTFN_8);
 8000e36:	2208      	movs	r2, #8
 8000e38:	210b      	movs	r1, #11
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fc26 	bl	800068c <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_12,  ALTFN_8);
 8000e40:	2208      	movs	r2, #8
 8000e42:	210c      	movs	r1, #12
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fc21 	bl	800068c <MGPIO_voidSetPinAltFn>
	/*USARTs initialize and enable*/
	MUSART_voidInit();
 8000e4a:	f7ff fe13 	bl	8000a74 <MUSART_voidInit>
	MUSART_voidEnable(USART1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff febc 	bl	8000bcc <MUSART_voidEnable>
	MUSART_voidEnable(USART2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff feb9 	bl	8000bcc <MUSART_voidEnable>
	MUSART_voidEnable(USART6);
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff feb6 	bl	8000bcc <MUSART_voidEnable>
	/*SysTick initialize*/
	MSTK_voidInit();
 8000e60:	f7ff fd66 	bl	8000930 <MSTK_voidInit>
	/*Initialize the LEDS*/
	LED_Init(&Led_3);
 8000e64:	48a1      	ldr	r0, [pc, #644]	; (80010ec <main+0x358>)
 8000e66:	f7ff f9b5 	bl	80001d4 <LED_Init>
	LED_Init(&Led_1);
 8000e6a:	48a1      	ldr	r0, [pc, #644]	; (80010f0 <main+0x35c>)
 8000e6c:	f7ff f9b2 	bl	80001d4 <LED_Init>
	LED_Init(&Led_2);
 8000e70:	48a0      	ldr	r0, [pc, #640]	; (80010f4 <main+0x360>)
 8000e72:	f7ff f9af 	bl	80001d4 <LED_Init>

	/* begin ---------------------------------------------------------*/
	LED_Off(&Led_3);
 8000e76:	489d      	ldr	r0, [pc, #628]	; (80010ec <main+0x358>)
 8000e78:	f7ff f9d0 	bl	800021c <LED_Off>
#if	(GW_DEBUGGING == ENABLE)
	MUSART_u8Send_Data(USART6,(u8*)"---GETEWAY_READY---");		//---
	MUSART_u8Send_Data(USART6,MUSART_NewLine);				 	//---
#endif
	/*USARTs receive statuses*/
	u8 LOC_u8RecStatus_1 = NoReceive;	//from Node_1
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8RecStatus_2 = NoReceive;	//from Node_2
 8000e80:	2300      	movs	r3, #0
 8000e82:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8RecStatus_6 = NoReceive;	//from ESP32
 8000e84:	2300      	movs	r3, #0
 8000e86:	717b      	strb	r3, [r7, #5]

	while(1)
	{
		LOC_u8RecStatus_1 =MUSART_u8Receive_Byte(USART1,& u8RecBuffer_1); 					    //from Node_1
 8000e88:	499b      	ldr	r1, [pc, #620]	; (80010f8 <main+0x364>)
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff0f 	bl	8000cae <MUSART_u8Receive_Byte>
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
		LOC_u8RecStatus_2 =MUSART_u8Receive_Byte(USART2,& u8RecBuffer_2); 					    //from Node_2
 8000e94:	4999      	ldr	r1, [pc, #612]	; (80010fc <main+0x368>)
 8000e96:	2002      	movs	r0, #2
 8000e98:	f7ff ff09 	bl	8000cae <MUSART_u8Receive_Byte>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71bb      	strb	r3, [r7, #6]
		LOC_u8RecStatus_6 =MUSART_u8Receive_Byte(USART6,& u8RecBuffer_6[u8RecCounter_6]); 	    //from ESP32
 8000ea0:	4b97      	ldr	r3, [pc, #604]	; (8001100 <main+0x36c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b96      	ldr	r3, [pc, #600]	; (8001104 <main+0x370>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f7ff fefd 	bl	8000cae <MUSART_u8Receive_Byte>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	717b      	strb	r3, [r7, #5]
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 ESP32	-----------------------------------------
		if( LOC_u8RecStatus_6 == Receive )
 8000eb8:	797b      	ldrb	r3, [r7, #5]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	f040 80c3 	bne.w	8001046 <main+0x2b2>
		{
			/*Collecting data in the buffer*/
			if( u8RecBuffer_6[u8RecCounter_6] == '\n' ){
 8000ec0:	4b8f      	ldr	r3, [pc, #572]	; (8001100 <main+0x36c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b8e      	ldr	r3, [pc, #568]	; (8001104 <main+0x370>)
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	f040 80b2 	bne.w	8001038 <main+0x2a4>
				/*indicate the target node and send the restart order to the app*/
				if( u8FirstLineReq == 1 ){
 8000ed4:	4b8c      	ldr	r3, [pc, #560]	; (8001108 <main+0x374>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d161      	bne.n	8000fa2 <main+0x20e>

					/*--------UPDATE  NODE 1 or 2--------*/
					if (u8RecBuffer_6[0]=='1') {
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <main+0x370>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b31      	cmp	r3, #49	; 0x31
 8000ee6:	d109      	bne.n	8000efc <main+0x168>
#if	(GW_DEBUGGING == ENABLE)
						MUSART_u8Send_Data(USART6,(u8 *)"Start USART 1");	 //---
#endif
						USART=USART1;
 8000ee8:	4b88      	ldr	r3, [pc, #544]	; (800110c <main+0x378>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000eee:	4b86      	ldr	r3, [pc, #536]	; (8001108 <main+0x374>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
						LED_On(&Led_1);
 8000ef4:	487e      	ldr	r0, [pc, #504]	; (80010f0 <main+0x35c>)
 8000ef6:	f7ff f97f 	bl	80001f8 <LED_On>
 8000efa:	e052      	b.n	8000fa2 <main+0x20e>
					}
					else if (u8RecBuffer_6[0]=='2') {
 8000efc:	4b81      	ldr	r3, [pc, #516]	; (8001104 <main+0x370>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b32      	cmp	r3, #50	; 0x32
 8000f04:	d106      	bne.n	8000f14 <main+0x180>
#if	(GW_DEBUGGING == ENABLE)
						MUSART_u8Send_Data(USART6,(u8 *)"Start USART 2");	 //---
#endif
						USART=USART2;
 8000f06:	4b81      	ldr	r3, [pc, #516]	; (800110c <main+0x378>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f0c:	4b7e      	ldr	r3, [pc, #504]	; (8001108 <main+0x374>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e046      	b.n	8000fa2 <main+0x20e>
					}

					/*--------applications on NODE_1	(FORWARD,BACKWORD,AUTOPARK)--------*/
					else if(u8RecBuffer_6[0]=='W'){
 8000f14:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <main+0x370>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b57      	cmp	r3, #87	; 0x57
 8000f1c:	d106      	bne.n	8000f2c <main+0x198>
						USART=USART1;
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	; (800110c <main+0x378>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f24:	4b78      	ldr	r3, [pc, #480]	; (8001108 <main+0x374>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e03a      	b.n	8000fa2 <main+0x20e>
					}
					else if(u8RecBuffer_6[0]=='S'){
 8000f2c:	4b75      	ldr	r3, [pc, #468]	; (8001104 <main+0x370>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b53      	cmp	r3, #83	; 0x53
 8000f34:	d106      	bne.n	8000f44 <main+0x1b0>
						USART=USART1;
 8000f36:	4b75      	ldr	r3, [pc, #468]	; (800110c <main+0x378>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f3c:	4b72      	ldr	r3, [pc, #456]	; (8001108 <main+0x374>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e02e      	b.n	8000fa2 <main+0x20e>
					}
					else if(u8RecBuffer_6[0]=='A'){
 8000f44:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <main+0x370>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b41      	cmp	r3, #65	; 0x41
 8000f4c:	d106      	bne.n	8000f5c <main+0x1c8>
						USART=USART1;
 8000f4e:	4b6f      	ldr	r3, [pc, #444]	; (800110c <main+0x378>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f54:	4b6c      	ldr	r3, [pc, #432]	; (8001108 <main+0x374>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e022      	b.n	8000fa2 <main+0x20e>
					}
					else if(u8RecBuffer_6[0]=='O'){
 8000f5c:	4b69      	ldr	r3, [pc, #420]	; (8001104 <main+0x370>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b4f      	cmp	r3, #79	; 0x4f
 8000f64:	d106      	bne.n	8000f74 <main+0x1e0>
						USART=USART1;
 8000f66:	4b69      	ldr	r3, [pc, #420]	; (800110c <main+0x378>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f6c:	4b66      	ldr	r3, [pc, #408]	; (8001108 <main+0x374>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e016      	b.n	8000fa2 <main+0x20e>
					}

					/*--------applications on NODE_2	(CONDITIONER)--------*/
					else if(u8RecBuffer_6[0]=='5'){
 8000f74:	4b63      	ldr	r3, [pc, #396]	; (8001104 <main+0x370>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b35      	cmp	r3, #53	; 0x35
 8000f7c:	d106      	bne.n	8000f8c <main+0x1f8>
						USART=USART2;
 8000f7e:	4b63      	ldr	r3, [pc, #396]	; (800110c <main+0x378>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f84:	4b60      	ldr	r3, [pc, #384]	; (8001108 <main+0x374>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e00a      	b.n	8000fa2 <main+0x20e>
					}
					else if(u8RecBuffer_6[0]=='6'){
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <main+0x370>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b36      	cmp	r3, #54	; 0x36
 8000f94:	d105      	bne.n	8000fa2 <main+0x20e>
						USART=USART2;
 8000f96:	4b5d      	ldr	r3, [pc, #372]	; (800110c <main+0x378>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <main+0x374>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
					}
					else{ /*for future fetcher*/ }
				}
				u8RecBuffer_6[u8RecCounter_6+1]='\0';	// for not sending anything from the older data in the buffer
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <main+0x36c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a56      	ldr	r2, [pc, #344]	; (8001104 <main+0x370>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	54d1      	strb	r1, [r2, r3]
				/*send to the target*/
				if(USART==USART1 || USART==USART2){
 8000fb0:	4b56      	ldr	r3, [pc, #344]	; (800110c <main+0x378>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d004      	beq.n	8000fc4 <main+0x230>
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <main+0x378>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d140      	bne.n	8001046 <main+0x2b2>
					MUSART_u8Send_Data(USART,u8RecBuffer_6);
 8000fc4:	4b51      	ldr	r3, [pc, #324]	; (800110c <main+0x378>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	494e      	ldr	r1, [pc, #312]	; (8001104 <main+0x370>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe4e 	bl	8000c6e <MUSART_u8Send_Data>
					LED_On(&Led_2);
 8000fd2:	4848      	ldr	r0, [pc, #288]	; (80010f4 <main+0x360>)
 8000fd4:	f7ff f910 	bl	80001f8 <LED_On>

					Led_Toggle(&Led_3);	//led to visualizes the send process
 8000fd8:	4844      	ldr	r0, [pc, #272]	; (80010ec <main+0x358>)
 8000fda:	f7ff f931 	bl	8000240 <Led_Toggle>
					/*Set buffer counter to 0 */
					u8RecCounter_6   = 0 ;
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <main+0x36c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

					/*rest usart after ordering the app*/
					if((u8FirstLineReq  == 0) && (u8RecBuffer_6[0]=='W' || u8RecBuffer_6[0]=='A' || u8RecBuffer_6[0]=='S' || u8RecBuffer_6[0]=='O' || u8RecBuffer_6[0]=='6' || u8RecBuffer_6[0]=='5')){
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <main+0x374>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12b      	bne.n	8001046 <main+0x2b2>
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <main+0x370>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b57      	cmp	r3, #87	; 0x57
 8000ff6:	d018      	beq.n	800102a <main+0x296>
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <main+0x370>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b41      	cmp	r3, #65	; 0x41
 8001000:	d013      	beq.n	800102a <main+0x296>
 8001002:	4b40      	ldr	r3, [pc, #256]	; (8001104 <main+0x370>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b53      	cmp	r3, #83	; 0x53
 800100a:	d00e      	beq.n	800102a <main+0x296>
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <main+0x370>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b4f      	cmp	r3, #79	; 0x4f
 8001014:	d009      	beq.n	800102a <main+0x296>
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <main+0x370>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b36      	cmp	r3, #54	; 0x36
 800101e:	d004      	beq.n	800102a <main+0x296>
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <main+0x370>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b35      	cmp	r3, #53	; 0x35
 8001028:	d10d      	bne.n	8001046 <main+0x2b2>
						u8FirstLineReq  = 1;
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <main+0x374>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
						USART=0;
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <main+0x378>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e006      	b.n	8001046 <main+0x2b2>

				}


			}
			else{ u8RecCounter_6++ ; }
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <main+0x36c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <main+0x36c>)
 8001044:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 Node 1	-----------------------------------------
		if( LOC_u8RecStatus_1 == Receive )
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d137      	bne.n	80010bc <main+0x328>
		{
			/*Receive the ACK from the BOOTLOADER*/
			if(u8RecBuffer_1=='B'){			//node1 in the BOOTLOADER
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <main+0x364>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b42      	cmp	r3, #66	; 0x42
 8001054:	d104      	bne.n	8001060 <main+0x2cc>
				MUSART_u8Send_Byte(USART6,'B');
 8001056:	2142      	movs	r1, #66	; 0x42
 8001058:	2006      	movs	r0, #6
 800105a:	f7ff fde5 	bl	8000c28 <MUSART_u8Send_Byte>
 800105e:	e02a      	b.n	80010b6 <main+0x322>
			}
			else if(u8RecBuffer_1=='K'){	//record correct
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <main+0x364>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b4b      	cmp	r3, #75	; 0x4b
 8001068:	d104      	bne.n	8001074 <main+0x2e0>
#if	(GW_IMT_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,(u8 *)"ok");
 800106a:	4929      	ldr	r1, [pc, #164]	; (8001110 <main+0x37c>)
 800106c:	2006      	movs	r0, #6
 800106e:	f7ff fdfe 	bl	8000c6e <MUSART_u8Send_Data>
 8001072:	e020      	b.n	80010b6 <main+0x322>
#else
				MUSART_u8Send_Byte(USART6,'K');
#endif
			}
			else if (u8RecBuffer_1=='N' ) {	//error in the record
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <main+0x364>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b4e      	cmp	r3, #78	; 0x4e
 800107c:	d104      	bne.n	8001088 <main+0x2f4>
				MUSART_u8Send_Byte(USART6,'N');
 800107e:	214e      	movs	r1, #78	; 0x4e
 8001080:	2006      	movs	r0, #6
 8001082:	f7ff fdd1 	bl	8000c28 <MUSART_u8Send_Byte>
 8001086:	e016      	b.n	80010b6 <main+0x322>
			}
			else if (u8RecBuffer_1=='D') {	//End of hex file
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <main+0x364>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b44      	cmp	r3, #68	; 0x44
 8001090:	d106      	bne.n	80010a0 <main+0x30c>
				MUSART_u8Send_Byte(USART6,'D');
 8001092:	2144      	movs	r1, #68	; 0x44
 8001094:	2006      	movs	r0, #6
 8001096:	f7ff fdc7 	bl	8000c28 <MUSART_u8Send_Byte>
				Reset_Flags();				//restart & send something to show on the tablet
 800109a:	f000 f865 	bl	8001168 <Reset_Flags>
 800109e:	e00a      	b.n	80010b6 <main+0x322>
			}
			else if(u8RecBuffer_1=='F'){
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <main+0x364>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b46      	cmp	r3, #70	; 0x46
 80010a8:	d105      	bne.n	80010b6 <main+0x322>
				//Bootloader received wrong 3 times ACK for ESP to re download the file or ask the server to fix the problem
				MUSART_u8Send_Byte(USART6,'F');
 80010aa:	2146      	movs	r1, #70	; 0x46
 80010ac:	2006      	movs	r0, #6
 80010ae:	f7ff fdbb 	bl	8000c28 <MUSART_u8Send_Byte>
				Reset_Flags();
 80010b2:	f000 f859 	bl	8001168 <Reset_Flags>
#if	(GW_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,&u8RecBuffer_1);		//---
				MUSART_u8Send_Data(USART6," --- ERRORR1\n");	//---
#endif
			}
			Led_Toggle(&Led_3);	//led to visualizes the send process
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <main+0x358>)
 80010b8:	f7ff f8c2 	bl	8000240 <Led_Toggle>
		}
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 Node 2	-----------------------------------------
		if( LOC_u8RecStatus_2 == Receive )
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	f47f aee2 	bne.w	8000e88 <main+0xf4>
		{
			/*Receive the ACK from the BOOTLOADER*/
			if(u8RecBuffer_2=='B'){			//node2 in the BOOTLOADER
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <main+0x368>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b42      	cmp	r3, #66	; 0x42
 80010cc:	d104      	bne.n	80010d8 <main+0x344>
				MUSART_u8Send_Byte(USART6,'B');
 80010ce:	2142      	movs	r1, #66	; 0x42
 80010d0:	2006      	movs	r0, #6
 80010d2:	f7ff fda9 	bl	8000c28 <MUSART_u8Send_Byte>
 80010d6:	e03e      	b.n	8001156 <main+0x3c2>
			}
			else if(u8RecBuffer_2=='K'){	//record correct
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <main+0x368>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b4b      	cmp	r3, #75	; 0x4b
 80010e0:	d118      	bne.n	8001114 <main+0x380>
#if	(GW_IMT_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,(u8 *)"ok");
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <main+0x37c>)
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff fdc2 	bl	8000c6e <MUSART_u8Send_Data>
 80010ea:	e034      	b.n	8001156 <main+0x3c2>
 80010ec:	08001258 	.word	0x08001258
 80010f0:	08001248 	.word	0x08001248
 80010f4:	08001250 	.word	0x08001250
 80010f8:	20000077 	.word	0x20000077
 80010fc:	20000078 	.word	0x20000078
 8001100:	20000075 	.word	0x20000075
 8001104:	20000048 	.word	0x20000048
 8001108:	20000000 	.word	0x20000000
 800110c:	20000076 	.word	0x20000076
 8001110:	08001244 	.word	0x08001244
#else
				MUSART_u8Send_Byte(USART6,'K');
#endif
			}
			else if (u8RecBuffer_2=='N' ) {	//error in the record
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <main+0x3cc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b4e      	cmp	r3, #78	; 0x4e
 800111c:	d104      	bne.n	8001128 <main+0x394>
				MUSART_u8Send_Byte(USART6,'N');
 800111e:	214e      	movs	r1, #78	; 0x4e
 8001120:	2006      	movs	r0, #6
 8001122:	f7ff fd81 	bl	8000c28 <MUSART_u8Send_Byte>
 8001126:	e016      	b.n	8001156 <main+0x3c2>
			}
			else if (u8RecBuffer_2=='D') {	//End of hex file
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <main+0x3cc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b44      	cmp	r3, #68	; 0x44
 8001130:	d106      	bne.n	8001140 <main+0x3ac>
				MUSART_u8Send_Byte(USART6,'D');
 8001132:	2144      	movs	r1, #68	; 0x44
 8001134:	2006      	movs	r0, #6
 8001136:	f7ff fd77 	bl	8000c28 <MUSART_u8Send_Byte>
				Reset_Flags();				//restart send something to show on the LCD
 800113a:	f000 f815 	bl	8001168 <Reset_Flags>
 800113e:	e00a      	b.n	8001156 <main+0x3c2>
			}
			else if(u8RecBuffer_2=='F'){
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <main+0x3cc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b46      	cmp	r3, #70	; 0x46
 8001148:	d105      	bne.n	8001156 <main+0x3c2>
				//Bootloader received wrong 3 times ACK for ESP to re download the file or ask the server to fix the problem
				MUSART_u8Send_Byte(USART6,'F');
 800114a:	2146      	movs	r1, #70	; 0x46
 800114c:	2006      	movs	r0, #6
 800114e:	f7ff fd6b 	bl	8000c28 <MUSART_u8Send_Byte>
				Reset_Flags();
 8001152:	f000 f809 	bl	8001168 <Reset_Flags>
#if	(GW_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,&u8RecBuffer_2);		//---
				MUSART_u8Send_Data(USART6," --- ERRORR2\n");	//---
#endif
			}
			Led_Toggle(&Led_3);	//led to visualizes the send process
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <main+0x3d0>)
 8001158:	f7ff f872 	bl	8000240 <Led_Toggle>
		LOC_u8RecStatus_1 =MUSART_u8Receive_Byte(USART1,& u8RecBuffer_1); 					    //from Node_1
 800115c:	e694      	b.n	8000e88 <main+0xf4>
 800115e:	bf00      	nop
 8001160:	20000078 	.word	0x20000078
 8001164:	08001258 	.word	0x08001258

08001168 <Reset_Flags>:

/* USER CODE END 0 */
/* Functions ---------------------------------------------------------*/

void Reset_Flags(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	u8FirstLineReq = 1;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <Reset_Flags+0x1c>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
	USART=0;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <Reset_Flags+0x20>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	LED_Off(&Led_3);
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <Reset_Flags+0x24>)
 800117a:	f7ff f84f 	bl	800021c <LED_Off>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000
 8001188:	20000076 	.word	0x20000076
 800118c:	08001258 	.word	0x08001258

08001190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001192:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001194:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopForever+0x6>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopForever+0xe>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopForever+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011be:	f000 f811 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff fde7 	bl	8000d94 <main>

080011c6 <LoopForever>:

LoopForever:
  b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   r0, =_estack
 80011c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80011d4:	08001268 	.word	0x08001268
  ldr r2, =_sbss
 80011d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011dc:	2000007c 	.word	0x2000007c

080011e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>
	...

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4d0d      	ldr	r5, [pc, #52]	; (800121c <__libc_init_array+0x38>)
 80011e8:	4c0d      	ldr	r4, [pc, #52]	; (8001220 <__libc_init_array+0x3c>)
 80011ea:	1b64      	subs	r4, r4, r5
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	2600      	movs	r6, #0
 80011f0:	42a6      	cmp	r6, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	4d0b      	ldr	r5, [pc, #44]	; (8001224 <__libc_init_array+0x40>)
 80011f6:	4c0c      	ldr	r4, [pc, #48]	; (8001228 <__libc_init_array+0x44>)
 80011f8:	f000 f818 	bl	800122c <_init>
 80011fc:	1b64      	subs	r4, r4, r5
 80011fe:	10a4      	asrs	r4, r4, #2
 8001200:	2600      	movs	r6, #0
 8001202:	42a6      	cmp	r6, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f855 3b04 	ldr.w	r3, [r5], #4
 800120c:	4798      	blx	r3
 800120e:	3601      	adds	r6, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f855 3b04 	ldr.w	r3, [r5], #4
 8001216:	4798      	blx	r3
 8001218:	3601      	adds	r6, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	08001260 	.word	0x08001260
 8001220:	08001260 	.word	0x08001260
 8001224:	08001260 	.word	0x08001260
 8001228:	08001264 	.word	0x08001264

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
