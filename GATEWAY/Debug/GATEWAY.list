
GATEWAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001044  08001044  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001044  08001044  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001044  08001044  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800104c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000004  08001050  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001050  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016e2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000089c  00000000  00000000  00021759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00021ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000205  00000000  00000000  000222c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000174b  00000000  00000000  000224cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001880  00000000  00000000  00023c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000676d  00000000  00000000  00025498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009c0  00000000  00000000  0002bc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001024 	.word	0x08001024

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001024 	.word	0x08001024

080001d4 <LED_Init>:
/* 1- Function Description -> Function Set The Mode Of Pin Output Take led structure                   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Init(const LedX_t *LED){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	MGPIO_voidSetPinMode(LED->LED_port,LED->LED_Pin,MODE_OUTPUT);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	b2d8      	uxtb	r0, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	2201      	movs	r2, #1
 80001ea:	4619      	mov	r1, r3
 80001ec:	f000 f882 	bl	80002f4 <MGPIO_voidSetPinMode>

}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <LED_Off>:
/* 1- Function Description -> Function turn off the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Off(const LedX_t *LED){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,LOW);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	b2d8      	uxtb	r0, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f000 f8e8 	bl	80003e4 <MGPIO_voidWriteData>

}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <Led_Toggle>:
/* 1- Function Description -> Function toggle the led condition      								   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void Led_Toggle	(const LedX_t *LED){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

	MGPIO_voidToggleData(LED->LED_port,LED->LED_Pin);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b2da      	uxtb	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	4619      	mov	r1, r3
 8000232:	4610      	mov	r0, r2
 8000234:	f000 f9a8 	bl	8000588 <MGPIO_voidToggleData>

}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <EXTI0_IRQHandler>:

}
/*******************************************************************************************************/

void EXTI0_IRQHandler(void)								
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI0_IRQHandler+0x1c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_0 );					// With Out That It Will Do INT Alaways
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <EXTI0_IRQHandler+0x20>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <EXTI0_IRQHandler+0x20>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6153      	str	r3, [r2, #20]
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000020 	.word	0x20000020
 8000260:	40013c00 	.word	0x40013c00

08000264 <EXTI1_IRQHandler>:

/*******************************************************************************************************/
void EXTI1_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI1_IRQHandler+0x1c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_1 );					// With Out That It Will Do INT Alaways
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <EXTI1_IRQHandler+0x20>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <EXTI1_IRQHandler+0x20>)
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	6153      	str	r3, [r2, #20]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000024 	.word	0x20000024
 8000284:	40013c00 	.word	0x40013c00

08000288 <EXTI2_IRQHandler>:

/*******************************************************************************************************/
void EXTI2_IRQHandler(void)								
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	EXTI2_CallBack();
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <EXTI2_IRQHandler+0x1c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_2 );					// With Out That It Will Do INT Alaways
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <EXTI2_IRQHandler+0x20>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <EXTI2_IRQHandler+0x20>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6153      	str	r3, [r2, #20]
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	40013c00 	.word	0x40013c00

080002ac <EXTI3_IRQHandler>:

/*******************************************************************************************************/
void EXTI3_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI3_CallBack();
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI3_IRQHandler+0x1c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_3 );					// With Out That It Will Do INT Alaways
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI3_IRQHandler+0x20>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI3_IRQHandler+0x20>)
 80002bc:	f043 0308 	orr.w	r3, r3, #8
 80002c0:	6153      	str	r3, [r2, #20]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	40013c00 	.word	0x40013c00

080002d0 <EXTI4_IRQHandler>:

/*******************************************************************************************************/
void EXTI4_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI4_CallBack();
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI4_IRQHandler+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_4 );					// With Out That It Will Do INT Alaways
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI4_IRQHandler+0x20>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI4_IRQHandler+0x20>)
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	6153      	str	r3, [r2, #20]
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000030 	.word	0x20000030
 80002f0:	40013c00 	.word	0x40013c00

080002f4 <MGPIO_voidSetPinMode>:
#include "MGPIO_interface.h"
#include "MGPIO_config.h"
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/
void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
 80002fe:	460b      	mov	r3, r1
 8000300:	71bb      	strb	r3, [r7, #6]
 8000302:	4613      	mov	r3, r2
 8000304:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b05      	cmp	r3, #5
 800030a:	d857      	bhi.n	80003bc <MGPIO_voidSetPinMode+0xc8>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <MGPIO_voidSetPinMode+0x20>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	0800032d 	.word	0x0800032d
 8000318:	08000345 	.word	0x08000345
 800031c:	0800035d 	.word	0x0800035d
 8000320:	08000375 	.word	0x08000375
 8000324:	0800038d 	.word	0x0800038d
 8000328:	080003a5 	.word	0x080003a5
	{
	  case GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800032c:	4b27      	ldr	r3, [pc, #156]	; (80003cc <MGPIO_voidSetPinMode+0xd8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	7979      	ldrb	r1, [r7, #5]
 8000332:	79ba      	ldrb	r2, [r7, #6]
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a23      	ldr	r2, [pc, #140]	; (80003cc <MGPIO_voidSetPinMode+0xd8>)
 800033e:	430b      	orrs	r3, r1
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	e03c      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  case GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <MGPIO_voidSetPinMode+0xdc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	7979      	ldrb	r1, [r7, #5]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	0052      	lsls	r2, r2, #1
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a1e      	ldr	r2, [pc, #120]	; (80003d0 <MGPIO_voidSetPinMode+0xdc>)
 8000356:	430b      	orrs	r3, r1
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	e030      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  case GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <MGPIO_voidSetPinMode+0xe0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7979      	ldrb	r1, [r7, #5]
 8000362:	79ba      	ldrb	r2, [r7, #6]
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <MGPIO_voidSetPinMode+0xe0>)
 800036e:	430b      	orrs	r3, r1
 8000370:	6013      	str	r3, [r2, #0]
 8000372:	e024      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  case GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MGPIO_voidSetPinMode+0xe4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	7979      	ldrb	r1, [r7, #5]
 800037a:	79ba      	ldrb	r2, [r7, #6]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <MGPIO_voidSetPinMode+0xe4>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
 800038a:	e018      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  case GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MGPIO_voidSetPinMode+0xe8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	7979      	ldrb	r1, [r7, #5]
 8000392:	79ba      	ldrb	r2, [r7, #6]
 8000394:	0052      	lsls	r2, r2, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <MGPIO_voidSetPinMode+0xe8>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	e00c      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  case GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MGPIO_voidSetPinMode+0xec>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	7979      	ldrb	r1, [r7, #5]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	0052      	lsls	r2, r2, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <MGPIO_voidSetPinMode+0xec>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
 80003ba:	e000      	b.n	80003be <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 80003bc:	bf00      	nop
    }
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40020400 	.word	0x40020400
 80003d4:	40020800 	.word	0x40020800
 80003d8:	40020c00 	.word	0x40020c00
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40021c00 	.word	0x40021c00

080003e4 <MGPIO_voidWriteData>:
	return L_u8Data;
	
}
/*******************************************************************************************************/
void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
 80003ee:	460b      	mov	r3, r1
 80003f0:	71bb      	strb	r3, [r7, #6]
 80003f2:	4613      	mov	r3, r2
 80003f4:	717b      	strb	r3, [r7, #5]

	if(Copy_u8State==HIGH)
 80003f6:	797b      	ldrb	r3, [r7, #5]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d155      	bne.n	80004a8 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b05      	cmp	r3, #5
 8000400:	f200 80ac 	bhi.w	800055c <MGPIO_voidWriteData+0x178>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <MGPIO_voidWriteData+0x28>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000425 	.word	0x08000425
 8000410:	0800043b 	.word	0x0800043b
 8000414:	08000451 	.word	0x08000451
 8000418:	08000467 	.word	0x08000467
 800041c:	0800047d 	.word	0x0800047d
 8000420:	08000493 	.word	0x08000493
		{
		case GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8000424:	4b52      	ldr	r3, [pc, #328]	; (8000570 <MGPIO_voidWriteData+0x18c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	79ba      	ldrb	r2, [r7, #6]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a4f      	ldr	r2, [pc, #316]	; (8000570 <MGPIO_voidWriteData+0x18c>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6153      	str	r3, [r2, #20]
 8000438:	e093      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800043a:	4b4e      	ldr	r3, [pc, #312]	; (8000574 <MGPIO_voidWriteData+0x190>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	79ba      	ldrb	r2, [r7, #6]
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a4a      	ldr	r2, [pc, #296]	; (8000574 <MGPIO_voidWriteData+0x190>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	e088      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  SET_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <MGPIO_voidWriteData+0x194>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a46      	ldr	r2, [pc, #280]	; (8000578 <MGPIO_voidWriteData+0x194>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	e07d      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8000466:	4b45      	ldr	r3, [pc, #276]	; (800057c <MGPIO_voidWriteData+0x198>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a41      	ldr	r2, [pc, #260]	; (800057c <MGPIO_voidWriteData+0x198>)
 8000476:	430b      	orrs	r3, r1
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	e072      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 800047c:	4b40      	ldr	r3, [pc, #256]	; (8000580 <MGPIO_voidWriteData+0x19c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	79ba      	ldrb	r2, [r7, #6]
 8000482:	2101      	movs	r1, #1
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <MGPIO_voidWriteData+0x19c>)
 800048c:	430b      	orrs	r3, r1
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	e067      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8000492:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <MGPIO_voidWriteData+0x1a0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a38      	ldr	r2, [pc, #224]	; (8000584 <MGPIO_voidWriteData+0x1a0>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	e05c      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b05      	cmp	r3, #5
 80004ac:	d858      	bhi.n	8000560 <MGPIO_voidWriteData+0x17c>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <MGPIO_voidWriteData+0xd0>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004cd 	.word	0x080004cd
 80004b8:	080004e5 	.word	0x080004e5
 80004bc:	080004fd 	.word	0x080004fd
 80004c0:	08000515 	.word	0x08000515
 80004c4:	0800052d 	.word	0x0800052d
 80004c8:	08000545 	.word	0x08000545
		{
		case GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <MGPIO_voidWriteData+0x18c>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	2101      	movs	r1, #1
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	43d2      	mvns	r2, r2
 80004da:	4611      	mov	r1, r2
 80004dc:	4a24      	ldr	r2, [pc, #144]	; (8000570 <MGPIO_voidWriteData+0x18c>)
 80004de:	400b      	ands	r3, r1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	e03e      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <MGPIO_voidWriteData+0x190>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	43d2      	mvns	r2, r2
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a1f      	ldr	r2, [pc, #124]	; (8000574 <MGPIO_voidWriteData+0x190>)
 80004f6:	400b      	ands	r3, r1
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	e032      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MGPIO_voidWriteData+0x194>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	2101      	movs	r1, #1
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	43d2      	mvns	r2, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <MGPIO_voidWriteData+0x194>)
 800050e:	400b      	ands	r3, r1
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	e026      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MGPIO_voidWriteData+0x198>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	79ba      	ldrb	r2, [r7, #6]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	43d2      	mvns	r2, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <MGPIO_voidWriteData+0x198>)
 8000526:	400b      	ands	r3, r1
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	e01a      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MGPIO_voidWriteData+0x19c>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	79ba      	ldrb	r2, [r7, #6]
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	43d2      	mvns	r2, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <MGPIO_voidWriteData+0x19c>)
 800053e:	400b      	ands	r3, r1
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	e00e      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MGPIO_voidWriteData+0x1a0>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	43d2      	mvns	r2, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <MGPIO_voidWriteData+0x1a0>)
 8000556:	400b      	ands	r3, r1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	e002      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 800055c:	bf00      	nop
 800055e:	e000      	b.n	8000562 <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 8000560:	bf00      	nop
		}
	}
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40020000 	.word	0x40020000
 8000574:	40020400 	.word	0x40020400
 8000578:	40020800 	.word	0x40020800
 800057c:	40020c00 	.word	0x40020c00
 8000580:	40021000 	.word	0x40021000
 8000584:	40021c00 	.word	0x40021c00

08000588 <MGPIO_voidToggleData>:
/*******************************************************************************************************/
void MGPIO_voidToggleData(u8 Copy_u8PortName ,u8 Copy_u8PinNum)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8PortName)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d850      	bhi.n	8000640 <MGPIO_voidToggleData+0xb8>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <MGPIO_voidToggleData+0x1c>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005bd 	.word	0x080005bd
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005e9 	.word	0x080005e9
 80005b0:	080005ff 	.word	0x080005ff
 80005b4:	08000615 	.word	0x08000615
 80005b8:	0800062b 	.word	0x0800062b
		{
		case GPIOA_PORT :  TOG_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MGPIO_voidToggleData+0xc8>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MGPIO_voidToggleData+0xc8>)
 80005cc:	404b      	eors	r3, r1
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	e037      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		case GPIOB_PORT :  TOG_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MGPIO_voidToggleData+0xcc>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	79ba      	ldrb	r2, [r7, #6]
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MGPIO_voidToggleData+0xcc>)
 80005e2:	404b      	eors	r3, r1
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	e02c      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		case GPIOC_PORT :  TOG_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MGPIO_voidToggleData+0xd0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	79ba      	ldrb	r2, [r7, #6]
 80005ee:	2101      	movs	r1, #1
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MGPIO_voidToggleData+0xd0>)
 80005f8:	404b      	eors	r3, r1
 80005fa:	6153      	str	r3, [r2, #20]
 80005fc:	e021      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		case GPIOD_PORT :  TOG_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MGPIO_voidToggleData+0xd4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	79ba      	ldrb	r2, [r7, #6]
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <MGPIO_voidToggleData+0xd4>)
 800060e:	404b      	eors	r3, r1
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	e016      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		case GPIOE_PORT :  TOG_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MGPIO_voidToggleData+0xd8>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	79ba      	ldrb	r2, [r7, #6]
 800061a:	2101      	movs	r1, #1
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MGPIO_voidToggleData+0xd8>)
 8000624:	404b      	eors	r3, r1
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	e00b      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		case GPIOH_PORT :  TOG_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MGPIO_voidToggleData+0xdc>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	2101      	movs	r1, #1
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <MGPIO_voidToggleData+0xdc>)
 800063a:	404b      	eors	r3, r1
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	e000      	b.n	8000642 <MGPIO_voidToggleData+0xba>

		default : /*ERROR*/ break ;
 8000640:	bf00      	nop
		}

}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021c00 	.word	0x40021c00

08000668 <MGPIO_voidSetPinAltFn>:
		}
	}
}
/*******************************************************************************************************/
void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	460b      	mov	r3, r1
 8000674:	71bb      	strb	r3, [r7, #6]
 8000676:	4613      	mov	r3, r2
 8000678:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d85b      	bhi.n	8000738 <MGPIO_voidSetPinAltFn+0xd0>
	{
		/* Alf pins 0:7 */
		switch(Copy_u8PortNum )
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b05      	cmp	r3, #5
 8000684:	f200 80be 	bhi.w	8000804 <MGPIO_voidSetPinAltFn+0x19c>
 8000688:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <MGPIO_voidSetPinAltFn+0x28>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006a9 	.word	0x080006a9
 8000694:	080006c1 	.word	0x080006c1
 8000698:	080006d9 	.word	0x080006d9
 800069c:	080006f1 	.word	0x080006f1
 80006a0:	08000709 	.word	0x08000709
 80006a4:	08000721 	.word	0x08000721
		{
			 case GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006a8:	4b5b      	ldr	r3, [pc, #364]	; (8000818 <MGPIO_voidSetPinAltFn+0x1b0>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	7979      	ldrb	r1, [r7, #5]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a57      	ldr	r2, [pc, #348]	; (8000818 <MGPIO_voidSetPinAltFn+0x1b0>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6213      	str	r3, [r2, #32]
 80006be:	e0a4      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <MGPIO_voidSetPinAltFn+0x1b4>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	7979      	ldrb	r1, [r7, #5]
 80006c6:	79ba      	ldrb	r2, [r7, #6]
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a52      	ldr	r2, [pc, #328]	; (800081c <MGPIO_voidSetPinAltFn+0x1b4>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6213      	str	r3, [r2, #32]
 80006d6:	e098      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <MGPIO_voidSetPinAltFn+0x1b8>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	7979      	ldrb	r1, [r7, #5]
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a4d      	ldr	r2, [pc, #308]	; (8000820 <MGPIO_voidSetPinAltFn+0x1b8>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6213      	str	r3, [r2, #32]
 80006ee:	e08c      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80006f0:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <MGPIO_voidSetPinAltFn+0x1bc>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	7979      	ldrb	r1, [r7, #5]
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a48      	ldr	r2, [pc, #288]	; (8000824 <MGPIO_voidSetPinAltFn+0x1bc>)
 8000702:	430b      	orrs	r3, r1
 8000704:	6213      	str	r3, [r2, #32]
 8000706:	e080      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <MGPIO_voidSetPinAltFn+0x1c0>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	7979      	ldrb	r1, [r7, #5]
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a43      	ldr	r2, [pc, #268]	; (8000828 <MGPIO_voidSetPinAltFn+0x1c0>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6213      	str	r3, [r2, #32]
 800071e:	e074      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <MGPIO_voidSetPinAltFn+0x1c4>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	7979      	ldrb	r1, [r7, #5]
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a3e      	ldr	r2, [pc, #248]	; (800082c <MGPIO_voidSetPinAltFn+0x1c4>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6213      	str	r3, [r2, #32]
 8000736:	e068      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
		
	}
	/* Alf pins 8:15 */
	else
	{
	switch(Copy_u8PortNum )
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d864      	bhi.n	8000808 <MGPIO_voidSetPinAltFn+0x1a0>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <MGPIO_voidSetPinAltFn+0xdc>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	0800075d 	.word	0x0800075d
 8000748:	08000779 	.word	0x08000779
 800074c:	08000795 	.word	0x08000795
 8000750:	080007b1 	.word	0x080007b1
 8000754:	080007cd 	.word	0x080007cd
 8000758:	080007e9 	.word	0x080007e9
		{
			 case GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MGPIO_voidSetPinAltFn+0x1b0>)
 800075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	f002 0207 	and.w	r2, r2, #7
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <MGPIO_voidSetPinAltFn+0x1b0>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6253      	str	r3, [r2, #36]	; 0x24
 8000776:	e048      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MGPIO_voidSetPinAltFn+0x1b4>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	7979      	ldrb	r1, [r7, #5]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	f002 0207 	and.w	r2, r2, #7
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a23      	ldr	r2, [pc, #140]	; (800081c <MGPIO_voidSetPinAltFn+0x1b4>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6253      	str	r3, [r2, #36]	; 0x24
 8000792:	e03a      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MGPIO_voidSetPinAltFn+0x1b8>)
 8000796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000798:	7979      	ldrb	r1, [r7, #5]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	f002 0207 	and.w	r2, r2, #7
 80007a0:	0092      	lsls	r2, r2, #2
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <MGPIO_voidSetPinAltFn+0x1b8>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
 80007ae:	e02c      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MGPIO_voidSetPinAltFn+0x1bc>)
 80007b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b4:	7979      	ldrb	r1, [r7, #5]
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	f002 0207 	and.w	r2, r2, #7
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MGPIO_voidSetPinAltFn+0x1bc>)
 80007c6:	430b      	orrs	r3, r1
 80007c8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ca:	e01e      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MGPIO_voidSetPinAltFn+0x1c0>)
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	7979      	ldrb	r1, [r7, #5]
 80007d2:	79ba      	ldrb	r2, [r7, #6]
 80007d4:	f002 0207 	and.w	r2, r2, #7
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	4611      	mov	r1, r2
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <MGPIO_voidSetPinAltFn+0x1c0>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6253      	str	r3, [r2, #36]	; 0x24
 80007e6:	e010      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MGPIO_voidSetPinAltFn+0x1c4>)
 80007ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ec:	7979      	ldrb	r1, [r7, #5]
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	f002 0207 	and.w	r2, r2, #7
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <MGPIO_voidSetPinAltFn+0x1c4>)
 80007fe:	430b      	orrs	r3, r1
 8000800:	6253      	str	r3, [r2, #36]	; 0x24
 8000802:	e002      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8000804:	bf00      	nop
 8000806:	e000      	b.n	800080a <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8000808:	bf00      	nop
		
		
	}

	
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400
 8000820:	40020800 	.word	0x40020800
 8000824:	40020c00 	.word	0x40020c00
 8000828:	40021000 	.word	0x40021000
 800082c:	40021c00 	.word	0x40021c00

08000830 <MRCC_voidEnablePeripheralClock>:
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/

void MRCC_voidEnablePeripheralClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b03      	cmp	r3, #3
 8000844:	d836      	bhi.n	80008b4 <MRCC_voidEnablePeripheralClock+0x84>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <MRCC_voidEnablePeripheralClock+0x1c>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	0800085d 	.word	0x0800085d
 8000850:	08000873 	.word	0x08000873
 8000854:	08000889 	.word	0x08000889
 8000858:	0800089f 	.word	0x0800089f
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MRCC_voidEnablePeripheralClock+0x94>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MRCC_voidEnablePeripheralClock+0x94>)
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	e021      	b.n	80008b6 <MRCC_voidEnablePeripheralClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MRCC_voidEnablePeripheralClock+0x98>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <MRCC_voidEnablePeripheralClock+0x98>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e016      	b.n	80008b6 <MRCC_voidEnablePeripheralClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MRCC_voidEnablePeripheralClock+0x9c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	79ba      	ldrb	r2, [r7, #6]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <MRCC_voidEnablePeripheralClock+0x9c>)
 8000898:	430b      	orrs	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e00b      	b.n	80008b6 <MRCC_voidEnablePeripheralClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MRCC_voidEnablePeripheralClock+0xa0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	79ba      	ldrb	r2, [r7, #6]
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <MRCC_voidEnablePeripheralClock+0xa0>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e000      	b.n	80008b6 <MRCC_voidEnablePeripheralClock+0x86>
		default :     /*   ERROR   */          break ;
 80008b4:	bf00      	nop
		
	}
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023830 	.word	0x40023830
 80008c8:	40023834 	.word	0x40023834
 80008cc:	40023840 	.word	0x40023840
 80008d0:	40023844 	.word	0x40023844

080008d4 <MRCC_voidInitSystemClk>:
	
}
/*******************************************************************************************************/

void MRCC_voidInitSystemClk(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	/********** HSI **********/
#if CLKSRC == HSI 
	/* 1- EN HSI */
	SET_BIT(MRCC->CR , 0U);
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]
	/* 2- CLK SYS --> HSI */
	CLR_BIT(MRCC->CFGR, 0U);
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6093      	str	r3, [r2, #8]
	CLR_BIT(MRCC->CFGR, 1U);
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <MRCC_voidInitSystemClk+0x34>)
 80008f6:	f023 0302 	bic.w	r3, r3, #2
 80008fa:	6093      	str	r3, [r2, #8]
/****************************************************/

#else 
/* Error*/
#endif // The End Of Big IF	
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MSTK_voidInit>:
static void (* MSTK_CallBack) (void) = NULL;
static u8	MSTK_u8ModeOfInterval;

/*******************************************************************************************************/
/*                                      01- MSTK_voidInit                                              */
void MSTK_voidInit( void ){
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

	#if CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB
	SET_BIT(MSTK->CTRL , CLKSOURCE);
	#elif CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB_DIV8
	CLR_BIT(MSTK->CTRL , CLKSOURCE);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MSTK_voidInit+0x1c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <MSTK_voidInit+0x1c>)
 8000916:	f023 0304 	bic.w	r3, r3, #4
 800091a:	6013      	str	r3, [r2, #0]
	#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <SysTick_Handler>:

/*******************************************************************************************************/
/*                                      //Core Peripheral                                              */

void	SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	u8 Local_u8Temp = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]
	if(MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <SysTick_Handler+0x5c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d111      	bne.n	8000962 <SysTick_Handler+0x36>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(MSTK->CTRL , 1);
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <SysTick_Handler+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <SysTick_Handler+0x60>)
 8000944:	f023 0302 	bic.w	r3, r3, #2
 8000948:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(MSTK->CTRL , 0);
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <SysTick_Handler+0x60>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <SysTick_Handler+0x60>)
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	6013      	str	r3, [r2, #0]
			MSTK->LOAD	= 0;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <SysTick_Handler+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
			MSTK->VAL	= 0;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SysTick_Handler+0x60>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
	}
	 /*Execute Action to be done after the time passed*/
	if(MSTK_CallBack !=NULL)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <SysTick_Handler+0x64>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <SysTick_Handler+0x44>
	{	
	MSTK_CallBack();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <SysTick_Handler+0x64>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4798      	blx	r3
	}
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(MSTK->CTRL , COUNTFLAG);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SysTick_Handler+0x60>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000038 	.word	0x20000038
 800098c:	e000e010 	.word	0xe000e010
 8000990:	20000034 	.word	0x20000034

08000994 <MUSART_voidInit>:
/*******************************************************************************************************/


/*******************************************************************************************************/
void MUSART_voidInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

	/***********	USART_1		***********/
#if (USART1_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART1_REG->BRR = USART1_BUAD_RATE;
 8000998:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <MUSART_voidInit+0x14c>)
 800099a:	f240 6283 	movw	r2, #1667	; 0x683
 800099e:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART1_REG->CR2 |= (USART1_STOP_BITS << 12);
 80009a0:	4b4f      	ldr	r3, [pc, #316]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009a2:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART1_REG->CR1.SBK = USART1_SEND_BREAK;
 80009a8:	4a4d      	ldr	r2, [pc, #308]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009aa:	68d3      	ldr	r3, [r2, #12]
 80009ac:	f36f 0300 	bfc	r3, #0, #1
 80009b0:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART1_REG->CR1.RE = USART1_RECEIVER;
 80009b2:	4a4b      	ldr	r2, [pc, #300]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009b4:	68d3      	ldr	r3, [r2, #12]
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART1_REG->CR1.TE = USART1_TRANSMITTER;
 80009bc:	4a48      	ldr	r2, [pc, #288]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009be:	68d3      	ldr	r3, [r2, #12]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART1_REG->CR1.RXNEIE = USART1_RX_INT;
 80009c6:	4a46      	ldr	r2, [pc, #280]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009c8:	68d3      	ldr	r3, [r2, #12]
 80009ca:	f36f 1345 	bfc	r3, #5, #1
 80009ce:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART1_REG->CR1.TCIE = USART1_T_COMP_INT;
 80009d0:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009d2:	68d3      	ldr	r3, [r2, #12]
 80009d4:	f36f 1386 	bfc	r3, #6, #1
 80009d8:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART1_REG->CR1.PCE = USART1_PARITY_ENABLE;
 80009da:	4a41      	ldr	r2, [pc, #260]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009dc:	68d3      	ldr	r3, [r2, #12]
 80009de:	f36f 238a 	bfc	r3, #10, #1
 80009e2:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART1_REG->CR1.PS = USART1_PARITY_MODE;
 80009e4:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009e6:	68d3      	ldr	r3, [r2, #12]
 80009e8:	f36f 2349 	bfc	r3, #9, #1
 80009ec:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART1_REG->CR1.M = USART1_WORD_LEN;
 80009ee:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009f0:	68d3      	ldr	r3, [r2, #12]
 80009f2:	f36f 330c 	bfc	r3, #12, #1
 80009f6:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART1_REG->CR1.OVER8	= USART1_OVER_SAMPLING;
 80009f8:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <MUSART_voidInit+0x14c>)
 80009fa:	68d3      	ldr	r3, [r2, #12]
 80009fc:	f36f 33cf 	bfc	r3, #15, #1
 8000a00:	60d3      	str	r3, [r2, #12]
#endif

	/***********	USART_2		***********/
#if (USART2_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART2_REG->BRR = USART2_BUAD_RATE;
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a04:	f240 6283 	movw	r2, #1667	; 0x683
 8000a08:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART2_REG->CR2 |= (USART2_STOP_BITS << 12);
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a0c:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART2_REG->CR1.SBK = USART2_SEND_BREAK;
 8000a12:	4a34      	ldr	r2, [pc, #208]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a14:	68d3      	ldr	r3, [r2, #12]
 8000a16:	f36f 0300 	bfc	r3, #0, #1
 8000a1a:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART2_REG->CR1.RE = USART2_RECEIVER;
 8000a1c:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a1e:	68d3      	ldr	r3, [r2, #12]
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART2_REG->CR1.TE = USART2_TRANSMITTER;
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a28:	68d3      	ldr	r3, [r2, #12]
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART2_REG->CR1.RXNEIE = USART2_RX_INT;
 8000a30:	4a2c      	ldr	r2, [pc, #176]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a32:	68d3      	ldr	r3, [r2, #12]
 8000a34:	f36f 1345 	bfc	r3, #5, #1
 8000a38:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART2_REG->CR1.TCIE = USART2_T_COMP_INT;
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a3c:	68d3      	ldr	r3, [r2, #12]
 8000a3e:	f36f 1386 	bfc	r3, #6, #1
 8000a42:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART2_REG->CR1.PCE = USART2_PARITY_ENABLE;
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a46:	68d3      	ldr	r3, [r2, #12]
 8000a48:	f36f 238a 	bfc	r3, #10, #1
 8000a4c:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART2_REG->CR1.PS = USART2_PARITY_MODE;
 8000a4e:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a50:	68d3      	ldr	r3, [r2, #12]
 8000a52:	f36f 2349 	bfc	r3, #9, #1
 8000a56:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART2_REG->CR1.M = USART2_WORD_LEN;
 8000a58:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a5a:	68d3      	ldr	r3, [r2, #12]
 8000a5c:	f36f 330c 	bfc	r3, #12, #1
 8000a60:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART2_REG->CR1.OVER8	= USART2_OVER_SAMPLING;
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MUSART_voidInit+0x150>)
 8000a64:	68d3      	ldr	r3, [r2, #12]
 8000a66:	f36f 33cf 	bfc	r3, #15, #1
 8000a6a:	60d3      	str	r3, [r2, #12]
#endif

	/***********	USART_6		***********/
#if (USART6_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART6_REG->BRR = USART6_BUAD_RATE;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a6e:	f240 6283 	movw	r2, #1667	; 0x683
 8000a72:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART6_REG->CR2 |= (USART6_STOP_BITS << 12);
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART6_REG->CR1.SBK = USART6_SEND_BREAK;
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a7e:	68d3      	ldr	r3, [r2, #12]
 8000a80:	f36f 0300 	bfc	r3, #0, #1
 8000a84:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART6_REG->CR1.RE = USART6_RECEIVER;
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a88:	68d3      	ldr	r3, [r2, #12]
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART6_REG->CR1.TE = USART6_TRANSMITTER;
 8000a90:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a92:	68d3      	ldr	r3, [r2, #12]
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART6_REG->CR1.RXNEIE = USART6_RX_INT;
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000a9c:	68d3      	ldr	r3, [r2, #12]
 8000a9e:	f36f 1345 	bfc	r3, #5, #1
 8000aa2:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART6_REG->CR1.TCIE = USART6_T_COMP_INT;
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000aa6:	68d3      	ldr	r3, [r2, #12]
 8000aa8:	f36f 1386 	bfc	r3, #6, #1
 8000aac:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART6_REG->CR1.PCE = USART6_PARITY_ENABLE;
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000ab0:	68d3      	ldr	r3, [r2, #12]
 8000ab2:	f36f 238a 	bfc	r3, #10, #1
 8000ab6:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART6_REG->CR1.PS = USART6_PARITY_MODE;
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000aba:	68d3      	ldr	r3, [r2, #12]
 8000abc:	f36f 2349 	bfc	r3, #9, #1
 8000ac0:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART6_REG->CR1.M = USART6_WORD_LEN;
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000ac4:	68d3      	ldr	r3, [r2, #12]
 8000ac6:	f36f 330c 	bfc	r3, #12, #1
 8000aca:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART6_REG->CR1.OVER8	= USART6_OVER_SAMPLING;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <MUSART_voidInit+0x154>)
 8000ace:	68d3      	ldr	r3, [r2, #12]
 8000ad0:	f36f 33cf 	bfc	r3, #15, #1
 8000ad4:	60d3      	str	r3, [r2, #12]
#endif
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40011400 	.word	0x40011400

08000aec <MUSART_voidEnable>:

/*******************************************************************************************************/

void MUSART_voidEnable(u8 copy_u8Index){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8Index){
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	d012      	beq.n	8000b22 <MUSART_voidEnable+0x36>
 8000afc:	2b06      	cmp	r3, #6
 8000afe:	dc16      	bgt.n	8000b2e <MUSART_voidEnable+0x42>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d002      	beq.n	8000b0a <MUSART_voidEnable+0x1e>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d006      	beq.n	8000b16 <MUSART_voidEnable+0x2a>
	case 1: USART1_REG -> CR1.UE = 1; break;
	case 2: USART2_REG -> CR1.UE = 1; break;
	case 6: USART6_REG -> CR1.UE = 1; break;
	}
}
 8000b08:	e011      	b.n	8000b2e <MUSART_voidEnable+0x42>
	case 1: USART1_REG -> CR1.UE = 1; break;
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MUSART_voidEnable+0x50>)
 8000b0c:	68d3      	ldr	r3, [r2, #12]
 8000b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b12:	60d3      	str	r3, [r2, #12]
 8000b14:	e00b      	b.n	8000b2e <MUSART_voidEnable+0x42>
	case 2: USART2_REG -> CR1.UE = 1; break;
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <MUSART_voidEnable+0x54>)
 8000b18:	68d3      	ldr	r3, [r2, #12]
 8000b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b1e:	60d3      	str	r3, [r2, #12]
 8000b20:	e005      	b.n	8000b2e <MUSART_voidEnable+0x42>
	case 6: USART6_REG -> CR1.UE = 1; break;
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <MUSART_voidEnable+0x58>)
 8000b24:	68d3      	ldr	r3, [r2, #12]
 8000b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b2a:	60d3      	str	r3, [r2, #12]
 8000b2c:	bf00      	nop
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40011400 	.word	0x40011400

08000b48 <MUSART_u8Send_Byte>:
	case 6: USART6_REG -> CR1.UE = 0; break;
	}
}

/*******************************************************************************************************/
void MUSART_u8Send_Byte(u8 copy_u8Index ,u8 copy_u8Data){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f858 	bl	8000c10 <MUSART_SetUSART>
 8000b60:	60f8      	str	r0, [r7, #12]
	while(0==GET_BIT(_USART_->SR, 7));// wait until transmission complete into the shift register
 8000b62:	bf00      	nop
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f9      	beq.n	8000b64 <MUSART_u8Send_Byte+0x1c>
	_USART_->DR = copy_u8Data;
 8000b70:	79ba      	ldrb	r2, [r7, #6]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	605a      	str	r2, [r3, #4]
	while(0==GET_BIT(_USART_->SR, 6));// wait until transmission of a frame containing data is complete
 8000b76:	bf00      	nop
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f9      	beq.n	8000b78 <MUSART_u8Send_Byte+0x30>
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <MUSART_u8Send_Data>:

/*******************************************************************************************************/
void MUSART_u8Send_Data(u8 copy_u8Index , u8 *copy_u8Data){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	6039      	str	r1, [r7, #0]
 8000b98:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index =0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8000b9e:	e00b      	b.n	8000bb8 <MUSART_u8Send_Data+0x2a>
	{
		MUSART_u8Send_Byte(copy_u8Index,copy_u8Data[Local_u8Index]);
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ffcb 	bl	8000b48 <MUSART_u8Send_Byte>
		Local_u8Index++;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1ed      	bne.n	8000ba0 <MUSART_u8Send_Data+0x12>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <MUSART_u8Receive_Byte>:
/*******************************************************************************************************/
u8 MUSART_u8Receive_Byte(u8 copy_u8Index,u8 *copy_u8Data){
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	6039      	str	r1, [r7, #0]
 8000bd8:	71fb      	strb	r3, [r7, #7]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f817 	bl	8000c10 <MUSART_SetUSART>
 8000be2:	60b8      	str	r0, [r7, #8]
	u8 Statue = Receive;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
	if( GET_BIT( _USART_->SR ,5) == 1 )
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	095b      	lsrs	r3, r3, #5
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d105      	bne.n	8000c02 <MUSART_u8Receive_Byte+0x34>
	{
		*copy_u8Data= _USART_->DR;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e001      	b.n	8000c06 <MUSART_u8Receive_Byte+0x38>
	}
	else
	{
		Statue = NoReceive ;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	}
		return Statue ;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <MUSART_SetUSART>:
	*copy_u8Data= _USART_->DR;
	return *copy_u8Data ;

}
/*******************************************************************************************************/
USART_REG MUSART_SetUSART(u8 copy_u8Index){
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	USART_REG L_handle= (USART_REG) USART1_BASE_ADRESS;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MUSART_SetUSART+0x44>)
 8000c1c:	60fb      	str	r3, [r7, #12]
	switch (copy_u8Index)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d00c      	beq.n	8000c3e <MUSART_SetUSART+0x2e>
 8000c24:	2b06      	cmp	r3, #6
 8000c26:	dc0d      	bgt.n	8000c44 <MUSART_SetUSART+0x34>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d002      	beq.n	8000c32 <MUSART_SetUSART+0x22>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d003      	beq.n	8000c38 <MUSART_SetUSART+0x28>
 8000c30:	e008      	b.n	8000c44 <MUSART_SetUSART+0x34>
	{
	case 1: L_handle =  (USART_REG) USART1_BASE_ADRESS; break;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MUSART_SetUSART+0x44>)
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e005      	b.n	8000c44 <MUSART_SetUSART+0x34>
	case 2: L_handle =  (USART_REG) USART2_BASE_ADRESS; break;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MUSART_SetUSART+0x48>)
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e002      	b.n	8000c44 <MUSART_SetUSART+0x34>
	case 6: L_handle =  (USART_REG) USART6_BASE_ADRESS; break;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MUSART_SetUSART+0x4c>)
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	bf00      	nop
	}
	return L_handle;
 8000c44:	68fb      	ldr	r3, [r7, #12]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40011400 	.word	0x40011400

08000c60 <USART1_IRQHandler>:
}

/*******************************************************************************************************/
/** ISR of USART1 **/
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	USART1_REG->SR = 0 ;	//reset flags
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <USART1_IRQHandler+0x14>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
	USART_USART1Function();
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <USART1_IRQHandler+0x18>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4798      	blx	r3
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40011000 	.word	0x40011000
 8000c78:	2000003c 	.word	0x2000003c

08000c7c <USART2_IRQHandler>:

/** ISR of USART2 **/
void USART2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	USART2_REG->SR = 0 ;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <USART2_IRQHandler+0x14>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
	USART_USART2Function();
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <USART2_IRQHandler+0x18>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4798      	blx	r3
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40004400 	.word	0x40004400
 8000c94:	20000040 	.word	0x20000040

08000c98 <USART6_IRQHandler>:

/** ISR of USART6 **/
void USART6_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	USART6_REG->SR = 0 ;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <USART6_IRQHandler+0x14>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	USART_USART6Function();
 8000ca2:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <USART6_IRQHandler+0x18>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4798      	blx	r3
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40011400 	.word	0x40011400
 8000cb0:	20000044 	.word	0x20000044

08000cb4 <main>:
/* functions deceleration  END */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	/*Initialize System Clock to be 16MHz from HSI*/
	MRCC_voidInitSystemClk();
 8000cba:	f7ff fe0b 	bl	80008d4 <MRCC_voidInitSystemClk>
	/*Initialize  USARTs GPIO clock*/
	MRCC_voidEnablePeripheralClock(AHB1,GPIOA_PORT);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fdb5 	bl	8000830 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1,GPIOC_PORT);
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fdb1 	bl	8000830 <MRCC_voidEnablePeripheralClock>
	/*USART 1 initializing*/								//for Node_1
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART1);
 8000cce:	2104      	movs	r1, #4
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff fdad 	bl	8000830 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_9,  MODE_ALTF);
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	2109      	movs	r1, #9
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fb0a 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_10, MODE_ALTF);
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	210a      	movs	r1, #10
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fb05 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_9,  ALTFN_7);
 8000cea:	2207      	movs	r2, #7
 8000cec:	2109      	movs	r1, #9
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fcba 	bl	8000668 <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_10, ALTFN_7);
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	210a      	movs	r1, #10
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fcb5 	bl	8000668 <MGPIO_voidSetPinAltFn>
	/*USART 2 initializing*/								//for Node_2
	MRCC_voidEnablePeripheralClock(APB1,PERIPHERAL_EN_UART2);
 8000cfe:	2111      	movs	r1, #17
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fd95 	bl	8000830 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_2,  MODE_ALTF);
 8000d06:	2202      	movs	r2, #2
 8000d08:	2102      	movs	r1, #2
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff faf2 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_3,  MODE_ALTF);
 8000d10:	2202      	movs	r2, #2
 8000d12:	2103      	movs	r1, #3
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff faed 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_2,  ALTFN_7);
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fca2 	bl	8000668 <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_3,  ALTFN_7);
 8000d24:	2207      	movs	r2, #7
 8000d26:	2103      	movs	r1, #3
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fc9d 	bl	8000668 <MGPIO_voidSetPinAltFn>
	/*USART 6 initializing*/								//for ESP32
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART6);
 8000d2e:	2105      	movs	r1, #5
 8000d30:	2003      	movs	r0, #3
 8000d32:	f7ff fd7d 	bl	8000830 <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_11,  MODE_ALTF);
 8000d36:	2202      	movs	r2, #2
 8000d38:	210b      	movs	r1, #11
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fada 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_12,  MODE_ALTF);
 8000d40:	2202      	movs	r2, #2
 8000d42:	210c      	movs	r1, #12
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fad5 	bl	80002f4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_11,  ALTFN_8);
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	210b      	movs	r1, #11
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fc8a 	bl	8000668 <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_12,  ALTFN_8);
 8000d54:	2208      	movs	r2, #8
 8000d56:	210c      	movs	r1, #12
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fc85 	bl	8000668 <MGPIO_voidSetPinAltFn>
	/*USARTs initialize and enable*/
	MUSART_voidInit();
 8000d5e:	f7ff fe19 	bl	8000994 <MUSART_voidInit>
	MUSART_voidEnable(USART1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff fec2 	bl	8000aec <MUSART_voidEnable>
	MUSART_voidEnable(USART2);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff febf 	bl	8000aec <MUSART_voidEnable>
	MUSART_voidEnable(USART6);
 8000d6e:	2006      	movs	r0, #6
 8000d70:	f7ff febc 	bl	8000aec <MUSART_voidEnable>
	/*SysTick initialize*/
	MSTK_voidInit();
 8000d74:	f7ff fdca 	bl	800090c <MSTK_voidInit>
	/*Initialize the LEDS*/
	LED_Init(&Led_3);
 8000d78:	4872      	ldr	r0, [pc, #456]	; (8000f44 <main+0x290>)
 8000d7a:	f7ff fa2b 	bl	80001d4 <LED_Init>

	/* begin ---------------------------------------------------------*/
	LED_Off(&Led_3);
 8000d7e:	4871      	ldr	r0, [pc, #452]	; (8000f44 <main+0x290>)
 8000d80:	f7ff fa3a 	bl	80001f8 <LED_Off>
#if	(GW_DEBUGGING == ENABLE)
	MUSART_u8Send_Data(USART6,(u8*)"---GETWAY_READY---");		//---
	MUSART_u8Send_Data(USART6,MUSART_NewLine);				 	//---
#endif
	/*USARTs receive statuses*/
	u8 LOC_u8RecStatus_1 = NoReceive;	//from Node_1
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8RecStatus_2 = NoReceive;	//from Node_2
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8RecStatus_6 = NoReceive;	//from ESP32
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	717b      	strb	r3, [r7, #5]

	while(1)
	{
		LOC_u8RecStatus_1 =MUSART_u8Receive_Byte(USART1,& u8RecBuffer_1); 					    //from Node_1
 8000d90:	496d      	ldr	r1, [pc, #436]	; (8000f48 <main+0x294>)
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff ff1b 	bl	8000bce <MUSART_u8Receive_Byte>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
		LOC_u8RecStatus_2 =MUSART_u8Receive_Byte(USART2,& u8RecBuffer_2); 					    //from Node_2
 8000d9c:	496b      	ldr	r1, [pc, #428]	; (8000f4c <main+0x298>)
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff ff15 	bl	8000bce <MUSART_u8Receive_Byte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71bb      	strb	r3, [r7, #6]
		LOC_u8RecStatus_6 =MUSART_u8Receive_Byte(USART6,& u8RecBuffer_6[u8RecCounter_6]); 	    //from ESP32
 8000da8:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <main+0x29c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <main+0x2a0>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	2006      	movs	r0, #6
 8000db8:	f7ff ff09 	bl	8000bce <MUSART_u8Receive_Byte>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	717b      	strb	r3, [r7, #5]
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 ESP32	-----------------------------------------
		if( LOC_u8RecStatus_6 == Receive )
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d14a      	bne.n	8000e5c <main+0x1a8>
		{
			/*Collecting data in the buffer*/
			if( u8RecBuffer_6[u8RecCounter_6] == '\n' ){
 8000dc6:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <main+0x29c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b61      	ldr	r3, [pc, #388]	; (8000f54 <main+0x2a0>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b0a      	cmp	r3, #10
 8000dd6:	d13a      	bne.n	8000e4e <main+0x19a>
				/*indicate the target node and send the restart order to the app*/
				if( u8FirstLineReq == 1 ){
 8000dd8:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <main+0x2a4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d116      	bne.n	8000e10 <main+0x15c>
					if (u8RecBuffer_6[0]=='1') {
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <main+0x2a0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b31      	cmp	r3, #49	; 0x31
 8000dea:	d106      	bne.n	8000dfa <main+0x146>
#if	(GW_DEBUGGING == ENABLE)
						MUSART_u8Send_Data(USART6,(u8 *)"Start USART 1");	 //---
#endif
						USART=USART1;
 8000dec:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <main+0x2a8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000df2:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <main+0x2a4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e00a      	b.n	8000e10 <main+0x15c>
					}
					else if (u8RecBuffer_6[0]=='2') {
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <main+0x2a0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b32      	cmp	r3, #50	; 0x32
 8000e02:	d105      	bne.n	8000e10 <main+0x15c>
#if	(GW_DEBUGGING == ENABLE)
						MUSART_u8Send_Data(USART6,(u8 *)"Start USART 2");	 //---
#endif
						USART=USART2;
 8000e04:	4b55      	ldr	r3, [pc, #340]	; (8000f5c <main+0x2a8>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	701a      	strb	r2, [r3, #0]
						u8FirstLineReq   = 0 ;
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <main+0x2a4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
					}
					//USART=USART2;
				}
				u8RecBuffer_6[u8RecCounter_6+1]='\0';// for not sending anything from the older data in the buffer
 8000e10:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <main+0x29c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <main+0x2a0>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	54d1      	strb	r1, [r2, r3]
				/*send to the target*/
				if(USART==USART1 || USART==USART2){
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <main+0x2a8>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d004      	beq.n	8000e32 <main+0x17e>
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <main+0x2a8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d106      	bne.n	8000e40 <main+0x18c>
					MUSART_u8Send_Data(USART,u8RecBuffer_6);
 8000e32:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <main+0x2a8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4946      	ldr	r1, [pc, #280]	; (8000f54 <main+0x2a0>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fea7 	bl	8000b8e <MUSART_u8Send_Data>
				}

				Led_Toggle(&Led_3);	//led to visualizes the send process
 8000e40:	4840      	ldr	r0, [pc, #256]	; (8000f44 <main+0x290>)
 8000e42:	f7ff f9eb 	bl	800021c <Led_Toggle>
				/*Set buffer counter to 0 */
				u8RecCounter_6   = 0 ;
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <main+0x29c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e006      	b.n	8000e5c <main+0x1a8>
			}
			else{ u8RecCounter_6++ ; }
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <main+0x29c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <main+0x29c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 Node 1	-----------------------------------------
		if( LOC_u8RecStatus_1 == Receive )
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d134      	bne.n	8000ecc <main+0x218>
		{
			/*Receive the ACK from the BOOTLOADER*/
			if(u8RecBuffer_1=='B'){			//node1 in the BOOTLOADER
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <main+0x294>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b42      	cmp	r3, #66	; 0x42
 8000e6a:	d104      	bne.n	8000e76 <main+0x1c2>
				MUSART_u8Send_Byte(USART6,'B');
 8000e6c:	2142      	movs	r1, #66	; 0x42
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f7ff fe6a 	bl	8000b48 <MUSART_u8Send_Byte>
 8000e74:	e02a      	b.n	8000ecc <main+0x218>
			}
			else if(u8RecBuffer_1=='K'){	//record correct
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <main+0x294>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b4b      	cmp	r3, #75	; 0x4b
 8000e7e:	d104      	bne.n	8000e8a <main+0x1d6>
#if	(GW_IMT_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,(u8 *)"ok");
#else
				MUSART_u8Send_Byte(USART6,'O');
 8000e80:	214f      	movs	r1, #79	; 0x4f
 8000e82:	2006      	movs	r0, #6
 8000e84:	f7ff fe60 	bl	8000b48 <MUSART_u8Send_Byte>
 8000e88:	e020      	b.n	8000ecc <main+0x218>
#endif
			}
			else if (u8RecBuffer_1=='N' ) {	//error in the record
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <main+0x294>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b4e      	cmp	r3, #78	; 0x4e
 8000e92:	d104      	bne.n	8000e9e <main+0x1ea>
				MUSART_u8Send_Byte(USART6,'N');
 8000e94:	214e      	movs	r1, #78	; 0x4e
 8000e96:	2006      	movs	r0, #6
 8000e98:	f7ff fe56 	bl	8000b48 <MUSART_u8Send_Byte>
 8000e9c:	e016      	b.n	8000ecc <main+0x218>
			}
			else if (u8RecBuffer_1=='D') {	//End of hex file
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <main+0x294>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b44      	cmp	r3, #68	; 0x44
 8000ea6:	d106      	bne.n	8000eb6 <main+0x202>
				MUSART_u8Send_Byte(USART6,'D');
 8000ea8:	2144      	movs	r1, #68	; 0x44
 8000eaa:	2006      	movs	r0, #6
 8000eac:	f7ff fe4c 	bl	8000b48 <MUSART_u8Send_Byte>
				Reset_Flags();				//restart & send something to show on the tablet
 8000eb0:	f000 f856 	bl	8000f60 <Reset_Flags>
 8000eb4:	e00a      	b.n	8000ecc <main+0x218>
			}
			else if(u8RecBuffer_1=='F'){
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <main+0x294>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b46      	cmp	r3, #70	; 0x46
 8000ebe:	d105      	bne.n	8000ecc <main+0x218>
				//Bootloader received wrong 3 times ACK for ESP to re download the file or ask the server to fix the problem
				MUSART_u8Send_Byte(USART6,'F');
 8000ec0:	2146      	movs	r1, #70	; 0x46
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fe40 	bl	8000b48 <MUSART_u8Send_Byte>
				Reset_Flags();
 8000ec8:	f000 f84a 	bl	8000f60 <Reset_Flags>
#endif
			}
		}
		//---------------------------------------------------------------------------------------
		//-------------------------------------	 Node 2	-----------------------------------------
		if( LOC_u8RecStatus_2 == Receive )
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	f47f af5e 	bne.w	8000d90 <main+0xdc>
		{
			/*Receive the ACK from the BOOTLOADER*/
			if(u8RecBuffer_2=='B'){			//node2 in the BOOTLOADER
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <main+0x298>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b42      	cmp	r3, #66	; 0x42
 8000edc:	d104      	bne.n	8000ee8 <main+0x234>
				MUSART_u8Send_Byte(USART6,'B');
 8000ede:	2142      	movs	r1, #66	; 0x42
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f7ff fe31 	bl	8000b48 <MUSART_u8Send_Byte>
 8000ee6:	e753      	b.n	8000d90 <main+0xdc>
			}
			else if(u8RecBuffer_2=='K'){	//record correct
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <main+0x298>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b4b      	cmp	r3, #75	; 0x4b
 8000ef0:	d104      	bne.n	8000efc <main+0x248>
#if	(GW_IMT_DEBUGGING == ENABLE)
				MUSART_u8Send_Data(USART6,(u8 *)"ok");
#else
				MUSART_u8Send_Byte(USART6,'O');
 8000ef2:	214f      	movs	r1, #79	; 0x4f
 8000ef4:	2006      	movs	r0, #6
 8000ef6:	f7ff fe27 	bl	8000b48 <MUSART_u8Send_Byte>
 8000efa:	e749      	b.n	8000d90 <main+0xdc>
#endif
			}
			else if (u8RecBuffer_2=='N' ) {	//error in the record
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <main+0x298>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b4e      	cmp	r3, #78	; 0x4e
 8000f04:	d104      	bne.n	8000f10 <main+0x25c>
				MUSART_u8Send_Byte(USART6,'N');
 8000f06:	214e      	movs	r1, #78	; 0x4e
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fe1d 	bl	8000b48 <MUSART_u8Send_Byte>
 8000f0e:	e73f      	b.n	8000d90 <main+0xdc>
			}
			else if (u8RecBuffer_2=='D') {	//End of hex file
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <main+0x298>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b44      	cmp	r3, #68	; 0x44
 8000f18:	d106      	bne.n	8000f28 <main+0x274>
				MUSART_u8Send_Byte(USART6,'D');
 8000f1a:	2144      	movs	r1, #68	; 0x44
 8000f1c:	2006      	movs	r0, #6
 8000f1e:	f7ff fe13 	bl	8000b48 <MUSART_u8Send_Byte>
				Reset_Flags();				//restart send something to show on the LCD
 8000f22:	f000 f81d 	bl	8000f60 <Reset_Flags>
 8000f26:	e733      	b.n	8000d90 <main+0xdc>
			}
			else if(u8RecBuffer_2=='F'){
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <main+0x298>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b46      	cmp	r3, #70	; 0x46
 8000f30:	f47f af2e 	bne.w	8000d90 <main+0xdc>
				//Bootloader received wrong 3 times ACK for ESP to re download the file or ask the server to fix the problem
				MUSART_u8Send_Byte(USART6,'F');
 8000f34:	2146      	movs	r1, #70	; 0x46
 8000f36:	2006      	movs	r0, #6
 8000f38:	f7ff fe06 	bl	8000b48 <MUSART_u8Send_Byte>
				Reset_Flags();
 8000f3c:	f000 f810 	bl	8000f60 <Reset_Flags>
		LOC_u8RecStatus_1 =MUSART_u8Receive_Byte(USART1,& u8RecBuffer_1); 					    //from Node_1
 8000f40:	e726      	b.n	8000d90 <main+0xdc>
 8000f42:	bf00      	nop
 8000f44:	0800103c 	.word	0x0800103c
 8000f48:	20000077 	.word	0x20000077
 8000f4c:	20000078 	.word	0x20000078
 8000f50:	20000075 	.word	0x20000075
 8000f54:	20000048 	.word	0x20000048
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000076 	.word	0x20000076

08000f60 <Reset_Flags>:

/* USER CODE END 0 */
/* Functions ---------------------------------------------------------*/

void Reset_Flags(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	u8FirstLineReq = 1;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <Reset_Flags+0x1c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
	USART=0;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <Reset_Flags+0x20>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	LED_Off(&Led_3);
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <Reset_Flags+0x24>)
 8000f72:	f7ff f941 	bl	80001f8 <LED_Off>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000076 	.word	0x20000076
 8000f84:	0800103c 	.word	0x0800103c

08000f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	; (8000fd4 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb6:	f000 f811 	bl	8000fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fba:	f7ff fe7b 	bl	8000cb4 <main>

08000fbe <LoopForever>:

LoopForever:
  b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   r0, =_estack
 8000fc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fcc:	0800104c 	.word	0x0800104c
  ldr r2, =_sbss
 8000fd0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fd4:	2000007c 	.word	0x2000007c

08000fd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <__libc_init_array>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	4d0d      	ldr	r5, [pc, #52]	; (8001014 <__libc_init_array+0x38>)
 8000fe0:	4c0d      	ldr	r4, [pc, #52]	; (8001018 <__libc_init_array+0x3c>)
 8000fe2:	1b64      	subs	r4, r4, r5
 8000fe4:	10a4      	asrs	r4, r4, #2
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	42a6      	cmp	r6, r4
 8000fea:	d109      	bne.n	8001000 <__libc_init_array+0x24>
 8000fec:	4d0b      	ldr	r5, [pc, #44]	; (800101c <__libc_init_array+0x40>)
 8000fee:	4c0c      	ldr	r4, [pc, #48]	; (8001020 <__libc_init_array+0x44>)
 8000ff0:	f000 f818 	bl	8001024 <_init>
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	42a6      	cmp	r6, r4
 8000ffc:	d105      	bne.n	800100a <__libc_init_array+0x2e>
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	f855 3b04 	ldr.w	r3, [r5], #4
 8001004:	4798      	blx	r3
 8001006:	3601      	adds	r6, #1
 8001008:	e7ee      	b.n	8000fe8 <__libc_init_array+0xc>
 800100a:	f855 3b04 	ldr.w	r3, [r5], #4
 800100e:	4798      	blx	r3
 8001010:	3601      	adds	r6, #1
 8001012:	e7f2      	b.n	8000ffa <__libc_init_array+0x1e>
 8001014:	08001044 	.word	0x08001044
 8001018:	08001044 	.word	0x08001044
 800101c:	08001044 	.word	0x08001044
 8001020:	08001048 	.word	0x08001048

08001024 <_init>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr

08001030 <_fini>:
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	bf00      	nop
 8001034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001036:	bc08      	pop	{r3}
 8001038:	469e      	mov	lr, r3
 800103a:	4770      	bx	lr
