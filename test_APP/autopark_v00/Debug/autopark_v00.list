
autopark_v00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f0  080029f0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080029f0  080029f0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f0  080029f0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080029f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000048  08002a40  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08002a40  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000033ee  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000df3  00000000  00000000  000234a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001dd6  00000000  00000000  0002429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000440  00000000  00000000  00026078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000388  00000000  00000000  000264b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001cb0  00000000  00000000  00026840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002c7c  00000000  00000000  000284f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007586  00000000  00000000  0002b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001078  00000000  00000000  000326f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002974 	.word	0x08002974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	08002974 	.word	0x08002974

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <LED_Init>:
/* 1- Function Description -> Function Set The Mode Of Pin Output Take led structure                   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Init(const LedX_t *LED){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	MGPIO_voidSetPinMode(LED->LED_port,LED->LED_Pin,MODE_OUTPUT);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f000 f9d0 	bl	8000e40 <MGPIO_voidSetPinMode>

}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <LED_On>:
/* 1- Function Description -> Function turn on the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_On(const LedX_t *LED){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,HIGH);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f000 fa36 	bl	8000f30 <MGPIO_voidWriteData>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LED_Off>:
/* 1- Function Description -> Function turn off the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Off(const LedX_t *LED){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,LOW);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b2d8      	uxtb	r0, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f000 fa24 	bl	8000f30 <MGPIO_voidWriteData>

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Led_Toggle>:
/* 1- Function Description -> Function toggle the led condition      								   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void Led_Toggle	(const LedX_t *LED){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	MGPIO_voidToggleData(LED->LED_port,LED->LED_Pin);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	4610      	mov	r0, r2
 8000b08:	f000 fae4 	bl	80010d4 <MGPIO_voidToggleData>

}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_MOTOR_Init>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_Init(const MotorX_t *Motor){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	MRCC_voidEnablePeripheralClock(AHB1_BUS, Motor->Motor_Port_1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fcf9 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, Motor->Motor_Port_2);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4619      	mov	r1, r3
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fcf2 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode(Motor->Motor_Port_1,Motor->Motor_Pin_1, MODE_OUTPUT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b2d8      	uxtb	r0, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	f000 f97a 	bl	8000e40 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(Motor->Motor_Port_2,Motor->Motor_Pin_2, MODE_OUTPUT);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f000 f970 	bl	8000e40 <MGPIO_voidSetPinMode>

	if(Motor->Motor_Timer==TIMER4){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d10a      	bne.n	8000b7e <HAL_MOTOR_Init+0x6a>
		MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOB);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fcd6 	bl	800151c <MRCC_voidEnablePeripheralClock>
		MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM4) ;
 8000b70:	2102      	movs	r1, #2
 8000b72:	2002      	movs	r0, #2
 8000b74:	f000 fcd2 	bl	800151c <MRCC_voidEnablePeripheralClock>
		MTIMER_vStartTime(TIMER4);
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f000 fe19 	bl	80017b0 <MTIMER_vStartTime>
	}
	else{
		//
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_MOTOR_MOVE>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_MOVE(const MotorX_t *Motor ,u8 DIRCTION ,u8 SPEED){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
 8000b92:	4613      	mov	r3, r2
 8000b94:	70bb      	strb	r3, [r7, #2]

	switch(DIRCTION){
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d030      	beq.n	8000bfe <HAL_MOTOR_MOVE+0x78>
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	dc43      	bgt.n	8000c28 <HAL_MOTOR_MOVE+0xa2>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_MOTOR_MOVE+0x24>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d015      	beq.n	8000bd4 <HAL_MOTOR_MOVE+0x4e>
 8000ba8:	e03e      	b.n	8000c28 <HAL_MOTOR_MOVE+0xa2>
	case BACKWARD :
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, HIGH);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b2d8      	uxtb	r0, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f000 f9b9 	bl	8000f30 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	b2d8      	uxtb	r0, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f000 f9af 	bl	8000f30 <MGPIO_voidWriteData>
		break;
 8000bd2:	e029      	b.n	8000c28 <HAL_MOTOR_MOVE+0xa2>
	case FORWARD:
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 f9a4 	bl	8000f30 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, HIGH);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	b2d8      	uxtb	r0, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f000 f99a 	bl	8000f30 <MGPIO_voidWriteData>
		break;
 8000bfc:	e014      	b.n	8000c28 <HAL_MOTOR_MOVE+0xa2>
	case STOP:
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b2d8      	uxtb	r0, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f000 f98f 	bl	8000f30 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	b2d8      	uxtb	r0, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	f000 f985 	bl	8000f30 <MGPIO_voidWriteData>
		break;
 8000c26:	bf00      	nop
	}

	MTIMER_vPWM(Motor->Motor_Timer, Motor->Motor_Chanel, 100, SPEED);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	b2d8      	uxtb	r0, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	78bb      	ldrb	r3, [r7, #2]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	f000 fddd 	bl	80017f8 <MTIMER_vPWM>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_MOTOR_STOP>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_STOP(const MotorX_t *Motor){
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b2d8      	uxtb	r0, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f000 f967 	bl	8000f30 <MGPIO_voidWriteData>
	MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	b2d8      	uxtb	r0, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f000 f95d 	bl	8000f30 <MGPIO_voidWriteData>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HULTRA_vInitialize>:
// Array to store information for multiple Ultrasonic Sensors
LOC_ULTRA_NUM ULTRA_STRUCT[TOT_ULTRA_SONIC_NUM];


void HULTRA_vInitialize(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM, Enum_TIMER_NUM Copy_u8TimerNum, u8 Copy_u8ChannelNum)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
    // Initialize the Input Capture Unit (ICU) of the specified timer and channel
    MTIMER_vICU(Copy_u8TimerNum, Copy_u8ChannelNum);
 8000c92:	797a      	ldrb	r2, [r7, #5]
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 ff0f 	bl	8001abc <MTIMER_vICU>

    // Store the timer number and channel number in the ultrasonic sensor structure
    ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER = Copy_u8TimerNum;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4906      	ldr	r1, [pc, #24]	; (8000cbc <HULTRA_vInitialize+0x3c>)
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS = Copy_u8ChannelNum;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HULTRA_vInitialize+0x3c>)
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	797a      	ldrb	r2, [r7, #5]
 8000cb2:	705a      	strb	r2, [r3, #1]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000064 	.word	0x20000064

08000cc0 <HULTRA_vSendTrigger>:


void HULTRA_vSendTrigger(const UltraSX_t *UltraS_t) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	// Set the ultrasonic sensor trigger pin as OUTPUT
	MGPIO_voidSetPinMode(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, MODE_OUTPUT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	b2d8      	uxtb	r0, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f000 f8b2 	bl	8000e40 <MGPIO_voidSetPinMode>

	// Raise the ultrasonic sensor trigger pin to HIGH for a short duration
	MGPIO_vDirectSetReset(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, HIGH);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f000 fa62 	bl	80011b4 <MGPIO_vDirectSetReset>
	_delay_us(10);  // Wait for "Trigger_Pulse_Width" milliseconds
 8000cf0:	200a      	movs	r0, #10
 8000cf2:	f000 fcef 	bl	80016d4 <_delay_us>

	// Bring the ultrasonic sensor trigger pin back to LOW
	MGPIO_vDirectSetReset(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, LOW);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b2d8      	uxtb	r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	f000 fa55 	bl	80011b4 <MGPIO_vDirectSetReset>
	//_delay_us(250);//
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	0000      	movs	r0, r0
 8000d14:	0000      	movs	r0, r0
	...

08000d18 <HULTRA_vGetDistance>:


void HULTRA_vGetDistance(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM,f64* Copy_f64Distance) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
	// Calculate distance based on timer values and assume speed of sound is 343 meters per second
	*Copy_f64Distance = ((f64)MTIMER_GET_ICU(ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER, ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS) / 2) * 3.43;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HULTRA_vGetDistance+0x70>)
 8000d28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4916      	ldr	r1, [pc, #88]	; (8000d88 <HULTRA_vGetDistance+0x70>)
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	440b      	add	r3, r1
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f001 f87f 	bl	8001e3c <MTIMER_GET_ICU>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fb8b 	bl	800045c <__aeabi_ui2d>
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4e:	f7ff fd29 	bl	80007a4 <__aeabi_ddiv>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	a309      	add	r3, pc, #36	; (adr r3, 8000d80 <HULTRA_vGetDistance+0x68>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fbf6 	bl	8000550 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	6839      	ldr	r1, [r7, #0]
 8000d6a:	e9c1 2300 	strd	r2, r3, [r1]
	_delay_ms(50);
 8000d6e:	2032      	movs	r0, #50	; 0x32
 8000d70:	f000 fc94 	bl	800169c <_delay_ms>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	f3af 8000 	nop.w
 8000d80:	d70a3d71 	.word	0xd70a3d71
 8000d84:	400b70a3 	.word	0x400b70a3
 8000d88:	20000064 	.word	0x20000064

08000d8c <EXTI0_IRQHandler>:

}
/*******************************************************************************************************/

void EXTI0_IRQHandler(void)								
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <EXTI0_IRQHandler+0x1c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_0 );					// With Out That It Will Do INT Alaways
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <EXTI0_IRQHandler+0x20>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <EXTI0_IRQHandler+0x20>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6153      	str	r3, [r2, #20]
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000070 	.word	0x20000070
 8000dac:	40013c00 	.word	0x40013c00

08000db0 <EXTI1_IRQHandler>:

/*******************************************************************************************************/
void EXTI1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <EXTI1_IRQHandler+0x1c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_1 );					// With Out That It Will Do INT Alaways
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <EXTI1_IRQHandler+0x20>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <EXTI1_IRQHandler+0x20>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6153      	str	r3, [r2, #20]
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000074 	.word	0x20000074
 8000dd0:	40013c00 	.word	0x40013c00

08000dd4 <EXTI2_IRQHandler>:

/*******************************************************************************************************/
void EXTI2_IRQHandler(void)								
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	EXTI2_CallBack();
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <EXTI2_IRQHandler+0x1c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_2 );					// With Out That It Will Do INT Alaways
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <EXTI2_IRQHandler+0x20>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <EXTI2_IRQHandler+0x20>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6153      	str	r3, [r2, #20]
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000078 	.word	0x20000078
 8000df4:	40013c00 	.word	0x40013c00

08000df8 <EXTI3_IRQHandler>:

/*******************************************************************************************************/
void EXTI3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	EXTI3_CallBack();
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <EXTI3_IRQHandler+0x1c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_3 );					// With Out That It Will Do INT Alaways
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <EXTI3_IRQHandler+0x20>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <EXTI3_IRQHandler+0x20>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6153      	str	r3, [r2, #20]
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000007c 	.word	0x2000007c
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <EXTI4_IRQHandler>:

/*******************************************************************************************************/
void EXTI4_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	EXTI4_CallBack();
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <EXTI4_IRQHandler+0x1c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_4 );					// With Out That It Will Do INT Alaways
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <EXTI4_IRQHandler+0x20>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <EXTI4_IRQHandler+0x20>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6153      	str	r3, [r2, #20]
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <MGPIO_voidSetPinMode>:
#include "MGPIO_interface.h"
#include "MGPIO_config.h"
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/
void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	71bb      	strb	r3, [r7, #6]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d857      	bhi.n	8000f08 <MGPIO_voidSetPinMode+0xc8>
 8000e58:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <MGPIO_voidSetPinMode+0x20>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e91 	.word	0x08000e91
 8000e68:	08000ea9 	.word	0x08000ea9
 8000e6c:	08000ec1 	.word	0x08000ec1
 8000e70:	08000ed9 	.word	0x08000ed9
 8000e74:	08000ef1 	.word	0x08000ef1
	{
	  case GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MGPIO_voidSetPinMode+0xd8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	7979      	ldrb	r1, [r7, #5]
 8000e7e:	79ba      	ldrb	r2, [r7, #6]
 8000e80:	0052      	lsls	r2, r2, #1
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	4611      	mov	r1, r2
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MGPIO_voidSetPinMode+0xd8>)
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e03c      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  case GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MGPIO_voidSetPinMode+0xdc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	7979      	ldrb	r1, [r7, #5]
 8000e96:	79ba      	ldrb	r2, [r7, #6]
 8000e98:	0052      	lsls	r2, r2, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <MGPIO_voidSetPinMode+0xdc>)
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e030      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  case GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MGPIO_voidSetPinMode+0xe0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	7979      	ldrb	r1, [r7, #5]
 8000eae:	79ba      	ldrb	r2, [r7, #6]
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <MGPIO_voidSetPinMode+0xe0>)
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e024      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  case GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MGPIO_voidSetPinMode+0xe4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	7979      	ldrb	r1, [r7, #5]
 8000ec6:	79ba      	ldrb	r2, [r7, #6]
 8000ec8:	0052      	lsls	r2, r2, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <MGPIO_voidSetPinMode+0xe4>)
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e018      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  case GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MGPIO_voidSetPinMode+0xe8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	7979      	ldrb	r1, [r7, #5]
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <MGPIO_voidSetPinMode+0xe8>)
 8000eea:	430b      	orrs	r3, r1
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00c      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  case GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MGPIO_voidSetPinMode+0xec>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	7979      	ldrb	r1, [r7, #5]
 8000ef6:	79ba      	ldrb	r2, [r7, #6]
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <MGPIO_voidSetPinMode+0xec>)
 8000f02:	430b      	orrs	r3, r1
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e000      	b.n	8000f0a <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 8000f08:	bf00      	nop
    }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021c00 	.word	0x40021c00

08000f30 <MGPIO_voidWriteData>:
	return L_u8Data;
	
}
/*******************************************************************************************************/
void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]

	if(Copy_u8State==HIGH)
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d155      	bne.n	8000ff4 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	f200 80ac 	bhi.w	80010a8 <MGPIO_voidWriteData+0x178>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <MGPIO_voidWriteData+0x28>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f71 	.word	0x08000f71
 8000f5c:	08000f87 	.word	0x08000f87
 8000f60:	08000f9d 	.word	0x08000f9d
 8000f64:	08000fb3 	.word	0x08000fb3
 8000f68:	08000fc9 	.word	0x08000fc9
 8000f6c:	08000fdf 	.word	0x08000fdf
		{
		case GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <MGPIO_voidWriteData+0x18c>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <MGPIO_voidWriteData+0x18c>)
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6153      	str	r3, [r2, #20]
 8000f84:	e093      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8000f86:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <MGPIO_voidWriteData+0x190>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <MGPIO_voidWriteData+0x190>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	e088      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  SET_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <MGPIO_voidWriteData+0x194>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	79ba      	ldrb	r2, [r7, #6]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4a46      	ldr	r2, [pc, #280]	; (80010c4 <MGPIO_voidWriteData+0x194>)
 8000fac:	430b      	orrs	r3, r1
 8000fae:	6153      	str	r3, [r2, #20]
 8000fb0:	e07d      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8000fb2:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <MGPIO_voidWriteData+0x198>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <MGPIO_voidWriteData+0x198>)
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	e072      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <MGPIO_voidWriteData+0x19c>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	79ba      	ldrb	r2, [r7, #6]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <MGPIO_voidWriteData+0x19c>)
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6153      	str	r3, [r2, #20]
 8000fdc:	e067      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MGPIO_voidWriteData+0x1a0>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	79ba      	ldrb	r2, [r7, #6]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	4611      	mov	r1, r2
 8000fec:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <MGPIO_voidWriteData+0x1a0>)
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	e05c      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d858      	bhi.n	80010ac <MGPIO_voidWriteData+0x17c>
 8000ffa:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <MGPIO_voidWriteData+0xd0>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001019 	.word	0x08001019
 8001004:	08001031 	.word	0x08001031
 8001008:	08001049 	.word	0x08001049
 800100c:	08001061 	.word	0x08001061
 8001010:	08001079 	.word	0x08001079
 8001014:	08001091 	.word	0x08001091
		{
		case GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MGPIO_voidWriteData+0x18c>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	79ba      	ldrb	r2, [r7, #6]
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	43d2      	mvns	r2, r2
 8001026:	4611      	mov	r1, r2
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <MGPIO_voidWriteData+0x18c>)
 800102a:	400b      	ands	r3, r1
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	e03e      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MGPIO_voidWriteData+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	43d2      	mvns	r2, r2
 800103e:	4611      	mov	r1, r2
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <MGPIO_voidWriteData+0x190>)
 8001042:	400b      	ands	r3, r1
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	e032      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MGPIO_voidWriteData+0x194>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	43d2      	mvns	r2, r2
 8001056:	4611      	mov	r1, r2
 8001058:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <MGPIO_voidWriteData+0x194>)
 800105a:	400b      	ands	r3, r1
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	e026      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MGPIO_voidWriteData+0x198>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	43d2      	mvns	r2, r2
 800106e:	4611      	mov	r1, r2
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MGPIO_voidWriteData+0x198>)
 8001072:	400b      	ands	r3, r1
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	e01a      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MGPIO_voidWriteData+0x19c>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	43d2      	mvns	r2, r2
 8001086:	4611      	mov	r1, r2
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <MGPIO_voidWriteData+0x19c>)
 800108a:	400b      	ands	r3, r1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	e00e      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MGPIO_voidWriteData+0x1a0>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	43d2      	mvns	r2, r2
 800109e:	4611      	mov	r1, r2
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <MGPIO_voidWriteData+0x1a0>)
 80010a2:	400b      	ands	r3, r1
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	e002      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 80010ac:	bf00      	nop
		}
	}
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021c00 	.word	0x40021c00

080010d4 <MGPIO_voidToggleData>:
/*******************************************************************************************************/
void MGPIO_voidToggleData(u8 Copy_u8PortName ,u8 Copy_u8PinNum)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8PortName)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d850      	bhi.n	800118c <MGPIO_voidToggleData+0xb8>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <MGPIO_voidToggleData+0x1c>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001109 	.word	0x08001109
 80010f4:	0800111f 	.word	0x0800111f
 80010f8:	08001135 	.word	0x08001135
 80010fc:	0800114b 	.word	0x0800114b
 8001100:	08001161 	.word	0x08001161
 8001104:	08001177 	.word	0x08001177
		{
		case GPIOA_PORT :  TOG_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <MGPIO_voidToggleData+0xc8>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	79ba      	ldrb	r2, [r7, #6]
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4611      	mov	r1, r2
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <MGPIO_voidToggleData+0xc8>)
 8001118:	404b      	eors	r3, r1
 800111a:	6153      	str	r3, [r2, #20]
 800111c:	e037      	b.n	800118e <MGPIO_voidToggleData+0xba>

		case GPIOB_PORT :  TOG_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MGPIO_voidToggleData+0xcc>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	79ba      	ldrb	r2, [r7, #6]
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4611      	mov	r1, r2
 800112c:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <MGPIO_voidToggleData+0xcc>)
 800112e:	404b      	eors	r3, r1
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	e02c      	b.n	800118e <MGPIO_voidToggleData+0xba>

		case GPIOC_PORT :  TOG_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MGPIO_voidToggleData+0xd0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	4611      	mov	r1, r2
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MGPIO_voidToggleData+0xd0>)
 8001144:	404b      	eors	r3, r1
 8001146:	6153      	str	r3, [r2, #20]
 8001148:	e021      	b.n	800118e <MGPIO_voidToggleData+0xba>

		case GPIOD_PORT :  TOG_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MGPIO_voidToggleData+0xd4>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4611      	mov	r1, r2
 8001158:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MGPIO_voidToggleData+0xd4>)
 800115a:	404b      	eors	r3, r1
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	e016      	b.n	800118e <MGPIO_voidToggleData+0xba>

		case GPIOE_PORT :  TOG_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MGPIO_voidToggleData+0xd8>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	79ba      	ldrb	r2, [r7, #6]
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	4611      	mov	r1, r2
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <MGPIO_voidToggleData+0xd8>)
 8001170:	404b      	eors	r3, r1
 8001172:	6153      	str	r3, [r2, #20]
 8001174:	e00b      	b.n	800118e <MGPIO_voidToggleData+0xba>

		case GPIOH_PORT :  TOG_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MGPIO_voidToggleData+0xdc>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4611      	mov	r1, r2
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <MGPIO_voidToggleData+0xdc>)
 8001186:	404b      	eors	r3, r1
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	e000      	b.n	800118e <MGPIO_voidToggleData+0xba>

		default : /*ERROR*/ break ;
 800118c:	bf00      	nop
		}

}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021c00 	.word	0x40021c00

080011b4 <MGPIO_vDirectSetReset>:
	
}

/*******************************************************************************************************/
void MGPIO_vDirectSetReset(u8 Copy_u8PortName , u8 Copy_u8PinNum, u8 Copy_u8State)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State == HIGH)
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d13b      	bne.n	8001244 <MGPIO_vDirectSetReset+0x90>
	{
		switch (Copy_u8PortName)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d878      	bhi.n	80012c4 <MGPIO_vDirectSetReset+0x110>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <MGPIO_vDirectSetReset+0x24>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011f1 	.word	0x080011f1
 80011dc:	080011ff 	.word	0x080011ff
 80011e0:	0800120d 	.word	0x0800120d
 80011e4:	0800121b 	.word	0x0800121b
 80011e8:	08001229 	.word	0x08001229
 80011ec:	08001237 	.word	0x08001237
		{
			case GPIOA_PORT: MGPIOA->BSRR = (1U<<Copy_u8PinNum); break;
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <MGPIO_vDirectSetReset+0x11c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	e062      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOB_PORT: MGPIOB->BSRR = (1U<<Copy_u8PinNum); break;
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <MGPIO_vDirectSetReset+0x120>)
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	e05b      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOC_PORT: MGPIOC->BSRR = (1U<<Copy_u8PinNum); break;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <MGPIO_vDirectSetReset+0x124>)
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	e054      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOD_PORT: MGPIOD->BSRR = (1U<<Copy_u8PinNum); break;
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <MGPIO_vDirectSetReset+0x128>)
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	e04d      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOE_PORT: MGPIOE->BSRR = (1U<<Copy_u8PinNum); break;
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <MGPIO_vDirectSetReset+0x12c>)
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	e046      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOH_PORT: MGPIOH->BSRR = (1U<<Copy_u8PinNum); break;
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <MGPIO_vDirectSetReset+0x130>)
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	e03f      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
		}
	}
	else
	{
		Copy_u8PinNum += 16;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	3310      	adds	r3, #16
 8001248:	71bb      	strb	r3, [r7, #6]
		switch (Copy_u8PortName)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d839      	bhi.n	80012c4 <MGPIO_vDirectSetReset+0x110>
 8001250:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <MGPIO_vDirectSetReset+0xa4>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001271 	.word	0x08001271
 800125c:	0800127f 	.word	0x0800127f
 8001260:	0800128d 	.word	0x0800128d
 8001264:	0800129b 	.word	0x0800129b
 8001268:	080012a9 	.word	0x080012a9
 800126c:	080012b7 	.word	0x080012b7
		{
			case GPIOA_PORT: MGPIOA->BSRR = (1U<<Copy_u8PinNum); break;
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MGPIO_vDirectSetReset+0x11c>)
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	e022      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOB_PORT: MGPIOB->BSRR = (1U<<Copy_u8PinNum); break;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <MGPIO_vDirectSetReset+0x120>)
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	e01b      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOC_PORT: MGPIOC->BSRR = (1U<<Copy_u8PinNum); break;
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MGPIO_vDirectSetReset+0x124>)
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	e014      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOD_PORT: MGPIOD->BSRR = (1U<<Copy_u8PinNum); break;
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MGPIO_vDirectSetReset+0x128>)
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	e00d      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOE_PORT: MGPIOE->BSRR = (1U<<Copy_u8PinNum); break;
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <MGPIO_vDirectSetReset+0x12c>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	e006      	b.n	80012c4 <MGPIO_vDirectSetReset+0x110>
			case GPIOH_PORT: MGPIOH->BSRR = (1U<<Copy_u8PinNum); break;
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <MGPIO_vDirectSetReset+0x130>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	bf00      	nop
		}
	}
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40021c00 	.word	0x40021c00

080012e8 <MGPIO_voidSetPinAltFn>:
/*******************************************************************************************************/
void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d85b      	bhi.n	80013b8 <MGPIO_voidSetPinAltFn+0xd0>
	{
		/* Alf pins 0:7 */
		switch(Copy_u8PortNum )
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b05      	cmp	r3, #5
 8001304:	f200 80be 	bhi.w	8001484 <MGPIO_voidSetPinAltFn+0x19c>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <MGPIO_voidSetPinAltFn+0x28>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001329 	.word	0x08001329
 8001314:	08001341 	.word	0x08001341
 8001318:	08001359 	.word	0x08001359
 800131c:	08001371 	.word	0x08001371
 8001320:	08001389 	.word	0x08001389
 8001324:	080013a1 	.word	0x080013a1
		{
			 case GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001328:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <MGPIO_voidSetPinAltFn+0x1b0>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	7979      	ldrb	r1, [r7, #5]
 800132e:	79ba      	ldrb	r2, [r7, #6]
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	fa01 f202 	lsl.w	r2, r1, r2
 8001336:	4611      	mov	r1, r2
 8001338:	4a57      	ldr	r2, [pc, #348]	; (8001498 <MGPIO_voidSetPinAltFn+0x1b0>)
 800133a:	430b      	orrs	r3, r1
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	e0a4      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <MGPIO_voidSetPinAltFn+0x1b4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	7979      	ldrb	r1, [r7, #5]
 8001346:	79ba      	ldrb	r2, [r7, #6]
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	4611      	mov	r1, r2
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <MGPIO_voidSetPinAltFn+0x1b4>)
 8001352:	430b      	orrs	r3, r1
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	e098      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <MGPIO_voidSetPinAltFn+0x1b8>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	7979      	ldrb	r1, [r7, #5]
 800135e:	79ba      	ldrb	r2, [r7, #6]
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <MGPIO_voidSetPinAltFn+0x1b8>)
 800136a:	430b      	orrs	r3, r1
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	e08c      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	7979      	ldrb	r1, [r7, #5]
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001382:	430b      	orrs	r3, r1
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	e080      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <MGPIO_voidSetPinAltFn+0x1c0>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	7979      	ldrb	r1, [r7, #5]
 800138e:	79ba      	ldrb	r2, [r7, #6]
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	4611      	mov	r1, r2
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <MGPIO_voidSetPinAltFn+0x1c0>)
 800139a:	430b      	orrs	r3, r1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	e074      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <MGPIO_voidSetPinAltFn+0x1c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	7979      	ldrb	r1, [r7, #5]
 80013a6:	79ba      	ldrb	r2, [r7, #6]
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <MGPIO_voidSetPinAltFn+0x1c4>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e068      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
		
	}
	/* Alf pins 8:15 */
	else
	{
	switch(Copy_u8PortNum )
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d864      	bhi.n	8001488 <MGPIO_voidSetPinAltFn+0x1a0>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <MGPIO_voidSetPinAltFn+0xdc>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	080013f9 	.word	0x080013f9
 80013cc:	08001415 	.word	0x08001415
 80013d0:	08001431 	.word	0x08001431
 80013d4:	0800144d 	.word	0x0800144d
 80013d8:	08001469 	.word	0x08001469
		{
			 case GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MGPIO_voidSetPinAltFn+0x1b0>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	7979      	ldrb	r1, [r7, #5]
 80013e2:	79ba      	ldrb	r2, [r7, #6]
 80013e4:	f002 0207 	and.w	r2, r2, #7
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	fa01 f202 	lsl.w	r2, r1, r2
 80013ee:	4611      	mov	r1, r2
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <MGPIO_voidSetPinAltFn+0x1b0>)
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6253      	str	r3, [r2, #36]	; 0x24
 80013f6:	e048      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <MGPIO_voidSetPinAltFn+0x1b4>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	7979      	ldrb	r1, [r7, #5]
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	f002 0207 	and.w	r2, r2, #7
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4611      	mov	r1, r2
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <MGPIO_voidSetPinAltFn+0x1b4>)
 800140e:	430b      	orrs	r3, r1
 8001410:	6253      	str	r3, [r2, #36]	; 0x24
 8001412:	e03a      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MGPIO_voidSetPinAltFn+0x1b8>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	7979      	ldrb	r1, [r7, #5]
 800141a:	79ba      	ldrb	r2, [r7, #6]
 800141c:	f002 0207 	and.w	r2, r2, #7
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <MGPIO_voidSetPinAltFn+0x1b8>)
 800142a:	430b      	orrs	r3, r1
 800142c:	6253      	str	r3, [r2, #36]	; 0x24
 800142e:	e02c      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	7979      	ldrb	r1, [r7, #5]
 8001436:	79ba      	ldrb	r2, [r7, #6]
 8001438:	f002 0207 	and.w	r2, r2, #7
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001446:	430b      	orrs	r3, r1
 8001448:	6253      	str	r3, [r2, #36]	; 0x24
 800144a:	e01e      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MGPIO_voidSetPinAltFn+0x1c0>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	7979      	ldrb	r1, [r7, #5]
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	f002 0207 	and.w	r2, r2, #7
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	4611      	mov	r1, r2
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <MGPIO_voidSetPinAltFn+0x1c0>)
 8001462:	430b      	orrs	r3, r1
 8001464:	6253      	str	r3, [r2, #36]	; 0x24
 8001466:	e010      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MGPIO_voidSetPinAltFn+0x1c4>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	7979      	ldrb	r1, [r7, #5]
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	f002 0207 	and.w	r2, r2, #7
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	fa01 f202 	lsl.w	r2, r1, r2
 800147a:	4611      	mov	r1, r2
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <MGPIO_voidSetPinAltFn+0x1c4>)
 800147e:	430b      	orrs	r3, r1
 8001480:	6253      	str	r3, [r2, #36]	; 0x24
 8001482:	e002      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001488:	bf00      	nop
		
		
	}

	
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021c00 	.word	0x40021c00

080014b0 <MNVIC_voidEnableInterrupt>:
/*******************************************************************************************************/
/*
* Function: Set The enable for any Peripheral
* Range :	Copy_u8PeripheralID -> 84 "Refer to data sheet" */
/*******************************************************************************************************/
void MNVIC_voidEnableInterrupt(u8 Copy_u8PeripheralID){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	NVIC_REG->ISER[Copy_u8PeripheralID / Reg_div] = (1U << Copy_u8PeripheralID % Reg_div);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <MNVIC_voidEnableInterrupt+0x30>)
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	0952      	lsrs	r2, r2, #5
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	4610      	mov	r0, r2
 80014ca:	2201      	movs	r2, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <MNVIC_voidDisableInterrupt>:
/*******************************************************************************************************/
/*
* Function: Set The enable for any Peripheral
* Range :	Copy_u8PeripheralID -> 84 "Refer to data sheet" */
/*******************************************************************************************************/
void MNVIC_voidDisableInterrupt(u8 Copy_u8PeripheralID){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	NVIC_REG->ICER[Copy_u8PeripheralID / Reg_div] = (1U << Copy_u8PeripheralID % Reg_div);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	4908      	ldr	r1, [pc, #32]	; (8001518 <MNVIC_voidDisableInterrupt+0x34>)
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	0952      	lsrs	r2, r2, #5
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4610      	mov	r0, r2
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	f100 0320 	add.w	r3, r0, #32
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <MRCC_voidEnablePeripheralClock>:
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/

void MRCC_voidEnablePeripheralClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d836      	bhi.n	80015a0 <MRCC_voidEnablePeripheralClock+0x84>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <MRCC_voidEnablePeripheralClock+0x1c>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001549 	.word	0x08001549
 800153c:	0800155f 	.word	0x0800155f
 8001540:	08001575 	.word	0x08001575
 8001544:	0800158b 	.word	0x0800158b
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MRCC_voidEnablePeripheralClock+0x94>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	79ba      	ldrb	r2, [r7, #6]
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <MRCC_voidEnablePeripheralClock+0x94>)
 8001558:	430b      	orrs	r3, r1
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e021      	b.n	80015a2 <MRCC_voidEnablePeripheralClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MRCC_voidEnablePeripheralClock+0x98>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	79ba      	ldrb	r2, [r7, #6]
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4611      	mov	r1, r2
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <MRCC_voidEnablePeripheralClock+0x98>)
 800156e:	430b      	orrs	r3, r1
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e016      	b.n	80015a2 <MRCC_voidEnablePeripheralClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MRCC_voidEnablePeripheralClock+0x9c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	4611      	mov	r1, r2
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <MRCC_voidEnablePeripheralClock+0x9c>)
 8001584:	430b      	orrs	r3, r1
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e00b      	b.n	80015a2 <MRCC_voidEnablePeripheralClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MRCC_voidEnablePeripheralClock+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	4611      	mov	r1, r2
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <MRCC_voidEnablePeripheralClock+0xa0>)
 800159a:	430b      	orrs	r3, r1
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e000      	b.n	80015a2 <MRCC_voidEnablePeripheralClock+0x86>
		default :     /*   ERROR   */          break ;
 80015a0:	bf00      	nop
		
	}
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023830 	.word	0x40023830
 80015b4:	40023834 	.word	0x40023834
 80015b8:	40023840 	.word	0x40023840
 80015bc:	40023844 	.word	0x40023844

080015c0 <MRCC_voidInitSystemClk>:
	
}
/*******************************************************************************************************/

void MRCC_voidInitSystemClk(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	/********** HSI **********/
#if CLKSRC == HSI 
	/* 1- EN HSI */
	SET_BIT(MRCC->CR , 0U);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]
	/* 2- CLK SYS --> HSI */
	CLR_BIT(MRCC->CFGR, 0U);
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6093      	str	r3, [r2, #8]
	CLR_BIT(MRCC->CFGR, 1U);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <MRCC_voidInitSystemClk+0x34>)
 80015e2:	f023 0302 	bic.w	r3, r3, #2
 80015e6:	6093      	str	r3, [r2, #8]
/****************************************************/

#else 
/* Error*/
#endif // The End Of Big IF	
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <MSTK_voidInit>:
static void (* MSTK_CallBack) (void) = NULL;
static u8	MSTK_u8ModeOfInterval;

/*******************************************************************************************************/
/*                                      01- MSTK_voidInit                                              */
void MSTK_voidInit( void ){
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

	#if CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB
	SET_BIT(MSTK->CTRL , CLKSOURCE);
	#elif CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB_DIV8
	CLR_BIT(MSTK->CTRL , CLKSOURCE);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <MSTK_voidInit+0x1c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <MSTK_voidInit+0x1c>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6013      	str	r3, [r2, #0]
	#endif
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <MSTK_voidStart>:

/*******************************************************************************************************/
/*                                      02- MSTK_voidStart                                              */
void MSTK_voidStart( u32 Copy_PreloadValue ){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue;
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MSTK_voidStart+0x54>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6053      	str	r3, [r2, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MSTK_voidStart+0x54>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
	/* Enable Systick    */
	SET_BIT( MSTK->CTRL , 0 );
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MSTK_voidStart+0x54>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <MSTK_voidStart+0x54>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]
	/*  POLL On the Counter Flag */
	while(GET_BIT( MSTK->CTRL , COUNTFLAG ) == 0);
 8001638:	bf00      	nop
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MSTK_voidStart+0x54>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f9      	beq.n	800163a <MSTK_voidStart+0x22>

	/*		Stop Timer 						*/
	CLR_BIT(MSTK->CTRL , 0);
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MSTK_voidStart+0x54>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <MSTK_voidStart+0x54>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MSTK_voidStart+0x54>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <MSTK_voidStart+0x54>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]

}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <MSTK_voidStopInterval>:

/*******************************************************************************************************/
/*                                      03- MSTK_voidStopInterval                                              */
void MSTK_voidStopInterval(void) 
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    /*	Stop Timer 	*/
	CLR_BIT(MSTK->CTRL , 0);
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MSTK_voidStopInterval+0x28>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <MSTK_voidStopInterval+0x28>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <MSTK_voidStopInterval+0x28>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <MSTK_voidStopInterval+0x28>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <_delay_ms>:
	return local_u32ElapsedTime;
}

/*******************************************************************************************************/
/*                                      09- _delay_ms                                              */
void _delay_ms( u32 Copy_u32Time ){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

	MSTK_voidInit();
 80016a4:	f7ff ffa8 	bl	80015f8 <MSTK_voidInit>
	/*	1- Disable the Interrupt 	*/
	CLR_BIT(MSTK->CTRL , 1);
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <_delay_ms+0x34>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <_delay_ms+0x34>)
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	6013      	str	r3, [r2, #0]
	
	MSTK_voidStart( Copy_u32Time * 2000 );
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffaa 	bl	8001618 <MSTK_voidStart>
	/*    Stop Timer      */
	MSTK_voidStopInterval();
 80016c4:	f7ff ffd4 	bl	8001670 <MSTK_voidStopInterval>

}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <_delay_us>:

/*******************************************************************************************************/
/*                                      10- _delay_us                                              */
void _delay_us( u32 Copy_u32Time ){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

	MSTK_voidInit();
 80016dc:	f7ff ff8c 	bl	80015f8 <MSTK_voidInit>
	/*	1- Disable the Interrupt 	*/
	CLR_BIT(MSTK->CTRL , 1);
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_delay_us+0x30>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <_delay_us+0x30>)
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	6013      	str	r3, [r2, #0]
	
	MSTK_voidStart( Copy_u32Time * 2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff91 	bl	8001618 <MSTK_voidStart>
	/*    Stop Timer      */
	MSTK_voidStopInterval();
 80016f6:	f7ff ffbb 	bl	8001670 <MSTK_voidStopInterval>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <SysTick_Handler>:

/*******************************************************************************************************/
/*                                      //Core Peripheral                                              */

void	SysTick_Handler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	u8 Local_u8Temp = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
	if(MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <SysTick_Handler+0x5c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d111      	bne.n	800173e <SysTick_Handler+0x36>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(MSTK->CTRL , 1);
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <SysTick_Handler+0x60>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <SysTick_Handler+0x60>)
 8001720:	f023 0302 	bic.w	r3, r3, #2
 8001724:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(MSTK->CTRL , 0);
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <SysTick_Handler+0x60>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <SysTick_Handler+0x60>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]
			MSTK->LOAD	= 0;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <SysTick_Handler+0x60>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
			MSTK->VAL	= 0;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <SysTick_Handler+0x60>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
	}
	 /*Execute Action to be done after the time passed*/
	if(MSTK_CallBack !=NULL)
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <SysTick_Handler+0x64>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <SysTick_Handler+0x44>
	{	
	MSTK_CallBack();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <SysTick_Handler+0x64>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4798      	blx	r3
	}
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(MSTK->CTRL , COUNTFLAG);
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SysTick_Handler+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	71fb      	strb	r3, [r7, #7]
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000088 	.word	0x20000088
 8001768:	e000e010 	.word	0xe000e010
 800176c:	20000084 	.word	0x20000084

08001770 <GET_TIMER>:

/*******************************************************************************************************/
/*                                      GET_TIMER Function                                         */
/*-----------------------------------------------------------------------------------------------------*/

static TIM2_5_MemMap_t* GET_TIMER(u32 Copy_u8TimerNum) {
 8001770:	b4b0      	push	{r4, r5, r7}
 8001772:	b08d      	sub	sp, #52	; 0x34
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	// Array containing the offsets of TIMER registers for different TIMers.
	u32 Timer_Offset[8] = TIMERS_OFFSET;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <GET_TIMER+0x3c>)
 800177a:	f107 040c 	add.w	r4, r7, #12
 800177e:	461d      	mov	r5, r3
 8001780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Calculate the base address of the specified TIMER using its offset.
	TIM2_5_MemMap_t* TIMx = (TIM2_5_MemMap_t*)((u32)TIM2 + Timer_Offset[Copy_u8TimerNum - 1]);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	3330      	adds	r3, #48	; 0x30
 8001794:	443b      	add	r3, r7
 8001796:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800179a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Return the pointer to the memory-mapped structure of the specified TIMER.
	return TIMx;
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3734      	adds	r7, #52	; 0x34
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bcb0      	pop	{r4, r5, r7}
 80017aa:	4770      	bx	lr
 80017ac:	0800298c 	.word	0x0800298c

080017b0 <MTIMER_vStartTime>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      01- MTIMER_vStartTime                                          */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vStartTime(Enum_TIMER_NUM Copy_u8TimerNum) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ffd7 	bl	8001770 <GET_TIMER>
 80017c2:	60f8      	str	r0, [r7, #12]

	// Reset Control Register 1 Value
	TIMx->CR1 = 0;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

	// Set the prescaler value to achieve a 1ms time base
	TIMx->PSC = SYS_CLOCK * 1000 - 1;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the auto-reload value to MAX Value
	TIMx->ARR = 0xFFFFFFFF;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Counter Enable bit to start the timer
	SET_BIT(TIMx->CR1, CEN);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]

	// Ensure Starting CNT from 0 as of some problems with TIMER2 and TIMER 5 if "ARR >0x0020000"
	TIMx->CNT = 0xFFFFFFFF;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MTIMER_vPWM>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      05- MTIMER_vPWM                                       		   */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vPWM(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel,u16 Copy_u16TotalTime_uSec,u16 Copy_u16PositiveDutyCycle_uSec){
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4604      	mov	r4, r0
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	4603      	mov	r3, r0
 800180c:	71bb      	strb	r3, [r7, #6]
 800180e:	460b      	mov	r3, r1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	807b      	strh	r3, [r7, #2]

	// Configure GPIO pins and alternative functions based on the selected timer and channel
	/*-----------------------------------------------------------------------------------------------------*/
	MGPIO_voidSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	3b01      	subs	r3, #1
 800181e:	49a2      	ldr	r1, [pc, #648]	; (8001aa8 <MTIMER_vPWM+0x2b0>)
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	440a      	add	r2, r1
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	3b01      	subs	r3, #1
 8001832:	499e      	ldr	r1, [pc, #632]	; (8001aac <MTIMER_vPWM+0x2b4>)
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	440a      	add	r2, r1
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinMode(
 800183e:	2202      	movs	r2, #2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff fafd 	bl	8000e40 <MGPIO_voidSetPinMode>
			MODE_ALTF
	);
	MGPIO_voidSetPinAltFn(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	79bb      	ldrb	r3, [r7, #6]
 800184c:	3b01      	subs	r3, #1
 800184e:	4996      	ldr	r1, [pc, #600]	; (8001aa8 <MTIMER_vPWM+0x2b0>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	440a      	add	r2, r1
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	1e5a      	subs	r2, r3, #1
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	3b01      	subs	r3, #1
 8001862:	4992      	ldr	r1, [pc, #584]	; (8001aac <MTIMER_vPWM+0x2b4>)
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	440a      	add	r2, r1
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	3b01      	subs	r3, #1
 8001872:	4a8f      	ldr	r2, [pc, #572]	; (8001ab0 <MTIMER_vPWM+0x2b8>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinAltFn(
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff fd35 	bl	80012e8 <MGPIO_voidSetPinAltFn>
	);
	/*-----------------------------------------------------------------------------------------------------*/


	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff75 	bl	8001770 <GET_TIMER>
 8001886:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR); 		// UP COUNT
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0210 	bic.w	r2, r3, #16
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0); 	// 00: Edge-aligned mode. The counter counts up
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 0220 	bic.w	r2, r3, #32
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1);     // 	   or down depending on the direction bit(DIR)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as output  "PWM"
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0+(((Copy_u8Channel-1)%2)*8)) );
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b2d8      	uxtb	r0, r3
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3206      	adds	r2, #6
 80018ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	bfb8      	it	lt
 80018da:	425b      	neglt	r3, r3
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	ea02 0103 	and.w	r1, r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1d82      	adds	r2, r0, #6
 80018ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1+(((Copy_u8Channel-1)%2)*8)) );
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4a6f      	ldr	r2, [pc, #444]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	b2d8      	uxtb	r0, r3
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3206      	adds	r2, #6
 8001904:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	3b01      	subs	r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	bfb8      	it	lt
 8001914:	425b      	neglt	r3, r3
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	3301      	adds	r3, #1
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	ea02 0103 	and.w	r1, r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1d82      	adds	r2, r0, #6
 800192a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	/* TIME Calculation of Total Period:
	 * Total_Period = (PSC / (SYS_CLOCK * 10^6)) * ARR
	 */
	TIMx->PSC = SYS_CLOCK*10-1;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	229f      	movs	r2, #159	; 0x9f
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = ( Copy_u16TotalTime_uSec*100 )/1000; // Timer auto-reload to max <<Periodic time>>
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <MTIMER_vPWM+0x2c0>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1092      	asrs	r2, r2, #2
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCR[Copy_u8Channel-1] = ( Copy_u16PositiveDutyCycle_uSec*100 )/1000; // << DUTY CYCLE >>
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <MTIMER_vPWM+0x2c0>)
 800194c:	fb82 1203 	smull	r1, r2, r2, r3
 8001950:	1092      	asrs	r2, r2, #2
 8001952:	17db      	asrs	r3, r3, #31
 8001954:	1ad2      	subs	r2, r2, r3
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	3b01      	subs	r3, #1
 800195a:	4611      	mov	r1, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	330c      	adds	r3, #12
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	6059      	str	r1, [r3, #4]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxPE+(((Copy_u8Channel-1)%2)*8)) );  //1: Preload register on TIMx_CCRx enabled
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	b2d8      	uxtb	r0, r3
 8001972:	4602      	mov	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3206      	adds	r2, #6
 8001978:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	3b01      	subs	r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	bfb8      	it	lt
 8001988:	425b      	neglt	r3, r3
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	3303      	adds	r3, #3
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	ea42 0103 	orr.w	r1, r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1d82      	adds	r2, r0, #6
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM0+(((Copy_u8Channel-1)%2)*8)) );// PWM Mode1 (high then low)
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	4a44      	ldr	r2, [pc, #272]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	b2d8      	uxtb	r0, r3
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3206      	adds	r2, #6
 80019b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	bfb8      	it	lt
 80019c2:	425b      	neglt	r3, r3
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	3304      	adds	r3, #4
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	ea02 0103 	and.w	r1, r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1d82      	adds	r2, r0, #6
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM1+(((Copy_u8Channel-1)%2)*8)) );
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3206      	adds	r2, #6
 80019ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	bfb8      	it	lt
 80019fe:	425b      	neglt	r3, r3
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	3305      	adds	r3, #5
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1d82      	adds	r2, r0, #6
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM2+(((Copy_u8Channel-1)%2)*8)) );
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <MTIMER_vPWM+0x2bc>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	b2d8      	uxtb	r0, r3
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3206      	adds	r2, #6
 8001a28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a2c:	79bb      	ldrb	r3, [r7, #6]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	bfb8      	it	lt
 8001a38:	425b      	neglt	r3, r3
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	ea42 0103 	orr.w	r1, r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1d82      	adds	r2, r0, #6
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCER ,( CCxP + (Copy_u8Channel-1)*4) ); //Polarity 0: active high
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	79ba      	ldrb	r2, [r7, #6]
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	43d2      	mvns	r2, r2
 8001a64:	401a      	ands	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER ,( CCxE + (Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	79ba      	ldrb	r2, [r7, #6]
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx->RESERVED2 , 15 );// MOE 1: OC and OCN outputs are enabled
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44

	SET_BIT( TIMx->CR1 , CEN );// Enable timer
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]
	TIMx->CNT = 0xFFFFFFFF;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	20000040 	.word	0x20000040
 8001ab4:	aaaaaaab 	.word	0xaaaaaaab
 8001ab8:	66666667 	.word	0x66666667

08001abc <MTIMER_vICU>:


/*******************************************************************************************************/
/*                                      06- MTIMER_vICU                                       		   */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71bb      	strb	r3, [r7, #6]

	// Configure GPIO pins and alternative functions based on the selected timer and channel
	/*-----------------------------------------------------------------------------------------------------*/

	MGPIO_voidSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	1e5a      	subs	r2, r3, #1
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	4999      	ldr	r1, [pc, #612]	; (8001d3c <MTIMER_vICU+0x280>)
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	440a      	add	r2, r1
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4995      	ldr	r1, [pc, #596]	; (8001d40 <MTIMER_vICU+0x284>)
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	440a      	add	r2, r1
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinMode(
 8001af4:	2202      	movs	r2, #2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f9a2 	bl	8000e40 <MGPIO_voidSetPinMode>
			MODE_ALTF
	);
	MGPIO_voidSetPinAltFn(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	498d      	ldr	r1, [pc, #564]	; (8001d3c <MTIMER_vICU+0x280>)
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	440a      	add	r2, r1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	4989      	ldr	r1, [pc, #548]	; (8001d40 <MTIMER_vICU+0x284>)
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	440a      	add	r2, r1
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	4a86      	ldr	r2, [pc, #536]	; (8001d44 <MTIMER_vICU+0x288>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinAltFn(
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fbda 	bl	80012e8 <MGPIO_voidSetPinAltFn>
	);
	/*-----------------------------------------------------------------------------------------------------*/


	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fe1a 	bl	8001770 <GET_TIMER>
 8001b3c:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR ); 	// UP COUNT
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0210 	bic.w	r2, r3, #16
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0 ); 	// 00: Edge-aligned mode. The counter counts up
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0220 	bic.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1 );    // 		or down depending on the direction bit(DIR)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as ICU
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0 + ( ((Copy_u8Channel-1)%2)*8)) );
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	b2d8      	uxtb	r0, r3
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3206      	adds	r2, #6
 8001b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	bfb8      	it	lt
 8001b90:	425b      	neglt	r3, r3
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	ea42 0103 	orr.w	r1, r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1d82      	adds	r2, r0, #6
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1 + ( ((Copy_u8Channel-1)%2)*8)) );
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	b2d8      	uxtb	r0, r3
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3206      	adds	r2, #6
 8001bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	bfb8      	it	lt
 8001bc8:	425b      	neglt	r3, r3
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	ea02 0103 	and.w	r1, r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1d82      	adds	r2, r0, #6
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//FILTERING
	SET_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF0 + ( ((Copy_u8Channel-1)%2)*8)));
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3206      	adds	r2, #6
 8001bf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	bfb8      	it	lt
 8001c04:	425b      	neglt	r3, r3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	ea42 0103 	orr.w	r1, r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1d82      	adds	r2, r0, #6
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF1 + ( ((Copy_u8Channel-1)%2)*8)));
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	4a4a      	ldr	r2, [pc, #296]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	b2d8      	uxtb	r0, r3
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3206      	adds	r2, #6
 8001c2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	bfb8      	it	lt
 8001c3e:	425b      	neglt	r3, r3
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	3305      	adds	r3, #5
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	ea42 0103 	orr.w	r1, r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1d82      	adds	r2, r0, #6
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF2 + ( ((Copy_u8Channel-1)%2)*8)));
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	b2d8      	uxtb	r0, r3
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3206      	adds	r2, #6
 8001c68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	bfb8      	it	lt
 8001c78:	425b      	neglt	r3, r3
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	ea02 0103 	and.w	r1, r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1d82      	adds	r2, r0, #6
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF3 + ( ((Copy_u8Channel-1)%2)*8)));
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <MTIMER_vICU+0x28c>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	b2d8      	uxtb	r0, r3
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3206      	adds	r2, #6
 8001ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	bfb8      	it	lt
 8001cb4:	425b      	neglt	r3, r3
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	3307      	adds	r3, #7
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	ea02 0103 	and.w	r1, r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1d82      	adds	r2, r0, #6
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	TIMx -> PSC = (SYS_CLOCK * 100)-1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f240 623f 	movw	r2, #1599	; 0x63f
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx -> ARR = 0xFFFFFFFF;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c

	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER  , ( CCxE + (Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	79ba      	ldrb	r2, [r7, #6]
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f202 	lsl.w	r2, r1, r2
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	621a      	str	r2, [r3, #32]
	CLR_BIT( TIMx->CCER  , ( CCxP + (Copy_u8Channel-1)*4) );
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	79ba      	ldrb	r2, [r7, #6]
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	3201      	adds	r2, #1
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	43d2      	mvns	r2, r2
 8001d08:	401a      	ands	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx->DIER  , Copy_u8Channel );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	79ba      	ldrb	r2, [r7, #6]
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	60da      	str	r2, [r3, #12]

	SET_BIT( TIMx->CR1   , CEN );// Enable timer
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]
	TIMx-> CNT = 0xFFFFFFFF;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000020 	.word	0x20000020
 8001d44:	20000040 	.word	0x20000040
 8001d48:	aaaaaaab 	.word	0xaaaaaaab

08001d4c <LOC_TIMER_ICU>:
/*******************************************************************************************************/

/*******************************************************************************************************/
static void LOC_TIMER_ICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8ChannelNum) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	460a      	mov	r2, r1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71bb      	strb	r3, [r7, #6]
	static u8  captureState [29] = {0};
	static u32 captureValue1[29] = {0};
	static u32 captureValue2[29] = {0};
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum+1);
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd05 	bl	8001770 <GET_TIMER>
 8001d66:	60f8      	str	r0, [r7, #12]
	if (captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] == 0) {
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <LOC_TIMER_ICU+0xe0>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11f      	bne.n	8001db8 <LOC_TIMER_ICU+0x6c>
		// Capture the time on the rising edge
		captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	0091      	lsls	r1, r2, #2
 8001d7e:	79ba      	ldrb	r2, [r7, #6]
 8001d80:	440a      	add	r2, r1
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4928      	ldr	r1, [pc, #160]	; (8001e30 <LOC_TIMER_ICU+0xe4>)
 8001d8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

		// Enable falling edge capture
		SET_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	79ba      	ldrb	r2, [r7, #6]
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	3201      	adds	r2, #1
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	621a      	str	r2, [r3, #32]

		// Move to the next state
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 1;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <LOC_TIMER_ICU+0xe0>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	54d1      	strb	r1, [r2, r3]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];

		// Reset state value
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
	}
}
 8001db6:	e035      	b.n	8001e24 <LOC_TIMER_ICU+0xd8>
		captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	0091      	lsls	r1, r2, #2
 8001dbe:	79ba      	ldrb	r2, [r7, #6]
 8001dc0:	440a      	add	r2, r1
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4919      	ldr	r1, [pc, #100]	; (8001e34 <LOC_TIMER_ICU+0xe8>)
 8001dce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		CLR_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	79ba      	ldrb	r2, [r7, #6]
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	3201      	adds	r2, #1
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	43d2      	mvns	r2, r2
 8001de4:	401a      	ands	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	621a      	str	r2, [r3, #32]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <LOC_TIMER_ICU+0xe8>)
 8001df4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LOC_TIMER_ICU+0xe4>)
 8001e02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	0098      	lsls	r0, r3, #2
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	4403      	add	r3, r0
 8001e0e:	1a8a      	subs	r2, r1, r2
 8001e10:	4909      	ldr	r1, [pc, #36]	; (8001e38 <LOC_TIMER_ICU+0xec>)
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	009a      	lsls	r2, r3, #2
 8001e1a:	79bb      	ldrb	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <LOC_TIMER_ICU+0xe0>)
 8001e20:	2100      	movs	r1, #0
 8001e22:	54d1      	strb	r1, [r2, r3]
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000120 	.word	0x20000120
 8001e30:	20000140 	.word	0x20000140
 8001e34:	200001b4 	.word	0x200001b4
 8001e38:	200000ac 	.word	0x200000ac

08001e3c <MTIMER_GET_ICU>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      07- MTIMER_GET_ICU                                       	   */
/*-----------------------------------------------------------------------------------------------------*/
u32 MTIMER_GET_ICU(Enum_TIMER_NUM Copy_u8TimerNum, Enum_TIMER_CHs Copy_u8Channel) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	460a      	mov	r2, r1
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71bb      	strb	r3, [r7, #6]
	return Time[(4 * (Copy_u8TimerNum - 1) + (Copy_u8Channel - 1))];//return Time[(4 * (Copy_u8TimerNum - 1) + Copy_u8Channel)];
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	79bb      	ldrb	r3, [r7, #6]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <MTIMER_GET_ICU+0x30>)
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200000ac 	.word	0x200000ac

08001e70 <TIM1_UP_TIM10_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 or TIM10 triggers an interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	// Check if the update interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 0)) {
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <TIM1_UP_TIM10_IRQHandler+0x2c>

		// Check if a callback function is registered for TIM1
		if (GLOBAL_Ptr[0] != NULL) {
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <TIM1_UP_TIM10_IRQHandler+0x1e>
			// Call the callback function for TIM1
			GLOBAL_Ptr[0]();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM1
		CLR_BIT(TIM1->SR, 0);
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM10 without calling a callback function
				CLR_BIT(TIM10->SR, 0);
			}
		}
	}
}
 8001e9a:	e029      	b.n	8001ef0 <TIM1_UP_TIM10_IRQHandler+0x80>
		if (GET_BIT(TIM10->SR, 1)) {
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <TIM1_UP_TIM10_IRQHandler+0x4c>
			LOC_TIMER_ICU(TIMER10 - 1, CH1 - 1);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f7ff ff4e 	bl	8001d4c <LOC_TIMER_ICU>
			CLR_BIT(TIM10->SR, CH1);
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	6113      	str	r3, [r2, #16]
		if (GET_BIT(TIM10->SR, 0)) {
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <TIM1_UP_TIM10_IRQHandler+0x80>
			if (GLOBAL_Ptr[6] != NULL) {
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <TIM1_UP_TIM10_IRQHandler+0x74>
				GLOBAL_Ptr[6]();
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4798      	blx	r3
				CLR_BIT(TIM10->SR, 0);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6113      	str	r3, [r2, #16]
}
 8001ee2:	e005      	b.n	8001ef0 <TIM1_UP_TIM10_IRQHandler+0x80>
				CLR_BIT(TIM10->SR, 0);
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6113      	str	r3, [r2, #16]
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	2000008c 	.word	0x2000008c
 8001efc:	40014400 	.word	0x40014400

08001f00 <TIM1_TRG_COM_TIM11_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 triggers a trigger/completion or TIM11 triggers an interrupt.
 */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

	// Check if the trigger interrupt or COM interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 5) || GET_BIT(TIM1->SR, 6)) {
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d12f      	bne.n	8001f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d129      	bne.n	8001f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
		// Handle TIMER1 trigger or COM interrupt
		// Add the necessary code or call a function for TIMER1 trigger or COM handling
	}
	else {
		// Check if the capture/compare interrupt flag for CH1 of TIM11 is set
		if (GET_BIT(TIM11->SR, 1)) {
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM11
			LOC_TIMER_ICU(TIMER11 - 1, CH1 - 1);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	f7ff ff0e 	bl	8001d4c <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM11
			CLR_BIT(TIM11->SR, CH1);
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM11 is set
		if (GET_BIT(TIM11->SR, 0)) {
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>

			// Check if a callback function is registered for TIM11 (at index 7 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[7] != NULL) {
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>

				// Call the callback function for TIM11
				GLOBAL_Ptr[7]();
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4798      	blx	r3

				// Clear the update interrupt flag of TIM11
				CLR_BIT(TIM11->SR, 0);
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM11 without calling a callback function
				CLR_BIT(TIM11->SR, 0);
			}
		}
	}
}
 8001f62:	e005      	b.n	8001f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
				CLR_BIT(TIM11->SR, 0);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6113      	str	r3, [r2, #16]
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40014800 	.word	0x40014800
 8001f7c:	2000008c 	.word	0x2000008c

08001f80 <TIM1_BRK_TIM9_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 triggers a break interrupt or TIM9 triggers an interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	// Check if the break interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 7)) {
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13a      	bne.n	8002006 <TIM1_BRK_TIM9_IRQHandler+0x86>
		// Add the necessary code or call a function for TIMER1 break handling
	}
	else {

		// Check if the capture/compare interrupt flag for CH1 of TIM9 is set
		if (GET_BIT(TIM9->SR, 1)) {
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <TIM1_BRK_TIM9_IRQHandler+0x32>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH1 - 1);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2005      	movs	r0, #5
 8001fa0:	f7ff fed4 	bl	8001d4c <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM9
			CLR_BIT(TIM9->SR, CH1);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001faa:	f023 0302 	bic.w	r3, r3, #2
 8001fae:	6113      	str	r3, [r2, #16]
 8001fb0:	e00f      	b.n	8001fd2 <TIM1_BRK_TIM9_IRQHandler+0x52>
		}
		else if (GET_BIT(TIM9->SR, 2)) {
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <TIM1_BRK_TIM9_IRQHandler+0x52>
			// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH2 - 1);
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f7ff fec3 	bl	8001d4c <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH2 of TIM9
			CLR_BIT(TIM9->SR, CH2);
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM9 is set
		if (GET_BIT(TIM9->SR, 0)) {
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d013      	beq.n	8002006 <TIM1_BRK_TIM9_IRQHandler+0x86>

			// Check if a callback function is registered for TIM9 (at index 5 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[5] != NULL) {
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <TIM1_BRK_TIM9_IRQHandler+0x7a>

				// Call the callback function for TIM9
				GLOBAL_Ptr[5]();
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4798      	blx	r3

				// Clear the update interrupt flag of TIM9
				CLR_BIT(TIM9->SR, 0);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM9 without calling a callback function
				CLR_BIT(TIM9->SR, 0);
			}
		}
	}
}
 8001ff8:	e005      	b.n	8002006 <TIM1_BRK_TIM9_IRQHandler+0x86>
				CLR_BIT(TIM9->SR, 0);
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6113      	str	r3, [r2, #16]
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40014000 	.word	0x40014000
 8002014:	2000008c 	.word	0x2000008c

08002018 <TIM1_CC_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4)
 * 				 of TIM1 triggers an interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM1 is set
	if (GET_BIT(TIM1->SR, 1)) {
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <TIM1_CC_IRQHandler+0x26>

		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM1
		LOC_TIMER_ICU(TIMER1 - 1, CH1 - 1);
 8002028:	2100      	movs	r1, #0
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff fe8e 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM1
		CLR_BIT(TIM1->SR, CH1);
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002036:	f023 0302 	bic.w	r3, r3, #2
 800203a:	6113      	str	r3, [r2, #16]
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);

		// Clear the capture/compare interrupt flag for CH4 of TIM1
		CLR_BIT(TIM1->SR, CH4);
	}
}
 800203c:	e02b      	b.n	8002096 <TIM1_CC_IRQHandler+0x7e>
	else if (GET_BIT(TIM1->SR, 2)) {
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <TIM1_CC_IRQHandler+0x48>
		LOC_TIMER_ICU(TIMER1 - 1, CH2 - 1);
 800204a:	2101      	movs	r1, #1
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fe7d 	bl	8001d4c <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH2);
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6113      	str	r3, [r2, #16]
}
 800205e:	e01a      	b.n	8002096 <TIM1_CC_IRQHandler+0x7e>
	else if (GET_BIT(TIM1->SR, 3)) {
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <TIM1_CC_IRQHandler+0x6a>
		LOC_TIMER_ICU(TIMER1 - 1, CH3 - 1);
 800206c:	2102      	movs	r1, #2
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff fe6c 	bl	8001d4c <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH3);
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 800207a:	f023 0308 	bic.w	r3, r3, #8
 800207e:	6113      	str	r3, [r2, #16]
}
 8002080:	e009      	b.n	8002096 <TIM1_CC_IRQHandler+0x7e>
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);
 8002082:	2103      	movs	r1, #3
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fe61 	bl	8001d4c <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH4);
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	4a03      	ldr	r2, [pc, #12]	; (800209c <TIM1_CC_IRQHandler+0x84>)
 8002090:	f023 0310 	bic.w	r3, r3, #16
 8002094:	6113      	str	r3, [r2, #16]
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000

080020a0 <TIM2_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 				the update interrupt of TIM2 triggers an interrupt.
 */
void TIM2_IRQHandler(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM2 is set
	if (GET_BIT(TIM2->SR, 1)) {
 80020a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <TIM2_IRQHandler+0x2c>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH1 - 1);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff fe49 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM2
		CLR_BIT(TIM2->SR, CH1);
 80020ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	6113      	str	r3, [r2, #16]
 80020ca:	e03a      	b.n	8002142 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 2)) {
 80020cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <TIM2_IRQHandler+0x54>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH2 - 1);
 80020da:	2101      	movs	r1, #1
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff fe35 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM2
		CLR_BIT(TIM2->SR, CH2);
 80020e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6113      	str	r3, [r2, #16]
 80020f2:	e026      	b.n	8002142 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 3)) {
 80020f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00c      	beq.n	800211c <TIM2_IRQHandler+0x7c>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH3 - 1);
 8002102:	2102      	movs	r1, #2
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff fe21 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM2
		CLR_BIT(TIM2->SR, CH3);
 800210a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	6113      	str	r3, [r2, #16]
 800211a:	e012      	b.n	8002142 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 4)) {
 800211c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <TIM2_IRQHandler+0xa2>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH4 - 1);
 800212a:	2103      	movs	r1, #3
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff fe0d 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM2
		CLR_BIT(TIM2->SR, CH4);
 8002132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800213c:	f023 0310 	bic.w	r3, r3, #16
 8002140:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM2 is set
	if (GET_BIT(TIM2->SR, 0)) {
 8002142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <TIM2_IRQHandler+0xe0>
		// Check if a callback function is registered for TIM2 (at index 2 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[1] != NULL) {
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <TIM2_IRQHandler+0xe4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <TIM2_IRQHandler+0xd0>

			// Call the callback function for TIM2
			GLOBAL_Ptr[1]();
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <TIM2_IRQHandler+0xe4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4798      	blx	r3

			// Clear the update interrupt flag of TIM2
			CLR_BIT(TIM2->SR, 0);
 800215e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM2 without calling a callback function
			CLR_BIT(TIM2->SR, 0);
		}
	}
}
 800216e:	e007      	b.n	8002180 <TIM2_IRQHandler+0xe0>
			CLR_BIT(TIM2->SR, 0);
 8002170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6113      	str	r3, [r2, #16]
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000008c 	.word	0x2000008c

08002188 <TIM3_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM3 triggers an interrupt.
 */
void TIM3_IRQHandler(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM3 is set
	if (GET_BIT(TIM3->SR, 1)) {
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <TIM3_IRQHandler+0xc4>)
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <TIM3_IRQHandler+0x26>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH1 - 1);
 8002198:	2100      	movs	r1, #0
 800219a:	2002      	movs	r0, #2
 800219c:	f7ff fdd6 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM3
		CLR_BIT(TIM3->SR, CH1);
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021a6:	f023 0302 	bic.w	r3, r3, #2
 80021aa:	6113      	str	r3, [r2, #16]
 80021ac:	e031      	b.n	8002212 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 2)) {
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <TIM3_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH2 - 1);
 80021ba:	2101      	movs	r1, #1
 80021bc:	2002      	movs	r0, #2
 80021be:	f7ff fdc5 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM3
		CLR_BIT(TIM3->SR, CH2);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6113      	str	r3, [r2, #16]
 80021ce:	e020      	b.n	8002212 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 3)) {
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <TIM3_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH3 - 1);
 80021dc:	2102      	movs	r1, #2
 80021de:	2002      	movs	r0, #2
 80021e0:	f7ff fdb4 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM3
		CLR_BIT(TIM3->SR, CH3);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021ea:	f023 0308 	bic.w	r3, r3, #8
 80021ee:	6113      	str	r3, [r2, #16]
 80021f0:	e00f      	b.n	8002212 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 4)) {
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <TIM3_IRQHandler+0xc4>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <TIM3_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH4 - 1);
 80021fe:	2103      	movs	r1, #3
 8002200:	2002      	movs	r0, #2
 8002202:	f7ff fda3 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM3
		CLR_BIT(TIM3->SR, CH4);
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <TIM3_IRQHandler+0xc4>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <TIM3_IRQHandler+0xc4>)
 800220c:	f023 0310 	bic.w	r3, r3, #16
 8002210:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM3 is set
	if (GET_BIT(TIM3->SR, 0)) {
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <TIM3_IRQHandler+0xc4>)
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d013      	beq.n	8002246 <TIM3_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM3 (at index 3 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[2] != NULL) {
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <TIM3_IRQHandler+0xc8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <TIM3_IRQHandler+0xb2>

			// Call the callback function for TIM3
			GLOBAL_Ptr[2]();
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <TIM3_IRQHandler+0xc8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4798      	blx	r3

			// Clear the update interrupt flag of TIM3
			CLR_BIT(TIM3->SR, 0);
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <TIM3_IRQHandler+0xc4>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <TIM3_IRQHandler+0xc4>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM3 without calling a callback function
			CLR_BIT(TIM3->SR, 0);
		}
	}
}
 8002238:	e005      	b.n	8002246 <TIM3_IRQHandler+0xbe>
			CLR_BIT(TIM3->SR, 0);
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <TIM3_IRQHandler+0xc4>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	4a03      	ldr	r2, [pc, #12]	; (800224c <TIM3_IRQHandler+0xc4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6113      	str	r3, [r2, #16]
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000400 	.word	0x40000400
 8002250:	2000008c 	.word	0x2000008c

08002254 <TIM4_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM4 triggers an interrupt.
 */
void TIM4_IRQHandler(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM4 is set
	if (GET_BIT(TIM4->SR, 1)) {
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <TIM4_IRQHandler+0xc4>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <TIM4_IRQHandler+0x26>

		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH1 - 1);
 8002264:	2100      	movs	r1, #0
 8002266:	2003      	movs	r0, #3
 8002268:	f7ff fd70 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM4
		CLR_BIT(TIM4->SR, CH1);
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <TIM4_IRQHandler+0xc4>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <TIM4_IRQHandler+0xc4>)
 8002272:	f023 0302 	bic.w	r3, r3, #2
 8002276:	6113      	str	r3, [r2, #16]
 8002278:	e031      	b.n	80022de <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 2)) {
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <TIM4_IRQHandler+0xc4>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <TIM4_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH2 - 1);
 8002286:	2101      	movs	r1, #1
 8002288:	2003      	movs	r0, #3
 800228a:	f7ff fd5f 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM4
		CLR_BIT(TIM4->SR, CH2);
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <TIM4_IRQHandler+0xc4>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <TIM4_IRQHandler+0xc4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6113      	str	r3, [r2, #16]
 800229a:	e020      	b.n	80022de <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 3)) {
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <TIM4_IRQHandler+0xc4>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <TIM4_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH3 - 1);
 80022a8:	2102      	movs	r1, #2
 80022aa:	2003      	movs	r0, #3
 80022ac:	f7ff fd4e 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM4
		CLR_BIT(TIM4->SR, CH3);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a18      	ldr	r2, [pc, #96]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022b6:	f023 0308 	bic.w	r3, r3, #8
 80022ba:	6113      	str	r3, [r2, #16]
 80022bc:	e00f      	b.n	80022de <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 4)) {
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <TIM4_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH4 - 1);
 80022ca:	2103      	movs	r1, #3
 80022cc:	2003      	movs	r0, #3
 80022ce:	f7ff fd3d 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM4
		CLR_BIT(TIM4->SR, CH4);
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	4a10      	ldr	r2, [pc, #64]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022d8:	f023 0310 	bic.w	r3, r3, #16
 80022dc:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM4 is set
	if (GET_BIT(TIM4->SR, 0)) {
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d013      	beq.n	8002312 <TIM4_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM4 (at index 4 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[3] != NULL) {
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <TIM4_IRQHandler+0xc8>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <TIM4_IRQHandler+0xb2>

			// Call the callback function for TIM4
			GLOBAL_Ptr[3]();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <TIM4_IRQHandler+0xc8>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4798      	blx	r3

			// Clear the update interrupt flag of TIM4
			CLR_BIT(TIM4->SR, 0);
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <TIM4_IRQHandler+0xc4>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM4 without calling a callback function
			CLR_BIT(TIM4->SR, 0);
		}
	}
}
 8002304:	e005      	b.n	8002312 <TIM4_IRQHandler+0xbe>
			CLR_BIT(TIM4->SR, 0);
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <TIM4_IRQHandler+0xc4>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <TIM4_IRQHandler+0xc4>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6113      	str	r3, [r2, #16]
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000800 	.word	0x40000800
 800231c:	2000008c 	.word	0x2000008c

08002320 <TIM5_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 *  			the update interrupt of TIM5 triggers an interrupt.
 */
void TIM5_IRQHandler(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM5 is set
	if (GET_BIT(TIM5->SR, 1)) {
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <TIM5_IRQHandler+0x26>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH1 - 1);
 8002330:	2100      	movs	r1, #0
 8002332:	2004      	movs	r0, #4
 8002334:	f7ff fd0a 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM5
		CLR_BIT(TIM5->SR, CH1);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	6113      	str	r3, [r2, #16]
 8002344:	e031      	b.n	80023aa <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 2)) {
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <TIM5_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH2 - 1);
 8002352:	2101      	movs	r1, #1
 8002354:	2004      	movs	r0, #4
 8002356:	f7ff fcf9 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM5
		CLR_BIT(TIM5->SR, CH2);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6113      	str	r3, [r2, #16]
 8002366:	e020      	b.n	80023aa <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 3)) {
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <TIM5_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH3 - 1);
 8002374:	2102      	movs	r1, #2
 8002376:	2004      	movs	r0, #4
 8002378:	f7ff fce8 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM5
		CLR_BIT(TIM5->SR, CH3);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 8002382:	f023 0308 	bic.w	r3, r3, #8
 8002386:	6113      	str	r3, [r2, #16]
 8002388:	e00f      	b.n	80023aa <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 4)) {
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <TIM5_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH4 - 1);
 8002396:	2103      	movs	r1, #3
 8002398:	2004      	movs	r0, #4
 800239a:	f7ff fcd7 	bl	8001d4c <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM5
		CLR_BIT(TIM5->SR, CH4);
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023a4:	f023 0310 	bic.w	r3, r3, #16
 80023a8:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM5 is set
	if (GET_BIT(TIM5->SR, 0)) {
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d013      	beq.n	80023de <TIM5_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM5 (at index 5 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[4] != NULL) {
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <TIM5_IRQHandler+0xc8>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <TIM5_IRQHandler+0xb2>

			// Call the callback function for TIM5
			GLOBAL_Ptr[4]();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <TIM5_IRQHandler+0xc8>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4798      	blx	r3

			// Clear the update interrupt flag of TIM5
			CLR_BIT(TIM5->SR, 0);
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM5 without calling a callback function
			CLR_BIT(TIM5->SR, 0);
		}
	}
}
 80023d0:	e005      	b.n	80023de <TIM5_IRQHandler+0xbe>
			CLR_BIT(TIM5->SR, 0);
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <TIM5_IRQHandler+0xc4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6113      	str	r3, [r2, #16]
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	2000008c 	.word	0x2000008c

080023ec <MUSART_voidInit>:
/*******************************************************************************************************/


/*******************************************************************************************************/
void MUSART_voidInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

	/***********	USART_1		***********/
#if (USART1_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART1_REG->BRR = USART1_BUAD_RATE;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MUSART_voidInit+0x78>)
 80023f2:	f240 6283 	movw	r2, #1667	; 0x683
 80023f6:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART1_REG->CR2 |= (USART1_STOP_BITS << 12);
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MUSART_voidInit+0x78>)
 80023fa:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <MUSART_voidInit+0x78>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART1_REG->CR1.SBK = USART1_SEND_BREAK;
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <MUSART_voidInit+0x78>)
 8002402:	68d3      	ldr	r3, [r2, #12]
 8002404:	f36f 0300 	bfc	r3, #0, #1
 8002408:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART1_REG->CR1.RE = USART1_RECEIVER;
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <MUSART_voidInit+0x78>)
 800240c:	68d3      	ldr	r3, [r2, #12]
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART1_REG->CR1.TE = USART1_TRANSMITTER;
 8002414:	4a13      	ldr	r2, [pc, #76]	; (8002464 <MUSART_voidInit+0x78>)
 8002416:	68d3      	ldr	r3, [r2, #12]
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART1_REG->CR1.RXNEIE = USART1_RX_INT;
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <MUSART_voidInit+0x78>)
 8002420:	68d3      	ldr	r3, [r2, #12]
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART1_REG->CR1.TCIE = USART1_T_COMP_INT;
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <MUSART_voidInit+0x78>)
 800242a:	68d3      	ldr	r3, [r2, #12]
 800242c:	f36f 1386 	bfc	r3, #6, #1
 8002430:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART1_REG->CR1.PCE = USART1_PARITY_ENABLE;
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <MUSART_voidInit+0x78>)
 8002434:	68d3      	ldr	r3, [r2, #12]
 8002436:	f36f 238a 	bfc	r3, #10, #1
 800243a:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART1_REG->CR1.PS = USART1_PARITY_MODE;
 800243c:	4a09      	ldr	r2, [pc, #36]	; (8002464 <MUSART_voidInit+0x78>)
 800243e:	68d3      	ldr	r3, [r2, #12]
 8002440:	f36f 2349 	bfc	r3, #9, #1
 8002444:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART1_REG->CR1.M = USART1_WORD_LEN;
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <MUSART_voidInit+0x78>)
 8002448:	68d3      	ldr	r3, [r2, #12]
 800244a:	f36f 330c 	bfc	r3, #12, #1
 800244e:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART1_REG->CR1.OVER8	= USART1_OVER_SAMPLING;
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <MUSART_voidInit+0x78>)
 8002452:	68d3      	ldr	r3, [r2, #12]
 8002454:	f36f 33cf 	bfc	r3, #15, #1
 8002458:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART6_REG->CR1.M = USART6_WORD_LEN;
	/**< Configure USART1 Over-sampling mode */
	USART6_REG->CR1.OVER8	= USART6_OVER_SAMPLING;
#endif
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40011000 	.word	0x40011000

08002468 <MUSART_voidEnable>:

/*******************************************************************************************************/

void MUSART_voidEnable(u8 copy_u8Index){
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8Index){
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b06      	cmp	r3, #6
 8002476:	d012      	beq.n	800249e <MUSART_voidEnable+0x36>
 8002478:	2b06      	cmp	r3, #6
 800247a:	dc16      	bgt.n	80024aa <MUSART_voidEnable+0x42>
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <MUSART_voidEnable+0x1e>
 8002480:	2b02      	cmp	r3, #2
 8002482:	d006      	beq.n	8002492 <MUSART_voidEnable+0x2a>
	case 1: USART1_REG -> CR1.UE = 1; break;
	case 2: USART2_REG -> CR1.UE = 1; break;
	case 6: USART6_REG -> CR1.UE = 1; break;
	}
}
 8002484:	e011      	b.n	80024aa <MUSART_voidEnable+0x42>
	case 1: USART1_REG -> CR1.UE = 1; break;
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <MUSART_voidEnable+0x50>)
 8002488:	68d3      	ldr	r3, [r2, #12]
 800248a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	e00b      	b.n	80024aa <MUSART_voidEnable+0x42>
	case 2: USART2_REG -> CR1.UE = 1; break;
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <MUSART_voidEnable+0x54>)
 8002494:	68d3      	ldr	r3, [r2, #12]
 8002496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e005      	b.n	80024aa <MUSART_voidEnable+0x42>
	case 6: USART6_REG -> CR1.UE = 1; break;
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <MUSART_voidEnable+0x58>)
 80024a0:	68d3      	ldr	r3, [r2, #12]
 80024a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	bf00      	nop
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40011400 	.word	0x40011400

080024c4 <MUSART_voidDisable>:

/*******************************************************************************************************/

void MUSART_voidDisable(u8 copy_u8Index){
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Index)
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	d012      	beq.n	80024fa <MUSART_voidDisable+0x36>
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	dc16      	bgt.n	8002506 <MUSART_voidDisable+0x42>
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d002      	beq.n	80024e2 <MUSART_voidDisable+0x1e>
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d006      	beq.n	80024ee <MUSART_voidDisable+0x2a>
	{
	case 1: USART1_REG -> CR1.UE = 0; break;
	case 2: USART2_REG -> CR1.UE = 0; break;
	case 6: USART6_REG -> CR1.UE = 0; break;
	}
}
 80024e0:	e011      	b.n	8002506 <MUSART_voidDisable+0x42>
	case 1: USART1_REG -> CR1.UE = 0; break;
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <MUSART_voidDisable+0x50>)
 80024e4:	68d3      	ldr	r3, [r2, #12]
 80024e6:	f36f 334d 	bfc	r3, #13, #1
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e00b      	b.n	8002506 <MUSART_voidDisable+0x42>
	case 2: USART2_REG -> CR1.UE = 0; break;
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <MUSART_voidDisable+0x54>)
 80024f0:	68d3      	ldr	r3, [r2, #12]
 80024f2:	f36f 334d 	bfc	r3, #13, #1
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e005      	b.n	8002506 <MUSART_voidDisable+0x42>
	case 6: USART6_REG -> CR1.UE = 0; break;
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <MUSART_voidDisable+0x58>)
 80024fc:	68d3      	ldr	r3, [r2, #12]
 80024fe:	f36f 334d 	bfc	r3, #13, #1
 8002502:	60d3      	str	r3, [r2, #12]
 8002504:	bf00      	nop
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40011000 	.word	0x40011000
 8002518:	40004400 	.word	0x40004400
 800251c:	40011400 	.word	0x40011400

08002520 <MUSART_u8Send_Byte>:

/*******************************************************************************************************/
void MUSART_u8Send_Byte(u8 copy_u8Index ,u8 copy_u8Data){
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f84e 	bl	80025d4 <MUSART_SetUSART>
 8002538:	60f8      	str	r0, [r7, #12]
	while(0==GET_BIT(_USART_->SR, 7));// wait until transmission complete into the shift register
 800253a:	bf00      	nop
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f9      	beq.n	800253c <MUSART_u8Send_Byte+0x1c>
	_USART_->DR = copy_u8Data;
 8002548:	79ba      	ldrb	r2, [r7, #6]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]
	while(0==GET_BIT(_USART_->SR, 6));// wait until transmission of a frame containing data is complete
 800254e:	bf00      	nop
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f9      	beq.n	8002550 <MUSART_u8Send_Byte+0x30>
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <MUSART_u8Send_Data>:

/*******************************************************************************************************/
void MUSART_u8Send_Data(u8 copy_u8Index , u8 *copy_u8Data){
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	6039      	str	r1, [r7, #0]
 8002570:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index =0;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8002576:	e00b      	b.n	8002590 <MUSART_u8Send_Data+0x2a>
	{
		MUSART_u8Send_Byte(copy_u8Index,copy_u8Data[Local_u8Index]);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4413      	add	r3, r2
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ffcb 	bl	8002520 <MUSART_u8Send_Byte>
		Local_u8Index++;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4413      	add	r3, r2
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ed      	bne.n	8002578 <MUSART_u8Send_Data+0x12>
	}
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <MUSART_u8INT_Receive_Byte>:
		Statue = NoReceive ;
	}
		return Statue ;
}
/*******************************************************************************************************/
u8 MUSART_u8INT_Receive_Byte(u8 copy_u8Index,u8 *copy_u8Data){
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	6039      	str	r1, [r7, #0]
 80025b0:	71fb      	strb	r3, [r7, #7]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f80d 	bl	80025d4 <MUSART_SetUSART>
 80025ba:	60f8      	str	r0, [r7, #12]
	//while(0==GET_BIT(_USART_->SR, 5));
	*copy_u8Data= _USART_->DR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
	return *copy_u8Data ;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	781b      	ldrb	r3, [r3, #0]

}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <MUSART_SetUSART>:
/*******************************************************************************************************/
USART_REG MUSART_SetUSART(u8 copy_u8Index){
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	USART_REG L_handle= (USART_REG) USART1_BASE_ADRESS;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MUSART_SetUSART+0x44>)
 80025e0:	60fb      	str	r3, [r7, #12]
	switch (copy_u8Index)
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d00c      	beq.n	8002602 <MUSART_SetUSART+0x2e>
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	dc0d      	bgt.n	8002608 <MUSART_SetUSART+0x34>
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d002      	beq.n	80025f6 <MUSART_SetUSART+0x22>
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d003      	beq.n	80025fc <MUSART_SetUSART+0x28>
 80025f4:	e008      	b.n	8002608 <MUSART_SetUSART+0x34>
	{
	case 1: L_handle =  (USART_REG) USART1_BASE_ADRESS; break;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MUSART_SetUSART+0x44>)
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e005      	b.n	8002608 <MUSART_SetUSART+0x34>
	case 2: L_handle =  (USART_REG) USART2_BASE_ADRESS; break;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MUSART_SetUSART+0x48>)
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e002      	b.n	8002608 <MUSART_SetUSART+0x34>
	case 6: L_handle =  (USART_REG) USART6_BASE_ADRESS; break;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <MUSART_SetUSART+0x4c>)
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	bf00      	nop
	}
	return L_handle;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40011000 	.word	0x40011000
 800261c:	40004400 	.word	0x40004400
 8002620:	40011400 	.word	0x40011400

08002624 <USART1_voidSetCallBack>:

/*******************************************************************************************************/
/*                                      07- USART1_voidSetCallBack                                     */
/*-----------------------------------------------------------------------------------------------------*/
void USART1_voidSetCallBack( void (*ptr) (void) )
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	USART_USART1Function = ptr;
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <USART1_voidSetCallBack+0x1c>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000228 	.word	0x20000228

08002644 <USART1_IRQHandler>:
}

/*******************************************************************************************************/
/** ISR of USART1 **/
void USART1_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	USART1_REG->SR = 0 ;	//reset flags
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <USART1_IRQHandler+0x14>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
	USART_USART1Function();
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <USART1_IRQHandler+0x18>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4798      	blx	r3
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40011000 	.word	0x40011000
 800265c:	20000228 	.word	0x20000228

08002660 <USART2_IRQHandler>:

/** ISR of USART2 **/
void USART2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	USART2_REG->SR = 0 ;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <USART2_IRQHandler+0x14>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
	USART_USART2Function();
 800266a:	4b03      	ldr	r3, [pc, #12]	; (8002678 <USART2_IRQHandler+0x18>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4798      	blx	r3
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40004400 	.word	0x40004400
 8002678:	2000022c 	.word	0x2000022c

0800267c <USART6_IRQHandler>:

/** ISR of USART6 **/
void USART6_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	USART6_REG->SR = 0 ;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <USART6_IRQHandler+0x14>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
	USART_USART6Function();
 8002686:	4b03      	ldr	r3, [pc, #12]	; (8002694 <USART6_IRQHandler+0x18>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4798      	blx	r3
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40011400 	.word	0x40011400
 8002694:	20000230 	.word	0x20000230

08002698 <main>:
/* functions deceleration  END */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	/*System Clock is 16MHz from HSI*/
	MRCC_voidInitSystemClk();
 800269c:	f7fe ff90 	bl	80015c0 <MRCC_voidInitSystemClk>
	MSTK_voidInit();
 80026a0:	f7fe ffaa 	bl	80015f8 <MSTK_voidInit>
	//--------LEDs--------//
	MRCC_voidEnablePeripheralClock(AHB1,GPIOC_PORT );
 80026a4:	2102      	movs	r1, #2
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe ff38 	bl	800151c <MRCC_voidEnablePeripheralClock>
	LED_Init(&Led_0);
 80026ac:	485c      	ldr	r0, [pc, #368]	; (8002820 <main+0x188>)
 80026ae:	f7fe f9e9 	bl	8000a84 <LED_Init>
	LED_Off (&Led_0);
 80026b2:	485b      	ldr	r0, [pc, #364]	; (8002820 <main+0x188>)
 80026b4:	f7fe fa0a 	bl	8000acc <LED_Off>
	MRCC_voidEnablePeripheralClock(AHB1,GPIOA_PORT );
 80026b8:	2100      	movs	r1, #0
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe ff2e 	bl	800151c <MRCC_voidEnablePeripheralClock>
	LED_Init(&Led_1);
 80026c0:	4858      	ldr	r0, [pc, #352]	; (8002824 <main+0x18c>)
 80026c2:	f7fe f9df 	bl	8000a84 <LED_Init>
	LED_Off (&Led_1);
 80026c6:	4857      	ldr	r0, [pc, #348]	; (8002824 <main+0x18c>)
 80026c8:	f7fe fa00 	bl	8000acc <LED_Off>
	LED_Init(&Led_2);
 80026cc:	4856      	ldr	r0, [pc, #344]	; (8002828 <main+0x190>)
 80026ce:	f7fe f9d9 	bl	8000a84 <LED_Init>
	LED_Off (&Led_2);
 80026d2:	4855      	ldr	r0, [pc, #340]	; (8002828 <main+0x190>)
 80026d4:	f7fe f9fa 	bl	8000acc <LED_Off>
	LED_Init(&Led_3);
 80026d8:	4854      	ldr	r0, [pc, #336]	; (800282c <main+0x194>)
 80026da:	f7fe f9d3 	bl	8000a84 <LED_Init>
	LED_On  (&Led_3);
 80026de:	4853      	ldr	r0, [pc, #332]	; (800282c <main+0x194>)
 80026e0:	f7fe f9e2 	bl	8000aa8 <LED_On>
	//--------USART--------//
	MRCC_voidEnablePeripheralClock(AHB1,GPIOA_PORT);
 80026e4:	2100      	movs	r1, #0
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe ff18 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART1);
 80026ec:	2104      	movs	r1, #4
 80026ee:	2003      	movs	r0, #3
 80026f0:	f7fe ff14 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_9,  MODE_ALTF);
 80026f4:	2202      	movs	r2, #2
 80026f6:	2109      	movs	r1, #9
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe fba1 	bl	8000e40 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_10, MODE_ALTF);
 80026fe:	2202      	movs	r2, #2
 8002700:	210a      	movs	r1, #10
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fb9c 	bl	8000e40 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_9,  ALTFN_7);
 8002708:	2207      	movs	r2, #7
 800270a:	2109      	movs	r1, #9
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe fdeb 	bl	80012e8 <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_10, ALTFN_7);
 8002712:	2207      	movs	r2, #7
 8002714:	210a      	movs	r1, #10
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fde6 	bl	80012e8 <MGPIO_voidSetPinAltFn>
	MUSART_voidInit();
 800271c:	f7ff fe66 	bl	80023ec <MUSART_voidInit>
	MUSART_voidEnable(USART1);
 8002720:	2001      	movs	r0, #1
 8002722:	f7ff fea1 	bl	8002468 <MUSART_voidEnable>
	USART1_voidSetCallBack(RECIVE_INT);
 8002726:	4842      	ldr	r0, [pc, #264]	; (8002830 <main+0x198>)
 8002728:	f7ff ff7c 	bl	8002624 <USART1_voidSetCallBack>
	//--------ULTRASONIC echo & its Timer--------//
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOA);
 800272c:	2100      	movs	r1, #0
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fef4 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM2);
 8002734:	2100      	movs	r1, #0
 8002736:	2002      	movs	r0, #2
 8002738:	f7fe fef0 	bl	800151c <MRCC_voidEnablePeripheralClock>
	MTIMER_vStartTime(TIMER2);
 800273c:	2002      	movs	r0, #2
 800273e:	f7ff f837 	bl	80017b0 <MTIMER_vStartTime>
	MNVIC_voidEnableInterrupt(MNVIC_TIM2);
 8002742:	201c      	movs	r0, #28
 8002744:	f7fe feb4 	bl	80014b0 <MNVIC_voidEnableInterrupt>
	HULTRA_vInitialize(ULTRA_SONIC1, TIMER2, CH1);
 8002748:	2201      	movs	r2, #1
 800274a:	2102      	movs	r1, #2
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe fa97 	bl	8000c80 <HULTRA_vInitialize>
	//--------Motor Driver--------// 	//B6
	HAL_MOTOR_Init(&Motor_1);
 8002752:	4838      	ldr	r0, [pc, #224]	; (8002834 <main+0x19c>)
 8002754:	f7fe f9de 	bl	8000b14 <HAL_MOTOR_Init>
	HAL_MOTOR_STOP(&Motor_1);
 8002758:	4836      	ldr	r0, [pc, #216]	; (8002834 <main+0x19c>)
 800275a:	f7fe fa74 	bl	8000c46 <HAL_MOTOR_STOP>
	//--------------------------------------*/


	//--------Enable Interrupts-------------//
	MNVIC_voidEnableInterrupt(MNVIC_USART1);		//UART
 800275e:	2025      	movs	r0, #37	; 0x25
 8002760:	f7fe fea6 	bl	80014b0 <MNVIC_voidEnableInterrupt>
	//--------------------------------------*/

	while(1){
		//---------------//
		Led_Toggle(&Led_0);
 8002764:	482e      	ldr	r0, [pc, #184]	; (8002820 <main+0x188>)
 8002766:	f7fe f9c3 	bl	8000af0 <Led_Toggle>
		//---------------//

		//get ULTRA_SONIC_X distances
		HULTRA_vSendTrigger(&UltraS_t_1);
 800276a:	4833      	ldr	r0, [pc, #204]	; (8002838 <main+0x1a0>)
 800276c:	f7fe faa8 	bl	8000cc0 <HULTRA_vSendTrigger>
		HULTRA_vGetDistance(ULTRA_SONIC1, &Distance_F);
 8002770:	4932      	ldr	r1, [pc, #200]	; (800283c <main+0x1a4>)
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe fad0 	bl	8000d18 <HULTRA_vGetDistance>

		if(Distance_F>20 ){
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <main+0x1a4>)
 800277a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <main+0x1a8>)
 8002784:	f7fe f974 	bl	8000a70 <__aeabi_dcmpgt>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02b      	beq.n	80027e6 <main+0x14e>
			//check UART orders
			if('W'==R_data_Flag){		//FORWARD
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <main+0x1ac>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b57      	cmp	r3, #87	; 0x57
 8002794:	d111      	bne.n	80027ba <main+0x122>
				LED_On(&Led_1);
 8002796:	4823      	ldr	r0, [pc, #140]	; (8002824 <main+0x18c>)
 8002798:	f7fe f986 	bl	8000aa8 <LED_On>
				LED_Off(&Led_2);
 800279c:	4822      	ldr	r0, [pc, #136]	; (8002828 <main+0x190>)
 800279e:	f7fe f995 	bl	8000acc <LED_Off>
				LED_Off(&Led_3);
 80027a2:	4822      	ldr	r0, [pc, #136]	; (800282c <main+0x194>)
 80027a4:	f7fe f992 	bl	8000acc <LED_Off>
				//MUSART_u8Send_Data(USART1,"FORWARD ");//--
				HAL_MOTOR_MOVE(&Motor_1, FORWARD, 80);
 80027a8:	2250      	movs	r2, #80	; 0x50
 80027aa:	2101      	movs	r1, #1
 80027ac:	4821      	ldr	r0, [pc, #132]	; (8002834 <main+0x19c>)
 80027ae:	f7fe f9ea 	bl	8000b86 <HAL_MOTOR_MOVE>
				R_data_Flag='0';
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <main+0x1ac>)
 80027b4:	2230      	movs	r2, #48	; 0x30
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e7d4      	b.n	8002764 <main+0xcc>
			}
			else if('S'==R_data_Flag){	//BACKWARD
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <main+0x1ac>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b53      	cmp	r3, #83	; 0x53
 80027c0:	d1d0      	bne.n	8002764 <main+0xcc>
				LED_Off(&Led_1);
 80027c2:	4818      	ldr	r0, [pc, #96]	; (8002824 <main+0x18c>)
 80027c4:	f7fe f982 	bl	8000acc <LED_Off>
				LED_On(&Led_2);
 80027c8:	4817      	ldr	r0, [pc, #92]	; (8002828 <main+0x190>)
 80027ca:	f7fe f96d 	bl	8000aa8 <LED_On>
				LED_Off(&Led_3);
 80027ce:	4817      	ldr	r0, [pc, #92]	; (800282c <main+0x194>)
 80027d0:	f7fe f97c 	bl	8000acc <LED_Off>
				//MUSART_u8Send_Data(USART1,"BACKWARD ");//--
				HAL_MOTOR_MOVE(&Motor_1, BACKWARD, 80);
 80027d4:	2250      	movs	r2, #80	; 0x50
 80027d6:	2100      	movs	r1, #0
 80027d8:	4816      	ldr	r0, [pc, #88]	; (8002834 <main+0x19c>)
 80027da:	f7fe f9d4 	bl	8000b86 <HAL_MOTOR_MOVE>
				R_data_Flag='0';
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <main+0x1ac>)
 80027e0:	2230      	movs	r2, #48	; 0x30
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e7be      	b.n	8002764 <main+0xcc>
			else{
				//MUSART_u8Send_Data(USART1,"else \n");
			}
		}
		//stop moving depend on the distances
		else if(Distance_F<=20 ){		//|| Distance_B<=5
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <main+0x1a4>)
 80027e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <main+0x1a8>)
 80027f2:	f7fe f929 	bl	8000a48 <__aeabi_dcmple>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <main+0x186>
			HAL_MOTOR_MOVE(&Motor_1, STOP, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2102      	movs	r1, #2
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <main+0x19c>)
 8002802:	f7fe f9c0 	bl	8000b86 <HAL_MOTOR_MOVE>
			LED_Off(&Led_1);
 8002806:	4807      	ldr	r0, [pc, #28]	; (8002824 <main+0x18c>)
 8002808:	f7fe f960 	bl	8000acc <LED_Off>
			LED_Off(&Led_2);
 800280c:	4806      	ldr	r0, [pc, #24]	; (8002828 <main+0x190>)
 800280e:	f7fe f95d 	bl	8000acc <LED_Off>
			LED_On(&Led_3);
 8002812:	4806      	ldr	r0, [pc, #24]	; (800282c <main+0x194>)
 8002814:	f7fe f948 	bl	8000aa8 <LED_On>
			R_data_Flag='0';
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <main+0x1ac>)
 800281a:	2230      	movs	r2, #48	; 0x30
 800281c:	701a      	strb	r2, [r3, #0]
		Led_Toggle(&Led_0);
 800281e:	e7a1      	b.n	8002764 <main+0xcc>
 8002820:	080029b0 	.word	0x080029b0
 8002824:	080029b8 	.word	0x080029b8
 8002828:	080029c0 	.word	0x080029c0
 800282c:	080029c8 	.word	0x080029c8
 8002830:	08002849 	.word	0x08002849
 8002834:	080029d8 	.word	0x080029d8
 8002838:	080029d0 	.word	0x080029d0
 800283c:	20000238 	.word	0x20000238
 8002840:	40340000 	.word	0x40340000
 8002844:	20000235 	.word	0x20000235

08002848 <RECIVE_INT>:

/* USER CODE END 0 */
/* Functions ---------------------------------------------------------*/

void RECIVE_INT(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	MUSART_u8INT_Receive_Byte(USART1,&R_data);
 800284c:	4918      	ldr	r1, [pc, #96]	; (80028b0 <RECIVE_INT+0x68>)
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fea9 	bl	80025a6 <MUSART_u8INT_Receive_Byte>
	// software rest to the bootloader
	if('1'==R_data){
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <RECIVE_INT+0x68>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b31      	cmp	r3, #49	; 0x31
 800285a:	d10b      	bne.n	8002874 <RECIVE_INT+0x2c>
		LED_Off(&Led_0);
 800285c:	4815      	ldr	r0, [pc, #84]	; (80028b4 <RECIVE_INT+0x6c>)
 800285e:	f7fe f935 	bl	8000acc <LED_Off>
		MNVIC_voidDisableInterrupt(MNVIC_USART1);
 8002862:	2025      	movs	r0, #37	; 0x25
 8002864:	f7fe fe3e 	bl	80014e4 <MNVIC_voidDisableInterrupt>
		MUSART_voidDisable(USART1);
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fe2b 	bl	80024c4 <MUSART_voidDisable>
		//reset soft//
		WWDT_voidMakeSoftWareReset();
 800286e:	f000 f827 	bl	80028c0 <WWDT_voidMakeSoftWareReset>
 8002872:	e016      	b.n	80028a2 <RECIVE_INT+0x5a>
	}
	// Forward parking
	else if('W'==R_data){
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <RECIVE_INT+0x68>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b57      	cmp	r3, #87	; 0x57
 800287a:	d103      	bne.n	8002884 <RECIVE_INT+0x3c>
		R_data_Flag='W';
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <RECIVE_INT+0x70>)
 800287e:	2257      	movs	r2, #87	; 0x57
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e00e      	b.n	80028a2 <RECIVE_INT+0x5a>
	}
	// Backward parking
	else if('S'==R_data){
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <RECIVE_INT+0x68>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b53      	cmp	r3, #83	; 0x53
 800288a:	d103      	bne.n	8002894 <RECIVE_INT+0x4c>
		R_data_Flag='S';
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RECIVE_INT+0x70>)
 800288e:	2253      	movs	r2, #83	; 0x53
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e006      	b.n	80028a2 <RECIVE_INT+0x5a>
	}
	// Auto parking
	else if('A'==R_data){
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <RECIVE_INT+0x68>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b41      	cmp	r3, #65	; 0x41
 800289a:	d102      	bne.n	80028a2 <RECIVE_INT+0x5a>
		R_data_Flag='A';
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <RECIVE_INT+0x70>)
 800289e:	2241      	movs	r2, #65	; 0x41
 80028a0:	701a      	strb	r2, [r3, #0]
	//
	else{
		//MUSART_u8Send_Data(USART1,"ERROR ");//-----
	}
	//MUSART_u8Send_Data(USART1,"recived int \n ");//-----
	MUSART_u8Send_Data(USART1,MUSART_NewLine);
 80028a2:	4906      	ldr	r1, [pc, #24]	; (80028bc <RECIVE_INT+0x74>)
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7ff fe5e 	bl	8002566 <MUSART_u8Send_Data>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000234 	.word	0x20000234
 80028b4:	080029b0 	.word	0x080029b0
 80028b8:	20000235 	.word	0x20000235
 80028bc:	080029ac 	.word	0x080029ac

080028c0 <WWDT_voidMakeSoftWareReset>:


#define WWDT_CR            *((volatile u32 *)(0x40002C00))
void WWDT_voidMakeSoftWareReset(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	MRCC_voidEnablePeripheralClock(APB1,PERIPHERAL_EN_WWDG);
 80028c4:	210b      	movs	r1, #11
 80028c6:	2002      	movs	r0, #2
 80028c8:	f7fe fe28 	bl	800151c <MRCC_voidEnablePeripheralClock>
	WWDT_CR=0xBF;
 80028cc:	4b01      	ldr	r3, [pc, #4]	; (80028d4 <WWDT_voidMakeSoftWareReset+0x14>)
 80028ce:	22bf      	movs	r2, #191	; 0xbf
 80028d0:	601a      	str	r2, [r3, #0]
	while(1);
 80028d2:	e7fe      	b.n	80028d2 <WWDT_voidMakeSoftWareReset+0x12>
 80028d4:	40002c00 	.word	0x40002c00

080028d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002906:	f000 f811 	bl	800292c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7ff fec5 	bl	8002698 <main>

0800290e <LoopForever>:

LoopForever:
  b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   r0, =_estack
 8002910:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800291c:	080029f8 	.word	0x080029f8
  ldr r2, =_sbss
 8002920:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002924:	20000240 	.word	0x20000240

08002928 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC_IRQHandler>
	...

0800292c <__libc_init_array>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	4d0d      	ldr	r5, [pc, #52]	; (8002964 <__libc_init_array+0x38>)
 8002930:	4c0d      	ldr	r4, [pc, #52]	; (8002968 <__libc_init_array+0x3c>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	2600      	movs	r6, #0
 8002938:	42a6      	cmp	r6, r4
 800293a:	d109      	bne.n	8002950 <__libc_init_array+0x24>
 800293c:	4d0b      	ldr	r5, [pc, #44]	; (800296c <__libc_init_array+0x40>)
 800293e:	4c0c      	ldr	r4, [pc, #48]	; (8002970 <__libc_init_array+0x44>)
 8002940:	f000 f818 	bl	8002974 <_init>
 8002944:	1b64      	subs	r4, r4, r5
 8002946:	10a4      	asrs	r4, r4, #2
 8002948:	2600      	movs	r6, #0
 800294a:	42a6      	cmp	r6, r4
 800294c:	d105      	bne.n	800295a <__libc_init_array+0x2e>
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	f855 3b04 	ldr.w	r3, [r5], #4
 8002954:	4798      	blx	r3
 8002956:	3601      	adds	r6, #1
 8002958:	e7ee      	b.n	8002938 <__libc_init_array+0xc>
 800295a:	f855 3b04 	ldr.w	r3, [r5], #4
 800295e:	4798      	blx	r3
 8002960:	3601      	adds	r6, #1
 8002962:	e7f2      	b.n	800294a <__libc_init_array+0x1e>
 8002964:	080029f0 	.word	0x080029f0
 8002968:	080029f0 	.word	0x080029f0
 800296c:	080029f0 	.word	0x080029f0
 8002970:	080029f4 	.word	0x080029f4

08002974 <_init>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr

08002980 <_fini>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr
