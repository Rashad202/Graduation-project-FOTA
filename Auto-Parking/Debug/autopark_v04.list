
autopark_v04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  08010198  08010198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08012b60  08012b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bc4  08012bc4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08012bc4  08012bc4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012bc4  08012bc4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bc4  08012bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bc8  08012bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08012bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000050  08012c18  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08012c18  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000037ce  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f4e  00000000  00000000  0002388d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001f72  00000000  00000000  000247db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000480  00000000  00000000  00026750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000003b8  00000000  00000000  00026bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000d29  00000000  00000000  00026f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003071  00000000  00000000  00027cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007797  00000000  00000000  0002ad22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001140  00000000  00000000  000324bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010198 <__do_global_dtors_aux>:
 8010198:	b510      	push	{r4, lr}
 801019a:	4c05      	ldr	r4, [pc, #20]	; (80101b0 <__do_global_dtors_aux+0x18>)
 801019c:	7823      	ldrb	r3, [r4, #0]
 801019e:	b933      	cbnz	r3, 80101ae <__do_global_dtors_aux+0x16>
 80101a0:	4b04      	ldr	r3, [pc, #16]	; (80101b4 <__do_global_dtors_aux+0x1c>)
 80101a2:	b113      	cbz	r3, 80101aa <__do_global_dtors_aux+0x12>
 80101a4:	4804      	ldr	r0, [pc, #16]	; (80101b8 <__do_global_dtors_aux+0x20>)
 80101a6:	f3af 8000 	nop.w
 80101aa:	2301      	movs	r3, #1
 80101ac:	7023      	strb	r3, [r4, #0]
 80101ae:	bd10      	pop	{r4, pc}
 80101b0:	20000050 	.word	0x20000050
 80101b4:	00000000 	.word	0x00000000
 80101b8:	08012b48 	.word	0x08012b48

080101bc <frame_dummy>:
 80101bc:	b508      	push	{r3, lr}
 80101be:	4b03      	ldr	r3, [pc, #12]	; (80101cc <frame_dummy+0x10>)
 80101c0:	b11b      	cbz	r3, 80101ca <frame_dummy+0xe>
 80101c2:	4903      	ldr	r1, [pc, #12]	; (80101d0 <frame_dummy+0x14>)
 80101c4:	4803      	ldr	r0, [pc, #12]	; (80101d4 <frame_dummy+0x18>)
 80101c6:	f3af 8000 	nop.w
 80101ca:	bd08      	pop	{r3, pc}
 80101cc:	00000000 	.word	0x00000000
 80101d0:	20000054 	.word	0x20000054
 80101d4:	08012b48 	.word	0x08012b48

080101d8 <__aeabi_drsub>:
 80101d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80101dc:	e002      	b.n	80101e4 <__adddf3>
 80101de:	bf00      	nop

080101e0 <__aeabi_dsub>:
 80101e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080101e4 <__adddf3>:
 80101e4:	b530      	push	{r4, r5, lr}
 80101e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80101ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80101ee:	ea94 0f05 	teq	r4, r5
 80101f2:	bf08      	it	eq
 80101f4:	ea90 0f02 	teqeq	r0, r2
 80101f8:	bf1f      	itttt	ne
 80101fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80101fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8010202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801020a:	f000 80e2 	beq.w	80103d2 <__adddf3+0x1ee>
 801020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8010212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010216:	bfb8      	it	lt
 8010218:	426d      	neglt	r5, r5
 801021a:	dd0c      	ble.n	8010236 <__adddf3+0x52>
 801021c:	442c      	add	r4, r5
 801021e:	ea80 0202 	eor.w	r2, r0, r2
 8010222:	ea81 0303 	eor.w	r3, r1, r3
 8010226:	ea82 0000 	eor.w	r0, r2, r0
 801022a:	ea83 0101 	eor.w	r1, r3, r1
 801022e:	ea80 0202 	eor.w	r2, r0, r2
 8010232:	ea81 0303 	eor.w	r3, r1, r3
 8010236:	2d36      	cmp	r5, #54	; 0x36
 8010238:	bf88      	it	hi
 801023a:	bd30      	pophi	{r4, r5, pc}
 801023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801024c:	d002      	beq.n	8010254 <__adddf3+0x70>
 801024e:	4240      	negs	r0, r0
 8010250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010260:	d002      	beq.n	8010268 <__adddf3+0x84>
 8010262:	4252      	negs	r2, r2
 8010264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010268:	ea94 0f05 	teq	r4, r5
 801026c:	f000 80a7 	beq.w	80103be <__adddf3+0x1da>
 8010270:	f1a4 0401 	sub.w	r4, r4, #1
 8010274:	f1d5 0e20 	rsbs	lr, r5, #32
 8010278:	db0d      	blt.n	8010296 <__adddf3+0xb2>
 801027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 801027e:	fa22 f205 	lsr.w	r2, r2, r5
 8010282:	1880      	adds	r0, r0, r2
 8010284:	f141 0100 	adc.w	r1, r1, #0
 8010288:	fa03 f20e 	lsl.w	r2, r3, lr
 801028c:	1880      	adds	r0, r0, r2
 801028e:	fa43 f305 	asr.w	r3, r3, r5
 8010292:	4159      	adcs	r1, r3
 8010294:	e00e      	b.n	80102b4 <__adddf3+0xd0>
 8010296:	f1a5 0520 	sub.w	r5, r5, #32
 801029a:	f10e 0e20 	add.w	lr, lr, #32
 801029e:	2a01      	cmp	r2, #1
 80102a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80102a4:	bf28      	it	cs
 80102a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80102aa:	fa43 f305 	asr.w	r3, r3, r5
 80102ae:	18c0      	adds	r0, r0, r3
 80102b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80102b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80102b8:	d507      	bpl.n	80102ca <__adddf3+0xe6>
 80102ba:	f04f 0e00 	mov.w	lr, #0
 80102be:	f1dc 0c00 	rsbs	ip, ip, #0
 80102c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80102c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80102ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80102ce:	d31b      	bcc.n	8010308 <__adddf3+0x124>
 80102d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80102d4:	d30c      	bcc.n	80102f0 <__adddf3+0x10c>
 80102d6:	0849      	lsrs	r1, r1, #1
 80102d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80102dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80102e0:	f104 0401 	add.w	r4, r4, #1
 80102e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80102e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80102ec:	f080 809a 	bcs.w	8010424 <__adddf3+0x240>
 80102f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80102f4:	bf08      	it	eq
 80102f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80102fa:	f150 0000 	adcs.w	r0, r0, #0
 80102fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010302:	ea41 0105 	orr.w	r1, r1, r5
 8010306:	bd30      	pop	{r4, r5, pc}
 8010308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801030c:	4140      	adcs	r0, r0
 801030e:	eb41 0101 	adc.w	r1, r1, r1
 8010312:	3c01      	subs	r4, #1
 8010314:	bf28      	it	cs
 8010316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 801031a:	d2e9      	bcs.n	80102f0 <__adddf3+0x10c>
 801031c:	f091 0f00 	teq	r1, #0
 8010320:	bf04      	itt	eq
 8010322:	4601      	moveq	r1, r0
 8010324:	2000      	moveq	r0, #0
 8010326:	fab1 f381 	clz	r3, r1
 801032a:	bf08      	it	eq
 801032c:	3320      	addeq	r3, #32
 801032e:	f1a3 030b 	sub.w	r3, r3, #11
 8010332:	f1b3 0220 	subs.w	r2, r3, #32
 8010336:	da0c      	bge.n	8010352 <__adddf3+0x16e>
 8010338:	320c      	adds	r2, #12
 801033a:	dd08      	ble.n	801034e <__adddf3+0x16a>
 801033c:	f102 0c14 	add.w	ip, r2, #20
 8010340:	f1c2 020c 	rsb	r2, r2, #12
 8010344:	fa01 f00c 	lsl.w	r0, r1, ip
 8010348:	fa21 f102 	lsr.w	r1, r1, r2
 801034c:	e00c      	b.n	8010368 <__adddf3+0x184>
 801034e:	f102 0214 	add.w	r2, r2, #20
 8010352:	bfd8      	it	le
 8010354:	f1c2 0c20 	rsble	ip, r2, #32
 8010358:	fa01 f102 	lsl.w	r1, r1, r2
 801035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010360:	bfdc      	itt	le
 8010362:	ea41 010c 	orrle.w	r1, r1, ip
 8010366:	4090      	lslle	r0, r2
 8010368:	1ae4      	subs	r4, r4, r3
 801036a:	bfa2      	ittt	ge
 801036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010370:	4329      	orrge	r1, r5
 8010372:	bd30      	popge	{r4, r5, pc}
 8010374:	ea6f 0404 	mvn.w	r4, r4
 8010378:	3c1f      	subs	r4, #31
 801037a:	da1c      	bge.n	80103b6 <__adddf3+0x1d2>
 801037c:	340c      	adds	r4, #12
 801037e:	dc0e      	bgt.n	801039e <__adddf3+0x1ba>
 8010380:	f104 0414 	add.w	r4, r4, #20
 8010384:	f1c4 0220 	rsb	r2, r4, #32
 8010388:	fa20 f004 	lsr.w	r0, r0, r4
 801038c:	fa01 f302 	lsl.w	r3, r1, r2
 8010390:	ea40 0003 	orr.w	r0, r0, r3
 8010394:	fa21 f304 	lsr.w	r3, r1, r4
 8010398:	ea45 0103 	orr.w	r1, r5, r3
 801039c:	bd30      	pop	{r4, r5, pc}
 801039e:	f1c4 040c 	rsb	r4, r4, #12
 80103a2:	f1c4 0220 	rsb	r2, r4, #32
 80103a6:	fa20 f002 	lsr.w	r0, r0, r2
 80103aa:	fa01 f304 	lsl.w	r3, r1, r4
 80103ae:	ea40 0003 	orr.w	r0, r0, r3
 80103b2:	4629      	mov	r1, r5
 80103b4:	bd30      	pop	{r4, r5, pc}
 80103b6:	fa21 f004 	lsr.w	r0, r1, r4
 80103ba:	4629      	mov	r1, r5
 80103bc:	bd30      	pop	{r4, r5, pc}
 80103be:	f094 0f00 	teq	r4, #0
 80103c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80103c6:	bf06      	itte	eq
 80103c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80103cc:	3401      	addeq	r4, #1
 80103ce:	3d01      	subne	r5, #1
 80103d0:	e74e      	b.n	8010270 <__adddf3+0x8c>
 80103d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80103d6:	bf18      	it	ne
 80103d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80103dc:	d029      	beq.n	8010432 <__adddf3+0x24e>
 80103de:	ea94 0f05 	teq	r4, r5
 80103e2:	bf08      	it	eq
 80103e4:	ea90 0f02 	teqeq	r0, r2
 80103e8:	d005      	beq.n	80103f6 <__adddf3+0x212>
 80103ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80103ee:	bf04      	itt	eq
 80103f0:	4619      	moveq	r1, r3
 80103f2:	4610      	moveq	r0, r2
 80103f4:	bd30      	pop	{r4, r5, pc}
 80103f6:	ea91 0f03 	teq	r1, r3
 80103fa:	bf1e      	ittt	ne
 80103fc:	2100      	movne	r1, #0
 80103fe:	2000      	movne	r0, #0
 8010400:	bd30      	popne	{r4, r5, pc}
 8010402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010406:	d105      	bne.n	8010414 <__adddf3+0x230>
 8010408:	0040      	lsls	r0, r0, #1
 801040a:	4149      	adcs	r1, r1
 801040c:	bf28      	it	cs
 801040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010412:	bd30      	pop	{r4, r5, pc}
 8010414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010418:	bf3c      	itt	cc
 801041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801041e:	bd30      	popcc	{r4, r5, pc}
 8010420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801042c:	f04f 0000 	mov.w	r0, #0
 8010430:	bd30      	pop	{r4, r5, pc}
 8010432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010436:	bf1a      	itte	ne
 8010438:	4619      	movne	r1, r3
 801043a:	4610      	movne	r0, r2
 801043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010440:	bf1c      	itt	ne
 8010442:	460b      	movne	r3, r1
 8010444:	4602      	movne	r2, r0
 8010446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801044a:	bf06      	itte	eq
 801044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010450:	ea91 0f03 	teqeq	r1, r3
 8010454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010458:	bd30      	pop	{r4, r5, pc}
 801045a:	bf00      	nop

0801045c <__aeabi_ui2d>:
 801045c:	f090 0f00 	teq	r0, #0
 8010460:	bf04      	itt	eq
 8010462:	2100      	moveq	r1, #0
 8010464:	4770      	bxeq	lr
 8010466:	b530      	push	{r4, r5, lr}
 8010468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010470:	f04f 0500 	mov.w	r5, #0
 8010474:	f04f 0100 	mov.w	r1, #0
 8010478:	e750      	b.n	801031c <__adddf3+0x138>
 801047a:	bf00      	nop

0801047c <__aeabi_i2d>:
 801047c:	f090 0f00 	teq	r0, #0
 8010480:	bf04      	itt	eq
 8010482:	2100      	moveq	r1, #0
 8010484:	4770      	bxeq	lr
 8010486:	b530      	push	{r4, r5, lr}
 8010488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010494:	bf48      	it	mi
 8010496:	4240      	negmi	r0, r0
 8010498:	f04f 0100 	mov.w	r1, #0
 801049c:	e73e      	b.n	801031c <__adddf3+0x138>
 801049e:	bf00      	nop

080104a0 <__aeabi_f2d>:
 80104a0:	0042      	lsls	r2, r0, #1
 80104a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80104a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80104aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80104ae:	bf1f      	itttt	ne
 80104b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80104b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80104b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80104bc:	4770      	bxne	lr
 80104be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80104c2:	bf08      	it	eq
 80104c4:	4770      	bxeq	lr
 80104c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80104ca:	bf04      	itt	eq
 80104cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80104d0:	4770      	bxeq	lr
 80104d2:	b530      	push	{r4, r5, lr}
 80104d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80104d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80104e0:	e71c      	b.n	801031c <__adddf3+0x138>
 80104e2:	bf00      	nop

080104e4 <__aeabi_ul2d>:
 80104e4:	ea50 0201 	orrs.w	r2, r0, r1
 80104e8:	bf08      	it	eq
 80104ea:	4770      	bxeq	lr
 80104ec:	b530      	push	{r4, r5, lr}
 80104ee:	f04f 0500 	mov.w	r5, #0
 80104f2:	e00a      	b.n	801050a <__aeabi_l2d+0x16>

080104f4 <__aeabi_l2d>:
 80104f4:	ea50 0201 	orrs.w	r2, r0, r1
 80104f8:	bf08      	it	eq
 80104fa:	4770      	bxeq	lr
 80104fc:	b530      	push	{r4, r5, lr}
 80104fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010502:	d502      	bpl.n	801050a <__aeabi_l2d+0x16>
 8010504:	4240      	negs	r0, r0
 8010506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010516:	f43f aed8 	beq.w	80102ca <__adddf3+0xe6>
 801051a:	f04f 0203 	mov.w	r2, #3
 801051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010522:	bf18      	it	ne
 8010524:	3203      	addne	r2, #3
 8010526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801052a:	bf18      	it	ne
 801052c:	3203      	addne	r2, #3
 801052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010532:	f1c2 0320 	rsb	r3, r2, #32
 8010536:	fa00 fc03 	lsl.w	ip, r0, r3
 801053a:	fa20 f002 	lsr.w	r0, r0, r2
 801053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8010542:	ea40 000e 	orr.w	r0, r0, lr
 8010546:	fa21 f102 	lsr.w	r1, r1, r2
 801054a:	4414      	add	r4, r2
 801054c:	e6bd      	b.n	80102ca <__adddf3+0xe6>
 801054e:	bf00      	nop

08010550 <__aeabi_dmul>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801055e:	bf1d      	ittte	ne
 8010560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010564:	ea94 0f0c 	teqne	r4, ip
 8010568:	ea95 0f0c 	teqne	r5, ip
 801056c:	f000 f8de 	bleq	801072c <__aeabi_dmul+0x1dc>
 8010570:	442c      	add	r4, r5
 8010572:	ea81 0603 	eor.w	r6, r1, r3
 8010576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 801057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010582:	bf18      	it	ne
 8010584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010590:	d038      	beq.n	8010604 <__aeabi_dmul+0xb4>
 8010592:	fba0 ce02 	umull	ip, lr, r0, r2
 8010596:	f04f 0500 	mov.w	r5, #0
 801059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 801059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80105a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80105a6:	f04f 0600 	mov.w	r6, #0
 80105aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80105ae:	f09c 0f00 	teq	ip, #0
 80105b2:	bf18      	it	ne
 80105b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80105b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80105bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80105c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80105c4:	d204      	bcs.n	80105d0 <__aeabi_dmul+0x80>
 80105c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80105ca:	416d      	adcs	r5, r5
 80105cc:	eb46 0606 	adc.w	r6, r6, r6
 80105d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80105d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80105d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80105dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80105e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80105e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80105e8:	bf88      	it	hi
 80105ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80105ee:	d81e      	bhi.n	801062e <__aeabi_dmul+0xde>
 80105f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80105f4:	bf08      	it	eq
 80105f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80105fa:	f150 0000 	adcs.w	r0, r0, #0
 80105fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010602:	bd70      	pop	{r4, r5, r6, pc}
 8010604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010608:	ea46 0101 	orr.w	r1, r6, r1
 801060c:	ea40 0002 	orr.w	r0, r0, r2
 8010610:	ea81 0103 	eor.w	r1, r1, r3
 8010614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010618:	bfc2      	ittt	gt
 801061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010622:	bd70      	popgt	{r4, r5, r6, pc}
 8010624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010628:	f04f 0e00 	mov.w	lr, #0
 801062c:	3c01      	subs	r4, #1
 801062e:	f300 80ab 	bgt.w	8010788 <__aeabi_dmul+0x238>
 8010632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010636:	bfde      	ittt	le
 8010638:	2000      	movle	r0, #0
 801063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801063e:	bd70      	pople	{r4, r5, r6, pc}
 8010640:	f1c4 0400 	rsb	r4, r4, #0
 8010644:	3c20      	subs	r4, #32
 8010646:	da35      	bge.n	80106b4 <__aeabi_dmul+0x164>
 8010648:	340c      	adds	r4, #12
 801064a:	dc1b      	bgt.n	8010684 <__aeabi_dmul+0x134>
 801064c:	f104 0414 	add.w	r4, r4, #20
 8010650:	f1c4 0520 	rsb	r5, r4, #32
 8010654:	fa00 f305 	lsl.w	r3, r0, r5
 8010658:	fa20 f004 	lsr.w	r0, r0, r4
 801065c:	fa01 f205 	lsl.w	r2, r1, r5
 8010660:	ea40 0002 	orr.w	r0, r0, r2
 8010664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010670:	fa21 f604 	lsr.w	r6, r1, r4
 8010674:	eb42 0106 	adc.w	r1, r2, r6
 8010678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801067c:	bf08      	it	eq
 801067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010682:	bd70      	pop	{r4, r5, r6, pc}
 8010684:	f1c4 040c 	rsb	r4, r4, #12
 8010688:	f1c4 0520 	rsb	r5, r4, #32
 801068c:	fa00 f304 	lsl.w	r3, r0, r4
 8010690:	fa20 f005 	lsr.w	r0, r0, r5
 8010694:	fa01 f204 	lsl.w	r2, r1, r4
 8010698:	ea40 0002 	orr.w	r0, r0, r2
 801069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80106a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80106a4:	f141 0100 	adc.w	r1, r1, #0
 80106a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106ac:	bf08      	it	eq
 80106ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	f1c4 0520 	rsb	r5, r4, #32
 80106b8:	fa00 f205 	lsl.w	r2, r0, r5
 80106bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80106c0:	fa20 f304 	lsr.w	r3, r0, r4
 80106c4:	fa01 f205 	lsl.w	r2, r1, r5
 80106c8:	ea43 0302 	orr.w	r3, r3, r2
 80106cc:	fa21 f004 	lsr.w	r0, r1, r4
 80106d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80106d4:	fa21 f204 	lsr.w	r2, r1, r4
 80106d8:	ea20 0002 	bic.w	r0, r0, r2
 80106dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106e4:	bf08      	it	eq
 80106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106ea:	bd70      	pop	{r4, r5, r6, pc}
 80106ec:	f094 0f00 	teq	r4, #0
 80106f0:	d10f      	bne.n	8010712 <__aeabi_dmul+0x1c2>
 80106f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80106f6:	0040      	lsls	r0, r0, #1
 80106f8:	eb41 0101 	adc.w	r1, r1, r1
 80106fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010700:	bf08      	it	eq
 8010702:	3c01      	subeq	r4, #1
 8010704:	d0f7      	beq.n	80106f6 <__aeabi_dmul+0x1a6>
 8010706:	ea41 0106 	orr.w	r1, r1, r6
 801070a:	f095 0f00 	teq	r5, #0
 801070e:	bf18      	it	ne
 8010710:	4770      	bxne	lr
 8010712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010716:	0052      	lsls	r2, r2, #1
 8010718:	eb43 0303 	adc.w	r3, r3, r3
 801071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010720:	bf08      	it	eq
 8010722:	3d01      	subeq	r5, #1
 8010724:	d0f7      	beq.n	8010716 <__aeabi_dmul+0x1c6>
 8010726:	ea43 0306 	orr.w	r3, r3, r6
 801072a:	4770      	bx	lr
 801072c:	ea94 0f0c 	teq	r4, ip
 8010730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010734:	bf18      	it	ne
 8010736:	ea95 0f0c 	teqne	r5, ip
 801073a:	d00c      	beq.n	8010756 <__aeabi_dmul+0x206>
 801073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010740:	bf18      	it	ne
 8010742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010746:	d1d1      	bne.n	80106ec <__aeabi_dmul+0x19c>
 8010748:	ea81 0103 	eor.w	r1, r1, r3
 801074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010750:	f04f 0000 	mov.w	r0, #0
 8010754:	bd70      	pop	{r4, r5, r6, pc}
 8010756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801075a:	bf06      	itte	eq
 801075c:	4610      	moveq	r0, r2
 801075e:	4619      	moveq	r1, r3
 8010760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010764:	d019      	beq.n	801079a <__aeabi_dmul+0x24a>
 8010766:	ea94 0f0c 	teq	r4, ip
 801076a:	d102      	bne.n	8010772 <__aeabi_dmul+0x222>
 801076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010770:	d113      	bne.n	801079a <__aeabi_dmul+0x24a>
 8010772:	ea95 0f0c 	teq	r5, ip
 8010776:	d105      	bne.n	8010784 <__aeabi_dmul+0x234>
 8010778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 801077c:	bf1c      	itt	ne
 801077e:	4610      	movne	r0, r2
 8010780:	4619      	movne	r1, r3
 8010782:	d10a      	bne.n	801079a <__aeabi_dmul+0x24a>
 8010784:	ea81 0103 	eor.w	r1, r1, r3
 8010788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010794:	f04f 0000 	mov.w	r0, #0
 8010798:	bd70      	pop	{r4, r5, r6, pc}
 801079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80107a2:	bd70      	pop	{r4, r5, r6, pc}

080107a4 <__aeabi_ddiv>:
 80107a4:	b570      	push	{r4, r5, r6, lr}
 80107a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80107aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80107ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80107b2:	bf1d      	ittte	ne
 80107b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80107b8:	ea94 0f0c 	teqne	r4, ip
 80107bc:	ea95 0f0c 	teqne	r5, ip
 80107c0:	f000 f8a7 	bleq	8010912 <__aeabi_ddiv+0x16e>
 80107c4:	eba4 0405 	sub.w	r4, r4, r5
 80107c8:	ea81 0e03 	eor.w	lr, r1, r3
 80107cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80107d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80107d4:	f000 8088 	beq.w	80108e8 <__aeabi_ddiv+0x144>
 80107d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80107dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80107e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80107e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80107e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80107ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80107f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80107f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80107f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80107fc:	429d      	cmp	r5, r3
 80107fe:	bf08      	it	eq
 8010800:	4296      	cmpeq	r6, r2
 8010802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 801080a:	d202      	bcs.n	8010812 <__aeabi_ddiv+0x6e>
 801080c:	085b      	lsrs	r3, r3, #1
 801080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8010812:	1ab6      	subs	r6, r6, r2
 8010814:	eb65 0503 	sbc.w	r5, r5, r3
 8010818:	085b      	lsrs	r3, r3, #1
 801081a:	ea4f 0232 	mov.w	r2, r2, rrx
 801081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010826:	ebb6 0e02 	subs.w	lr, r6, r2
 801082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801082e:	bf22      	ittt	cs
 8010830:	1ab6      	subcs	r6, r6, r2
 8010832:	4675      	movcs	r5, lr
 8010834:	ea40 000c 	orrcs.w	r0, r0, ip
 8010838:	085b      	lsrs	r3, r3, #1
 801083a:	ea4f 0232 	mov.w	r2, r2, rrx
 801083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010846:	bf22      	ittt	cs
 8010848:	1ab6      	subcs	r6, r6, r2
 801084a:	4675      	movcs	r5, lr
 801084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010850:	085b      	lsrs	r3, r3, #1
 8010852:	ea4f 0232 	mov.w	r2, r2, rrx
 8010856:	ebb6 0e02 	subs.w	lr, r6, r2
 801085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801085e:	bf22      	ittt	cs
 8010860:	1ab6      	subcs	r6, r6, r2
 8010862:	4675      	movcs	r5, lr
 8010864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010868:	085b      	lsrs	r3, r3, #1
 801086a:	ea4f 0232 	mov.w	r2, r2, rrx
 801086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010876:	bf22      	ittt	cs
 8010878:	1ab6      	subcs	r6, r6, r2
 801087a:	4675      	movcs	r5, lr
 801087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010880:	ea55 0e06 	orrs.w	lr, r5, r6
 8010884:	d018      	beq.n	80108b8 <__aeabi_ddiv+0x114>
 8010886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 801088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8010892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 801089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80108a2:	d1c0      	bne.n	8010826 <__aeabi_ddiv+0x82>
 80108a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80108a8:	d10b      	bne.n	80108c2 <__aeabi_ddiv+0x11e>
 80108aa:	ea41 0100 	orr.w	r1, r1, r0
 80108ae:	f04f 0000 	mov.w	r0, #0
 80108b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80108b6:	e7b6      	b.n	8010826 <__aeabi_ddiv+0x82>
 80108b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80108bc:	bf04      	itt	eq
 80108be:	4301      	orreq	r1, r0
 80108c0:	2000      	moveq	r0, #0
 80108c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80108c6:	bf88      	it	hi
 80108c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80108cc:	f63f aeaf 	bhi.w	801062e <__aeabi_dmul+0xde>
 80108d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80108d4:	bf04      	itt	eq
 80108d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80108da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80108de:	f150 0000 	adcs.w	r0, r0, #0
 80108e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80108ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80108f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80108f4:	bfc2      	ittt	gt
 80108f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80108fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80108fe:	bd70      	popgt	{r4, r5, r6, pc}
 8010900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010904:	f04f 0e00 	mov.w	lr, #0
 8010908:	3c01      	subs	r4, #1
 801090a:	e690      	b.n	801062e <__aeabi_dmul+0xde>
 801090c:	ea45 0e06 	orr.w	lr, r5, r6
 8010910:	e68d      	b.n	801062e <__aeabi_dmul+0xde>
 8010912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010916:	ea94 0f0c 	teq	r4, ip
 801091a:	bf08      	it	eq
 801091c:	ea95 0f0c 	teqeq	r5, ip
 8010920:	f43f af3b 	beq.w	801079a <__aeabi_dmul+0x24a>
 8010924:	ea94 0f0c 	teq	r4, ip
 8010928:	d10a      	bne.n	8010940 <__aeabi_ddiv+0x19c>
 801092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801092e:	f47f af34 	bne.w	801079a <__aeabi_dmul+0x24a>
 8010932:	ea95 0f0c 	teq	r5, ip
 8010936:	f47f af25 	bne.w	8010784 <__aeabi_dmul+0x234>
 801093a:	4610      	mov	r0, r2
 801093c:	4619      	mov	r1, r3
 801093e:	e72c      	b.n	801079a <__aeabi_dmul+0x24a>
 8010940:	ea95 0f0c 	teq	r5, ip
 8010944:	d106      	bne.n	8010954 <__aeabi_ddiv+0x1b0>
 8010946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801094a:	f43f aefd 	beq.w	8010748 <__aeabi_dmul+0x1f8>
 801094e:	4610      	mov	r0, r2
 8010950:	4619      	mov	r1, r3
 8010952:	e722      	b.n	801079a <__aeabi_dmul+0x24a>
 8010954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010958:	bf18      	it	ne
 801095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801095e:	f47f aec5 	bne.w	80106ec <__aeabi_dmul+0x19c>
 8010962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010966:	f47f af0d 	bne.w	8010784 <__aeabi_dmul+0x234>
 801096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801096e:	f47f aeeb 	bne.w	8010748 <__aeabi_dmul+0x1f8>
 8010972:	e712      	b.n	801079a <__aeabi_dmul+0x24a>

08010974 <__gedf2>:
 8010974:	f04f 3cff 	mov.w	ip, #4294967295
 8010978:	e006      	b.n	8010988 <__cmpdf2+0x4>
 801097a:	bf00      	nop

0801097c <__ledf2>:
 801097c:	f04f 0c01 	mov.w	ip, #1
 8010980:	e002      	b.n	8010988 <__cmpdf2+0x4>
 8010982:	bf00      	nop

08010984 <__cmpdf2>:
 8010984:	f04f 0c01 	mov.w	ip, #1
 8010988:	f84d cd04 	str.w	ip, [sp, #-4]!
 801098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010998:	bf18      	it	ne
 801099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 801099e:	d01b      	beq.n	80109d8 <__cmpdf2+0x54>
 80109a0:	b001      	add	sp, #4
 80109a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80109a6:	bf0c      	ite	eq
 80109a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80109ac:	ea91 0f03 	teqne	r1, r3
 80109b0:	bf02      	ittt	eq
 80109b2:	ea90 0f02 	teqeq	r0, r2
 80109b6:	2000      	moveq	r0, #0
 80109b8:	4770      	bxeq	lr
 80109ba:	f110 0f00 	cmn.w	r0, #0
 80109be:	ea91 0f03 	teq	r1, r3
 80109c2:	bf58      	it	pl
 80109c4:	4299      	cmppl	r1, r3
 80109c6:	bf08      	it	eq
 80109c8:	4290      	cmpeq	r0, r2
 80109ca:	bf2c      	ite	cs
 80109cc:	17d8      	asrcs	r0, r3, #31
 80109ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80109d2:	f040 0001 	orr.w	r0, r0, #1
 80109d6:	4770      	bx	lr
 80109d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80109dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109e0:	d102      	bne.n	80109e8 <__cmpdf2+0x64>
 80109e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80109e6:	d107      	bne.n	80109f8 <__cmpdf2+0x74>
 80109e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109f0:	d1d6      	bne.n	80109a0 <__cmpdf2+0x1c>
 80109f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80109f6:	d0d3      	beq.n	80109a0 <__cmpdf2+0x1c>
 80109f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop

08010a00 <__aeabi_cdrcmple>:
 8010a00:	4684      	mov	ip, r0
 8010a02:	4610      	mov	r0, r2
 8010a04:	4662      	mov	r2, ip
 8010a06:	468c      	mov	ip, r1
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4663      	mov	r3, ip
 8010a0c:	e000      	b.n	8010a10 <__aeabi_cdcmpeq>
 8010a0e:	bf00      	nop

08010a10 <__aeabi_cdcmpeq>:
 8010a10:	b501      	push	{r0, lr}
 8010a12:	f7ff ffb7 	bl	8010984 <__cmpdf2>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	bf48      	it	mi
 8010a1a:	f110 0f00 	cmnmi.w	r0, #0
 8010a1e:	bd01      	pop	{r0, pc}

08010a20 <__aeabi_dcmpeq>:
 8010a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a24:	f7ff fff4 	bl	8010a10 <__aeabi_cdcmpeq>
 8010a28:	bf0c      	ite	eq
 8010a2a:	2001      	moveq	r0, #1
 8010a2c:	2000      	movne	r0, #0
 8010a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a32:	bf00      	nop

08010a34 <__aeabi_dcmplt>:
 8010a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a38:	f7ff ffea 	bl	8010a10 <__aeabi_cdcmpeq>
 8010a3c:	bf34      	ite	cc
 8010a3e:	2001      	movcc	r0, #1
 8010a40:	2000      	movcs	r0, #0
 8010a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a46:	bf00      	nop

08010a48 <__aeabi_dcmple>:
 8010a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a4c:	f7ff ffe0 	bl	8010a10 <__aeabi_cdcmpeq>
 8010a50:	bf94      	ite	ls
 8010a52:	2001      	movls	r0, #1
 8010a54:	2000      	movhi	r0, #0
 8010a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a5a:	bf00      	nop

08010a5c <__aeabi_dcmpge>:
 8010a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a60:	f7ff ffce 	bl	8010a00 <__aeabi_cdrcmple>
 8010a64:	bf94      	ite	ls
 8010a66:	2001      	movls	r0, #1
 8010a68:	2000      	movhi	r0, #0
 8010a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a6e:	bf00      	nop

08010a70 <__aeabi_dcmpgt>:
 8010a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a74:	f7ff ffc4 	bl	8010a00 <__aeabi_cdrcmple>
 8010a78:	bf34      	ite	cc
 8010a7a:	2001      	movcc	r0, #1
 8010a7c:	2000      	movcs	r0, #0
 8010a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a82:	bf00      	nop

08010a84 <LED_Init>:
/* 1- Function Description -> Function Set The Mode Of Pin Output Take led structure                   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Init(const LedX_t *LED){
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]

	MGPIO_voidSetPinMode(LED->LED_port,LED->LED_Pin,MODE_OUTPUT);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	b2d8      	uxtb	r0, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	2201      	movs	r2, #1
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	f000 fa08 	bl	8010eb0 <MGPIO_voidSetPinMode>

}
 8010aa0:	bf00      	nop
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <LED_Off>:
/* 1- Function Description -> Function turn off the led       									  	   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void LED_Off(const LedX_t *LED){
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]

	MGPIO_voidWriteData(LED->LED_port,LED->LED_Pin,LOW);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	b2d8      	uxtb	r0, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	2200      	movs	r2, #0
 8010abe:	4619      	mov	r1, r3
 8010ac0:	f000 fa6e 	bl	8010fa0 <MGPIO_voidWriteData>

}
 8010ac4:	bf00      	nop
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <Led_Toggle>:
/* 1- Function Description -> Function toggle the led condition      								   */
/*                                                                                                     */
/* 2- Function Input       -> LedX_t *LED 									                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void Led_Toggle	(const LedX_t *LED){
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]

	MGPIO_voidToggleData(LED->LED_port,LED->LED_Pin);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	f000 fb2e 	bl	8011144 <MGPIO_voidToggleData>

}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <HAL_MOTOR_Init>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_Init(const MotorX_t *Motor){
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
	MRCC_voidEnablePeripheralClock(AHB1_BUS, Motor->Motor_Port_1);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	4619      	mov	r1, r3
 8010b00:	2000      	movs	r0, #0
 8010b02:	f000 fd43 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, Motor->Motor_Port_2);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	2000      	movs	r0, #0
 8010b10:	f000 fd3c 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode(Motor->Motor_Port_1,Motor->Motor_Pin_1, MODE_OUTPUT);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	b2d8      	uxtb	r0, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	2201      	movs	r2, #1
 8010b22:	4619      	mov	r1, r3
 8010b24:	f000 f9c4 	bl	8010eb0 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(Motor->Motor_Port_2,Motor->Motor_Pin_2, MODE_OUTPUT);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	b2d8      	uxtb	r0, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2201      	movs	r2, #1
 8010b36:	4619      	mov	r1, r3
 8010b38:	f000 f9ba 	bl	8010eb0 <MGPIO_voidSetPinMode>

	if(Motor->Motor_Timer==TIMER4){
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	691b      	ldr	r3, [r3, #16]
 8010b40:	2b04      	cmp	r3, #4
 8010b42:	d10a      	bne.n	8010b5a <HAL_MOTOR_Init+0x6a>
		MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOB);
 8010b44:	2101      	movs	r1, #1
 8010b46:	2000      	movs	r0, #0
 8010b48:	f000 fd20 	bl	801158c <MRCC_voidEnablePeripheralClock>
		MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM4) ;
 8010b4c:	2102      	movs	r1, #2
 8010b4e:	2002      	movs	r0, #2
 8010b50:	f000 fd1c 	bl	801158c <MRCC_voidEnablePeripheralClock>
		MTIMER_vStartTime(TIMER4);
 8010b54:	2004      	movs	r0, #4
 8010b56:	f000 fe63 	bl	8011820 <MTIMER_vStartTime>
	}
	else{
		//
	}
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <HAL_MOTOR_MOVE>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_MOVE(const MotorX_t *Motor ,u8 DIRCTION ,u8 SPEED){
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b082      	sub	sp, #8
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	70fb      	strb	r3, [r7, #3]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	70bb      	strb	r3, [r7, #2]

	switch(DIRCTION){
 8010b72:	78fb      	ldrb	r3, [r7, #3]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d006      	beq.n	8010b86 <HAL_MOTOR_MOVE+0x24>
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	dc45      	bgt.n	8010c08 <HAL_MOTOR_MOVE+0xa6>
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d02c      	beq.n	8010bda <HAL_MOTOR_MOVE+0x78>
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d015      	beq.n	8010bb0 <HAL_MOTOR_MOVE+0x4e>
 8010b84:	e040      	b.n	8010c08 <HAL_MOTOR_MOVE+0xa6>
	case BACKWARD :
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, HIGH);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	b2d8      	uxtb	r0, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	2201      	movs	r2, #1
 8010b94:	4619      	mov	r1, r3
 8010b96:	f000 fa03 	bl	8010fa0 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	b2d8      	uxtb	r0, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4619      	mov	r1, r3
 8010baa:	f000 f9f9 	bl	8010fa0 <MGPIO_voidWriteData>
		break;
 8010bae:	e02b      	b.n	8010c08 <HAL_MOTOR_MOVE+0xa6>
	case FORWARD:
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	b2d8      	uxtb	r0, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	f000 f9ee 	bl	8010fa0 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, HIGH);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	b2d8      	uxtb	r0, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	f000 f9e4 	bl	8010fa0 <MGPIO_voidWriteData>
		break;
 8010bd8:	e016      	b.n	8010c08 <HAL_MOTOR_MOVE+0xa6>
	case STOP:
		MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	b2d8      	uxtb	r0, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	2200      	movs	r2, #0
 8010be8:	4619      	mov	r1, r3
 8010bea:	f000 f9d9 	bl	8010fa0 <MGPIO_voidWriteData>
		MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	689b      	ldr	r3, [r3, #8]
 8010bf2:	b2d8      	uxtb	r0, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	f000 f9cf 	bl	8010fa0 <MGPIO_voidWriteData>
		SPEED=0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	70bb      	strb	r3, [r7, #2]
		break;
 8010c06:	bf00      	nop
	}

	MTIMER_vPWM(Motor->Motor_Timer, Motor->Motor_Chanel, 100, SPEED);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	b2d8      	uxtb	r0, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	695b      	ldr	r3, [r3, #20]
 8010c12:	b2d9      	uxtb	r1, r3
 8010c14:	78bb      	ldrb	r3, [r7, #2]
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	2264      	movs	r2, #100	; 0x64
 8010c1a:	f000 fe25 	bl	8011868 <MTIMER_vPWM>

}
 8010c1e:	bf00      	nop
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <HAL_MOTOR_STOP>:
/* 1- Function Description -> ***                  													   */
/*                                                                                                     */
/* 2- Function Input       -> *** 									                   				   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void HAL_MOTOR_STOP(const MotorX_t *Motor){
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b082      	sub	sp, #8
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
	MGPIO_voidWriteData(Motor->Motor_Port_1,Motor->Motor_Pin_1, LOW);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	b2d8      	uxtb	r0, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	f000 f9af 	bl	8010fa0 <MGPIO_voidWriteData>
	MGPIO_voidWriteData(Motor->Motor_Port_2,Motor->Motor_Pin_2, LOW);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	689b      	ldr	r3, [r3, #8]
 8010c46:	b2d8      	uxtb	r0, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	2200      	movs	r2, #0
 8010c50:	4619      	mov	r1, r3
 8010c52:	f000 f9a5 	bl	8010fa0 <MGPIO_voidWriteData>
	MTIMER_vPWM(Motor->Motor_Timer, Motor->Motor_Chanel, 100, 0);//--
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	691b      	ldr	r3, [r3, #16]
 8010c5a:	b2d8      	uxtb	r0, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	b2d9      	uxtb	r1, r3
 8010c62:	2300      	movs	r3, #0
 8010c64:	2264      	movs	r2, #100	; 0x64
 8010c66:	f000 fdff 	bl	8011868 <MTIMER_vPWM>
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <HSERVO_vServoInit>:
// Declare an array to store servo information for multiple servos
LOC_SERVO_channel=0 ;
LOC_SERVO_Timer=0 ;


void HSERVO_vServoInit(u8 Copy_u8TimerNum,u8 Copy_u8ChannelNum){
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	460a      	mov	r2, r1
 8010c7e:	71fb      	strb	r3, [r7, #7]
 8010c80:	4613      	mov	r3, r2
 8010c82:	71bb      	strb	r3, [r7, #6]
	MTIMER_vStartTime(Copy_u8TimerNum);
 8010c84:	79fb      	ldrb	r3, [r7, #7]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 fdca 	bl	8011820 <MTIMER_vStartTime>

	LOC_SERVO_Timer=Copy_u8TimerNum;
 8010c8c:	79fb      	ldrb	r3, [r7, #7]
 8010c8e:	4a04      	ldr	r2, [pc, #16]	; (8010ca0 <HSERVO_vServoInit+0x2c>)
 8010c90:	6013      	str	r3, [r2, #0]
	LOC_SERVO_channel=Copy_u8ChannelNum;
 8010c92:	79bb      	ldrb	r3, [r7, #6]
 8010c94:	4a03      	ldr	r2, [pc, #12]	; (8010ca4 <HSERVO_vServoInit+0x30>)
 8010c96:	6013      	str	r3, [r2, #0]

}
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	20000070 	.word	0x20000070
 8010ca4:	2000006c 	.word	0x2000006c

08010ca8 <HSERVO_vServoDeg>:
 * @brief Sets the angle of the servo motor specified by Copy_u8ServoNum to the desired degree.
 *
 * @param Copy_u8ServoNum: Enum_SERVO_NUM representing the servo number.
 * @param Copy_s8Deg: Desired angle in degrees (from -45 to 45).
 */
void HSERVO_vServoDeg( u8 Copy_s8Deg) {
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	71fb      	strb	r3, [r7, #7]
	// Calculate the positive duty cycle corresponding to the desired angle
	u16 Positive_Duty = (100/9)*Copy_s8Deg + 500;
 8010cb2:	79fb      	ldrb	r3, [r7, #7]
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	0092      	lsls	r2, r2, #2
 8010cba:	441a      	add	r2, r3
 8010cbc:	0052      	lsls	r2, r2, #1
 8010cbe:	4413      	add	r3, r2
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010cc6:	81fb      	strh	r3, [r7, #14]
	// Set the PWM signal to control the servo motor
	MTIMER_vPWM(LOC_SERVO_Timer, LOC_SERVO_channel, SERVO_FullPeriod, Positive_Duty);
 8010cc8:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <HSERVO_vServoDeg+0x40>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	b2d8      	uxtb	r0, r3
 8010cce:	4b07      	ldr	r3, [pc, #28]	; (8010cec <HSERVO_vServoDeg+0x44>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	b2d9      	uxtb	r1, r3
 8010cd4:	89fb      	ldrh	r3, [r7, #14]
 8010cd6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8010cda:	f000 fdc5 	bl	8011868 <MTIMER_vPWM>

}
 8010cde:	bf00      	nop
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20000070 	.word	0x20000070
 8010cec:	2000006c 	.word	0x2000006c

08010cf0 <HULTRA_vInitialize>:
// Array to store information for multiple Ultrasonic Sensors
LOC_ULTRA_NUM ULTRA_STRUCT[TOT_ULTRA_SONIC_NUM];


void HULTRA_vInitialize(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM, Enum_TIMER_NUM Copy_u8TimerNum, u8 Copy_u8ChannelNum)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	71fb      	strb	r3, [r7, #7]
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	71bb      	strb	r3, [r7, #6]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	717b      	strb	r3, [r7, #5]
    // Initialize the Input Capture Unit (ICU) of the specified timer and channel
    MTIMER_vICU(Copy_u8TimerNum, Copy_u8ChannelNum);
 8010d02:	797a      	ldrb	r2, [r7, #5]
 8010d04:	79bb      	ldrb	r3, [r7, #6]
 8010d06:	4611      	mov	r1, r2
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 ff0f 	bl	8011b2c <MTIMER_vICU>

    // Store the timer number and channel number in the ultrasonic sensor structure
    ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER = Copy_u8TimerNum;
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	4906      	ldr	r1, [pc, #24]	; (8010d2c <HULTRA_vInitialize+0x3c>)
 8010d12:	79ba      	ldrb	r2, [r7, #6]
 8010d14:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS = Copy_u8ChannelNum;
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	4a04      	ldr	r2, [pc, #16]	; (8010d2c <HULTRA_vInitialize+0x3c>)
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	797a      	ldrb	r2, [r7, #5]
 8010d22:	705a      	strb	r2, [r3, #1]
}
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	20000074 	.word	0x20000074

08010d30 <HULTRA_vSendTrigger>:


void HULTRA_vSendTrigger(const UltraSX_t *UltraS_t) {
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
	// Set the ultrasonic sensor trigger pin as OUTPUT
	MGPIO_voidSetPinMode(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, MODE_OUTPUT);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	b2d8      	uxtb	r0, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2201      	movs	r2, #1
 8010d46:	4619      	mov	r1, r3
 8010d48:	f000 f8b2 	bl	8010eb0 <MGPIO_voidSetPinMode>

	// Raise the ultrasonic sensor trigger pin to HIGH for a short duration
	MGPIO_vDirectSetReset(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, HIGH);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	b2d8      	uxtb	r0, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	2201      	movs	r2, #1
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	f000 fa62 	bl	8011224 <MGPIO_vDirectSetReset>
	_delay_us(10);  // Wait for "Trigger_Pulse_Width" milliseconds
 8010d60:	200a      	movs	r0, #10
 8010d62:	f000 fcef 	bl	8011744 <_delay_us>

	// Bring the ultrasonic sensor trigger pin back to LOW
	MGPIO_vDirectSetReset(UltraS_t->UltraS_Trigger_port, UltraS_t->UltraS_Trigger_Pin, LOW);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	b2d8      	uxtb	r0, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	2200      	movs	r2, #0
 8010d74:	4619      	mov	r1, r3
 8010d76:	f000 fa55 	bl	8011224 <MGPIO_vDirectSetReset>
	//_delay_us(250);//
}
 8010d7a:	bf00      	nop
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	0000      	movs	r0, r0
 8010d84:	0000      	movs	r0, r0
	...

08010d88 <HULTRA_vGetDistance>:


void HULTRA_vGetDistance(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM,f64* Copy_f64Distance) {
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	4603      	mov	r3, r0
 8010d90:	6039      	str	r1, [r7, #0]
 8010d92:	71fb      	strb	r3, [r7, #7]
	// Calculate distance based on timer values and assume speed of sound is 343 meters per second
	*Copy_f64Distance = ((f64)MTIMER_GET_ICU(ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER, ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS) / 2) * 3.43;
 8010d94:	79fb      	ldrb	r3, [r7, #7]
 8010d96:	4a18      	ldr	r2, [pc, #96]	; (8010df8 <HULTRA_vGetDistance+0x70>)
 8010d98:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	4916      	ldr	r1, [pc, #88]	; (8010df8 <HULTRA_vGetDistance+0x70>)
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	440b      	add	r3, r1
 8010da4:	785b      	ldrb	r3, [r3, #1]
 8010da6:	4619      	mov	r1, r3
 8010da8:	4610      	mov	r0, r2
 8010daa:	f001 f87f 	bl	8011eac <MTIMER_GET_ICU>
 8010dae:	4603      	mov	r3, r0
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff fb53 	bl	801045c <__aeabi_ui2d>
 8010db6:	f04f 0200 	mov.w	r2, #0
 8010dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010dbe:	f7ff fcf1 	bl	80107a4 <__aeabi_ddiv>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	4610      	mov	r0, r2
 8010dc8:	4619      	mov	r1, r3
 8010dca:	a309      	add	r3, pc, #36	; (adr r3, 8010df0 <HULTRA_vGetDistance+0x68>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ff fbbe 	bl	8010550 <__aeabi_dmul>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	6839      	ldr	r1, [r7, #0]
 8010dda:	e9c1 2300 	strd	r2, r3, [r1]
	_delay_ms(50);
 8010dde:	2032      	movs	r0, #50	; 0x32
 8010de0:	f000 fc94 	bl	801170c <_delay_ms>
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	f3af 8000 	nop.w
 8010df0:	d70a3d71 	.word	0xd70a3d71
 8010df4:	400b70a3 	.word	0x400b70a3
 8010df8:	20000074 	.word	0x20000074

08010dfc <EXTI0_IRQHandler>:

}
/*******************************************************************************************************/

void EXTI0_IRQHandler(void)								
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8010e00:	4b05      	ldr	r3, [pc, #20]	; (8010e18 <EXTI0_IRQHandler+0x1c>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_0 );					// With Out That It Will Do INT Alaways
 8010e06:	4b05      	ldr	r3, [pc, #20]	; (8010e1c <EXTI0_IRQHandler+0x20>)
 8010e08:	695b      	ldr	r3, [r3, #20]
 8010e0a:	4a04      	ldr	r2, [pc, #16]	; (8010e1c <EXTI0_IRQHandler+0x20>)
 8010e0c:	f043 0301 	orr.w	r3, r3, #1
 8010e10:	6153      	str	r3, [r2, #20]
}
 8010e12:	bf00      	nop
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20000080 	.word	0x20000080
 8010e1c:	40013c00 	.word	0x40013c00

08010e20 <EXTI1_IRQHandler>:

/*******************************************************************************************************/
void EXTI1_IRQHandler(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8010e24:	4b05      	ldr	r3, [pc, #20]	; (8010e3c <EXTI1_IRQHandler+0x1c>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_1 );					// With Out That It Will Do INT Alaways
 8010e2a:	4b05      	ldr	r3, [pc, #20]	; (8010e40 <EXTI1_IRQHandler+0x20>)
 8010e2c:	695b      	ldr	r3, [r3, #20]
 8010e2e:	4a04      	ldr	r2, [pc, #16]	; (8010e40 <EXTI1_IRQHandler+0x20>)
 8010e30:	f043 0302 	orr.w	r3, r3, #2
 8010e34:	6153      	str	r3, [r2, #20]
}
 8010e36:	bf00      	nop
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	20000084 	.word	0x20000084
 8010e40:	40013c00 	.word	0x40013c00

08010e44 <EXTI2_IRQHandler>:

/*******************************************************************************************************/
void EXTI2_IRQHandler(void)								
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	af00      	add	r7, sp, #0
	EXTI2_CallBack();
 8010e48:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <EXTI2_IRQHandler+0x1c>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_2 );					// With Out That It Will Do INT Alaways
 8010e4e:	4b05      	ldr	r3, [pc, #20]	; (8010e64 <EXTI2_IRQHandler+0x20>)
 8010e50:	695b      	ldr	r3, [r3, #20]
 8010e52:	4a04      	ldr	r2, [pc, #16]	; (8010e64 <EXTI2_IRQHandler+0x20>)
 8010e54:	f043 0304 	orr.w	r3, r3, #4
 8010e58:	6153      	str	r3, [r2, #20]
}
 8010e5a:	bf00      	nop
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	20000088 	.word	0x20000088
 8010e64:	40013c00 	.word	0x40013c00

08010e68 <EXTI3_IRQHandler>:

/*******************************************************************************************************/
void EXTI3_IRQHandler(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	af00      	add	r7, sp, #0
	EXTI3_CallBack();
 8010e6c:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <EXTI3_IRQHandler+0x1c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_3 );					// With Out That It Will Do INT Alaways
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <EXTI3_IRQHandler+0x20>)
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	4a04      	ldr	r2, [pc, #16]	; (8010e88 <EXTI3_IRQHandler+0x20>)
 8010e78:	f043 0308 	orr.w	r3, r3, #8
 8010e7c:	6153      	str	r3, [r2, #20]
}
 8010e7e:	bf00      	nop
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	2000008c 	.word	0x2000008c
 8010e88:	40013c00 	.word	0x40013c00

08010e8c <EXTI4_IRQHandler>:

/*******************************************************************************************************/
void EXTI4_IRQHandler(void)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
	EXTI4_CallBack();
 8010e90:	4b05      	ldr	r3, [pc, #20]	; (8010ea8 <EXTI4_IRQHandler+0x1c>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4798      	blx	r3
	SET_BIT( EXTI_Ptr->PR , LINE_4 );					// With Out That It Will Do INT Alaways
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <EXTI4_IRQHandler+0x20>)
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	4a04      	ldr	r2, [pc, #16]	; (8010eac <EXTI4_IRQHandler+0x20>)
 8010e9c:	f043 0310 	orr.w	r3, r3, #16
 8010ea0:	6153      	str	r3, [r2, #20]
}
 8010ea2:	bf00      	nop
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20000090 	.word	0x20000090
 8010eac:	40013c00 	.word	0x40013c00

08010eb0 <MGPIO_voidSetPinMode>:
#include "MGPIO_interface.h"
#include "MGPIO_config.h"
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/
void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	71fb      	strb	r3, [r7, #7]
 8010eba:	460b      	mov	r3, r1
 8010ebc:	71bb      	strb	r3, [r7, #6]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	2b05      	cmp	r3, #5
 8010ec6:	d857      	bhi.n	8010f78 <MGPIO_voidSetPinMode+0xc8>
 8010ec8:	a201      	add	r2, pc, #4	; (adr r2, 8010ed0 <MGPIO_voidSetPinMode+0x20>)
 8010eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ece:	bf00      	nop
 8010ed0:	08010ee9 	.word	0x08010ee9
 8010ed4:	08010f01 	.word	0x08010f01
 8010ed8:	08010f19 	.word	0x08010f19
 8010edc:	08010f31 	.word	0x08010f31
 8010ee0:	08010f49 	.word	0x08010f49
 8010ee4:	08010f61 	.word	0x08010f61
	{
	  case GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010ee8:	4b27      	ldr	r3, [pc, #156]	; (8010f88 <MGPIO_voidSetPinMode+0xd8>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	7979      	ldrb	r1, [r7, #5]
 8010eee:	79ba      	ldrb	r2, [r7, #6]
 8010ef0:	0052      	lsls	r2, r2, #1
 8010ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4a23      	ldr	r2, [pc, #140]	; (8010f88 <MGPIO_voidSetPinMode+0xd8>)
 8010efa:	430b      	orrs	r3, r1
 8010efc:	6013      	str	r3, [r2, #0]
 8010efe:	e03c      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  case GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010f00:	4b22      	ldr	r3, [pc, #136]	; (8010f8c <MGPIO_voidSetPinMode+0xdc>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	7979      	ldrb	r1, [r7, #5]
 8010f06:	79ba      	ldrb	r2, [r7, #6]
 8010f08:	0052      	lsls	r2, r2, #1
 8010f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8010f0e:	4611      	mov	r1, r2
 8010f10:	4a1e      	ldr	r2, [pc, #120]	; (8010f8c <MGPIO_voidSetPinMode+0xdc>)
 8010f12:	430b      	orrs	r3, r1
 8010f14:	6013      	str	r3, [r2, #0]
 8010f16:	e030      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  case GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010f18:	4b1d      	ldr	r3, [pc, #116]	; (8010f90 <MGPIO_voidSetPinMode+0xe0>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	7979      	ldrb	r1, [r7, #5]
 8010f1e:	79ba      	ldrb	r2, [r7, #6]
 8010f20:	0052      	lsls	r2, r2, #1
 8010f22:	fa01 f202 	lsl.w	r2, r1, r2
 8010f26:	4611      	mov	r1, r2
 8010f28:	4a19      	ldr	r2, [pc, #100]	; (8010f90 <MGPIO_voidSetPinMode+0xe0>)
 8010f2a:	430b      	orrs	r3, r1
 8010f2c:	6013      	str	r3, [r2, #0]
 8010f2e:	e024      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  case GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010f30:	4b18      	ldr	r3, [pc, #96]	; (8010f94 <MGPIO_voidSetPinMode+0xe4>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	7979      	ldrb	r1, [r7, #5]
 8010f36:	79ba      	ldrb	r2, [r7, #6]
 8010f38:	0052      	lsls	r2, r2, #1
 8010f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4a14      	ldr	r2, [pc, #80]	; (8010f94 <MGPIO_voidSetPinMode+0xe4>)
 8010f42:	430b      	orrs	r3, r1
 8010f44:	6013      	str	r3, [r2, #0]
 8010f46:	e018      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  case GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010f48:	4b13      	ldr	r3, [pc, #76]	; (8010f98 <MGPIO_voidSetPinMode+0xe8>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	7979      	ldrb	r1, [r7, #5]
 8010f4e:	79ba      	ldrb	r2, [r7, #6]
 8010f50:	0052      	lsls	r2, r2, #1
 8010f52:	fa01 f202 	lsl.w	r2, r1, r2
 8010f56:	4611      	mov	r1, r2
 8010f58:	4a0f      	ldr	r2, [pc, #60]	; (8010f98 <MGPIO_voidSetPinMode+0xe8>)
 8010f5a:	430b      	orrs	r3, r1
 8010f5c:	6013      	str	r3, [r2, #0]
 8010f5e:	e00c      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  case GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8010f60:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <MGPIO_voidSetPinMode+0xec>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	7979      	ldrb	r1, [r7, #5]
 8010f66:	79ba      	ldrb	r2, [r7, #6]
 8010f68:	0052      	lsls	r2, r2, #1
 8010f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8010f6e:	4611      	mov	r1, r2
 8010f70:	4a0a      	ldr	r2, [pc, #40]	; (8010f9c <MGPIO_voidSetPinMode+0xec>)
 8010f72:	430b      	orrs	r3, r1
 8010f74:	6013      	str	r3, [r2, #0]
 8010f76:	e000      	b.n	8010f7a <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 8010f78:	bf00      	nop
    }
}
 8010f7a:	bf00      	nop
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	40020000 	.word	0x40020000
 8010f8c:	40020400 	.word	0x40020400
 8010f90:	40020800 	.word	0x40020800
 8010f94:	40020c00 	.word	0x40020c00
 8010f98:	40021000 	.word	0x40021000
 8010f9c:	40021c00 	.word	0x40021c00

08010fa0 <MGPIO_voidWriteData>:
	return L_u8Data;
	
}
/*******************************************************************************************************/
void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	71fb      	strb	r3, [r7, #7]
 8010faa:	460b      	mov	r3, r1
 8010fac:	71bb      	strb	r3, [r7, #6]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	717b      	strb	r3, [r7, #5]

	if(Copy_u8State==HIGH)
 8010fb2:	797b      	ldrb	r3, [r7, #5]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d155      	bne.n	8011064 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	2b05      	cmp	r3, #5
 8010fbc:	f200 80ac 	bhi.w	8011118 <MGPIO_voidWriteData+0x178>
 8010fc0:	a201      	add	r2, pc, #4	; (adr r2, 8010fc8 <MGPIO_voidWriteData+0x28>)
 8010fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc6:	bf00      	nop
 8010fc8:	08010fe1 	.word	0x08010fe1
 8010fcc:	08010ff7 	.word	0x08010ff7
 8010fd0:	0801100d 	.word	0x0801100d
 8010fd4:	08011023 	.word	0x08011023
 8010fd8:	08011039 	.word	0x08011039
 8010fdc:	0801104f 	.word	0x0801104f
		{
		case GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8010fe0:	4b52      	ldr	r3, [pc, #328]	; (801112c <MGPIO_voidWriteData+0x18c>)
 8010fe2:	695b      	ldr	r3, [r3, #20]
 8010fe4:	79ba      	ldrb	r2, [r7, #6]
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8010fec:	4611      	mov	r1, r2
 8010fee:	4a4f      	ldr	r2, [pc, #316]	; (801112c <MGPIO_voidWriteData+0x18c>)
 8010ff0:	430b      	orrs	r3, r1
 8010ff2:	6153      	str	r3, [r2, #20]
 8010ff4:	e093      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8010ff6:	4b4e      	ldr	r3, [pc, #312]	; (8011130 <MGPIO_voidWriteData+0x190>)
 8010ff8:	695b      	ldr	r3, [r3, #20]
 8010ffa:	79ba      	ldrb	r2, [r7, #6]
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8011002:	4611      	mov	r1, r2
 8011004:	4a4a      	ldr	r2, [pc, #296]	; (8011130 <MGPIO_voidWriteData+0x190>)
 8011006:	430b      	orrs	r3, r1
 8011008:	6153      	str	r3, [r2, #20]
 801100a:	e088      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  SET_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 801100c:	4b49      	ldr	r3, [pc, #292]	; (8011134 <MGPIO_voidWriteData+0x194>)
 801100e:	695b      	ldr	r3, [r3, #20]
 8011010:	79ba      	ldrb	r2, [r7, #6]
 8011012:	2101      	movs	r1, #1
 8011014:	fa01 f202 	lsl.w	r2, r1, r2
 8011018:	4611      	mov	r1, r2
 801101a:	4a46      	ldr	r2, [pc, #280]	; (8011134 <MGPIO_voidWriteData+0x194>)
 801101c:	430b      	orrs	r3, r1
 801101e:	6153      	str	r3, [r2, #20]
 8011020:	e07d      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8011022:	4b45      	ldr	r3, [pc, #276]	; (8011138 <MGPIO_voidWriteData+0x198>)
 8011024:	695b      	ldr	r3, [r3, #20]
 8011026:	79ba      	ldrb	r2, [r7, #6]
 8011028:	2101      	movs	r1, #1
 801102a:	fa01 f202 	lsl.w	r2, r1, r2
 801102e:	4611      	mov	r1, r2
 8011030:	4a41      	ldr	r2, [pc, #260]	; (8011138 <MGPIO_voidWriteData+0x198>)
 8011032:	430b      	orrs	r3, r1
 8011034:	6153      	str	r3, [r2, #20]
 8011036:	e072      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8011038:	4b40      	ldr	r3, [pc, #256]	; (801113c <MGPIO_voidWriteData+0x19c>)
 801103a:	695b      	ldr	r3, [r3, #20]
 801103c:	79ba      	ldrb	r2, [r7, #6]
 801103e:	2101      	movs	r1, #1
 8011040:	fa01 f202 	lsl.w	r2, r1, r2
 8011044:	4611      	mov	r1, r2
 8011046:	4a3d      	ldr	r2, [pc, #244]	; (801113c <MGPIO_voidWriteData+0x19c>)
 8011048:	430b      	orrs	r3, r1
 801104a:	6153      	str	r3, [r2, #20]
 801104c:	e067      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 801104e:	4b3c      	ldr	r3, [pc, #240]	; (8011140 <MGPIO_voidWriteData+0x1a0>)
 8011050:	695b      	ldr	r3, [r3, #20]
 8011052:	79ba      	ldrb	r2, [r7, #6]
 8011054:	2101      	movs	r1, #1
 8011056:	fa01 f202 	lsl.w	r2, r1, r2
 801105a:	4611      	mov	r1, r2
 801105c:	4a38      	ldr	r2, [pc, #224]	; (8011140 <MGPIO_voidWriteData+0x1a0>)
 801105e:	430b      	orrs	r3, r1
 8011060:	6153      	str	r3, [r2, #20]
 8011062:	e05c      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 8011064:	79fb      	ldrb	r3, [r7, #7]
 8011066:	2b05      	cmp	r3, #5
 8011068:	d858      	bhi.n	801111c <MGPIO_voidWriteData+0x17c>
 801106a:	a201      	add	r2, pc, #4	; (adr r2, 8011070 <MGPIO_voidWriteData+0xd0>)
 801106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011070:	08011089 	.word	0x08011089
 8011074:	080110a1 	.word	0x080110a1
 8011078:	080110b9 	.word	0x080110b9
 801107c:	080110d1 	.word	0x080110d1
 8011080:	080110e9 	.word	0x080110e9
 8011084:	08011101 	.word	0x08011101
		{
		case GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8011088:	4b28      	ldr	r3, [pc, #160]	; (801112c <MGPIO_voidWriteData+0x18c>)
 801108a:	695b      	ldr	r3, [r3, #20]
 801108c:	79ba      	ldrb	r2, [r7, #6]
 801108e:	2101      	movs	r1, #1
 8011090:	fa01 f202 	lsl.w	r2, r1, r2
 8011094:	43d2      	mvns	r2, r2
 8011096:	4611      	mov	r1, r2
 8011098:	4a24      	ldr	r2, [pc, #144]	; (801112c <MGPIO_voidWriteData+0x18c>)
 801109a:	400b      	ands	r3, r1
 801109c:	6153      	str	r3, [r2, #20]
 801109e:	e03e      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80110a0:	4b23      	ldr	r3, [pc, #140]	; (8011130 <MGPIO_voidWriteData+0x190>)
 80110a2:	695b      	ldr	r3, [r3, #20]
 80110a4:	79ba      	ldrb	r2, [r7, #6]
 80110a6:	2101      	movs	r1, #1
 80110a8:	fa01 f202 	lsl.w	r2, r1, r2
 80110ac:	43d2      	mvns	r2, r2
 80110ae:	4611      	mov	r1, r2
 80110b0:	4a1f      	ldr	r2, [pc, #124]	; (8011130 <MGPIO_voidWriteData+0x190>)
 80110b2:	400b      	ands	r3, r1
 80110b4:	6153      	str	r3, [r2, #20]
 80110b6:	e032      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 80110b8:	4b1e      	ldr	r3, [pc, #120]	; (8011134 <MGPIO_voidWriteData+0x194>)
 80110ba:	695b      	ldr	r3, [r3, #20]
 80110bc:	79ba      	ldrb	r2, [r7, #6]
 80110be:	2101      	movs	r1, #1
 80110c0:	fa01 f202 	lsl.w	r2, r1, r2
 80110c4:	43d2      	mvns	r2, r2
 80110c6:	4611      	mov	r1, r2
 80110c8:	4a1a      	ldr	r2, [pc, #104]	; (8011134 <MGPIO_voidWriteData+0x194>)
 80110ca:	400b      	ands	r3, r1
 80110cc:	6153      	str	r3, [r2, #20]
 80110ce:	e026      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80110d0:	4b19      	ldr	r3, [pc, #100]	; (8011138 <MGPIO_voidWriteData+0x198>)
 80110d2:	695b      	ldr	r3, [r3, #20]
 80110d4:	79ba      	ldrb	r2, [r7, #6]
 80110d6:	2101      	movs	r1, #1
 80110d8:	fa01 f202 	lsl.w	r2, r1, r2
 80110dc:	43d2      	mvns	r2, r2
 80110de:	4611      	mov	r1, r2
 80110e0:	4a15      	ldr	r2, [pc, #84]	; (8011138 <MGPIO_voidWriteData+0x198>)
 80110e2:	400b      	ands	r3, r1
 80110e4:	6153      	str	r3, [r2, #20]
 80110e6:	e01a      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80110e8:	4b14      	ldr	r3, [pc, #80]	; (801113c <MGPIO_voidWriteData+0x19c>)
 80110ea:	695b      	ldr	r3, [r3, #20]
 80110ec:	79ba      	ldrb	r2, [r7, #6]
 80110ee:	2101      	movs	r1, #1
 80110f0:	fa01 f202 	lsl.w	r2, r1, r2
 80110f4:	43d2      	mvns	r2, r2
 80110f6:	4611      	mov	r1, r2
 80110f8:	4a10      	ldr	r2, [pc, #64]	; (801113c <MGPIO_voidWriteData+0x19c>)
 80110fa:	400b      	ands	r3, r1
 80110fc:	6153      	str	r3, [r2, #20]
 80110fe:	e00e      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		case GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8011100:	4b0f      	ldr	r3, [pc, #60]	; (8011140 <MGPIO_voidWriteData+0x1a0>)
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	79ba      	ldrb	r2, [r7, #6]
 8011106:	2101      	movs	r1, #1
 8011108:	fa01 f202 	lsl.w	r2, r1, r2
 801110c:	43d2      	mvns	r2, r2
 801110e:	4611      	mov	r1, r2
 8011110:	4a0b      	ldr	r2, [pc, #44]	; (8011140 <MGPIO_voidWriteData+0x1a0>)
 8011112:	400b      	ands	r3, r1
 8011114:	6153      	str	r3, [r2, #20]
 8011116:	e002      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 8011118:	bf00      	nop
 801111a:	e000      	b.n	801111e <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 801111c:	bf00      	nop
		}
	}
}
 801111e:	bf00      	nop
 8011120:	370c      	adds	r7, #12
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	40020000 	.word	0x40020000
 8011130:	40020400 	.word	0x40020400
 8011134:	40020800 	.word	0x40020800
 8011138:	40020c00 	.word	0x40020c00
 801113c:	40021000 	.word	0x40021000
 8011140:	40021c00 	.word	0x40021c00

08011144 <MGPIO_voidToggleData>:
/*******************************************************************************************************/
void MGPIO_voidToggleData(u8 Copy_u8PortName ,u8 Copy_u8PinNum)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	460a      	mov	r2, r1
 801114e:	71fb      	strb	r3, [r7, #7]
 8011150:	4613      	mov	r3, r2
 8011152:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8PortName)
 8011154:	79fb      	ldrb	r3, [r7, #7]
 8011156:	2b05      	cmp	r3, #5
 8011158:	d850      	bhi.n	80111fc <MGPIO_voidToggleData+0xb8>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <MGPIO_voidToggleData+0x1c>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011179 	.word	0x08011179
 8011164:	0801118f 	.word	0x0801118f
 8011168:	080111a5 	.word	0x080111a5
 801116c:	080111bb 	.word	0x080111bb
 8011170:	080111d1 	.word	0x080111d1
 8011174:	080111e7 	.word	0x080111e7
		{
		case GPIOA_PORT :  TOG_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8011178:	4b24      	ldr	r3, [pc, #144]	; (801120c <MGPIO_voidToggleData+0xc8>)
 801117a:	695b      	ldr	r3, [r3, #20]
 801117c:	79ba      	ldrb	r2, [r7, #6]
 801117e:	2101      	movs	r1, #1
 8011180:	fa01 f202 	lsl.w	r2, r1, r2
 8011184:	4611      	mov	r1, r2
 8011186:	4a21      	ldr	r2, [pc, #132]	; (801120c <MGPIO_voidToggleData+0xc8>)
 8011188:	404b      	eors	r3, r1
 801118a:	6153      	str	r3, [r2, #20]
 801118c:	e037      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		case GPIOB_PORT :  TOG_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 801118e:	4b20      	ldr	r3, [pc, #128]	; (8011210 <MGPIO_voidToggleData+0xcc>)
 8011190:	695b      	ldr	r3, [r3, #20]
 8011192:	79ba      	ldrb	r2, [r7, #6]
 8011194:	2101      	movs	r1, #1
 8011196:	fa01 f202 	lsl.w	r2, r1, r2
 801119a:	4611      	mov	r1, r2
 801119c:	4a1c      	ldr	r2, [pc, #112]	; (8011210 <MGPIO_voidToggleData+0xcc>)
 801119e:	404b      	eors	r3, r1
 80111a0:	6153      	str	r3, [r2, #20]
 80111a2:	e02c      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		case GPIOC_PORT :  TOG_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 80111a4:	4b1b      	ldr	r3, [pc, #108]	; (8011214 <MGPIO_voidToggleData+0xd0>)
 80111a6:	695b      	ldr	r3, [r3, #20]
 80111a8:	79ba      	ldrb	r2, [r7, #6]
 80111aa:	2101      	movs	r1, #1
 80111ac:	fa01 f202 	lsl.w	r2, r1, r2
 80111b0:	4611      	mov	r1, r2
 80111b2:	4a18      	ldr	r2, [pc, #96]	; (8011214 <MGPIO_voidToggleData+0xd0>)
 80111b4:	404b      	eors	r3, r1
 80111b6:	6153      	str	r3, [r2, #20]
 80111b8:	e021      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		case GPIOD_PORT :  TOG_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80111ba:	4b17      	ldr	r3, [pc, #92]	; (8011218 <MGPIO_voidToggleData+0xd4>)
 80111bc:	695b      	ldr	r3, [r3, #20]
 80111be:	79ba      	ldrb	r2, [r7, #6]
 80111c0:	2101      	movs	r1, #1
 80111c2:	fa01 f202 	lsl.w	r2, r1, r2
 80111c6:	4611      	mov	r1, r2
 80111c8:	4a13      	ldr	r2, [pc, #76]	; (8011218 <MGPIO_voidToggleData+0xd4>)
 80111ca:	404b      	eors	r3, r1
 80111cc:	6153      	str	r3, [r2, #20]
 80111ce:	e016      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		case GPIOE_PORT :  TOG_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80111d0:	4b12      	ldr	r3, [pc, #72]	; (801121c <MGPIO_voidToggleData+0xd8>)
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	79ba      	ldrb	r2, [r7, #6]
 80111d6:	2101      	movs	r1, #1
 80111d8:	fa01 f202 	lsl.w	r2, r1, r2
 80111dc:	4611      	mov	r1, r2
 80111de:	4a0f      	ldr	r2, [pc, #60]	; (801121c <MGPIO_voidToggleData+0xd8>)
 80111e0:	404b      	eors	r3, r1
 80111e2:	6153      	str	r3, [r2, #20]
 80111e4:	e00b      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		case GPIOH_PORT :  TOG_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 80111e6:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <MGPIO_voidToggleData+0xdc>)
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	79ba      	ldrb	r2, [r7, #6]
 80111ec:	2101      	movs	r1, #1
 80111ee:	fa01 f202 	lsl.w	r2, r1, r2
 80111f2:	4611      	mov	r1, r2
 80111f4:	4a0a      	ldr	r2, [pc, #40]	; (8011220 <MGPIO_voidToggleData+0xdc>)
 80111f6:	404b      	eors	r3, r1
 80111f8:	6153      	str	r3, [r2, #20]
 80111fa:	e000      	b.n	80111fe <MGPIO_voidToggleData+0xba>

		default : /*ERROR*/ break ;
 80111fc:	bf00      	nop
		}

}
 80111fe:	bf00      	nop
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	40020000 	.word	0x40020000
 8011210:	40020400 	.word	0x40020400
 8011214:	40020800 	.word	0x40020800
 8011218:	40020c00 	.word	0x40020c00
 801121c:	40021000 	.word	0x40021000
 8011220:	40021c00 	.word	0x40021c00

08011224 <MGPIO_vDirectSetReset>:
	
}

/*******************************************************************************************************/
void MGPIO_vDirectSetReset(u8 Copy_u8PortName , u8 Copy_u8PinNum, u8 Copy_u8State)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	4603      	mov	r3, r0
 801122c:	71fb      	strb	r3, [r7, #7]
 801122e:	460b      	mov	r3, r1
 8011230:	71bb      	strb	r3, [r7, #6]
 8011232:	4613      	mov	r3, r2
 8011234:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State == HIGH)
 8011236:	797b      	ldrb	r3, [r7, #5]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d13b      	bne.n	80112b4 <MGPIO_vDirectSetReset+0x90>
	{
		switch (Copy_u8PortName)
 801123c:	79fb      	ldrb	r3, [r7, #7]
 801123e:	2b05      	cmp	r3, #5
 8011240:	d878      	bhi.n	8011334 <MGPIO_vDirectSetReset+0x110>
 8011242:	a201      	add	r2, pc, #4	; (adr r2, 8011248 <MGPIO_vDirectSetReset+0x24>)
 8011244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011248:	08011261 	.word	0x08011261
 801124c:	0801126f 	.word	0x0801126f
 8011250:	0801127d 	.word	0x0801127d
 8011254:	0801128b 	.word	0x0801128b
 8011258:	08011299 	.word	0x08011299
 801125c:	080112a7 	.word	0x080112a7
		{
			case GPIOA_PORT: MGPIOA->BSRR = (1U<<Copy_u8PinNum); break;
 8011260:	79bb      	ldrb	r3, [r7, #6]
 8011262:	4a37      	ldr	r2, [pc, #220]	; (8011340 <MGPIO_vDirectSetReset+0x11c>)
 8011264:	2101      	movs	r1, #1
 8011266:	fa01 f303 	lsl.w	r3, r1, r3
 801126a:	6193      	str	r3, [r2, #24]
 801126c:	e062      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOB_PORT: MGPIOB->BSRR = (1U<<Copy_u8PinNum); break;
 801126e:	79bb      	ldrb	r3, [r7, #6]
 8011270:	4a34      	ldr	r2, [pc, #208]	; (8011344 <MGPIO_vDirectSetReset+0x120>)
 8011272:	2101      	movs	r1, #1
 8011274:	fa01 f303 	lsl.w	r3, r1, r3
 8011278:	6193      	str	r3, [r2, #24]
 801127a:	e05b      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOC_PORT: MGPIOC->BSRR = (1U<<Copy_u8PinNum); break;
 801127c:	79bb      	ldrb	r3, [r7, #6]
 801127e:	4a32      	ldr	r2, [pc, #200]	; (8011348 <MGPIO_vDirectSetReset+0x124>)
 8011280:	2101      	movs	r1, #1
 8011282:	fa01 f303 	lsl.w	r3, r1, r3
 8011286:	6193      	str	r3, [r2, #24]
 8011288:	e054      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOD_PORT: MGPIOD->BSRR = (1U<<Copy_u8PinNum); break;
 801128a:	79bb      	ldrb	r3, [r7, #6]
 801128c:	4a2f      	ldr	r2, [pc, #188]	; (801134c <MGPIO_vDirectSetReset+0x128>)
 801128e:	2101      	movs	r1, #1
 8011290:	fa01 f303 	lsl.w	r3, r1, r3
 8011294:	6193      	str	r3, [r2, #24]
 8011296:	e04d      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOE_PORT: MGPIOE->BSRR = (1U<<Copy_u8PinNum); break;
 8011298:	79bb      	ldrb	r3, [r7, #6]
 801129a:	4a2d      	ldr	r2, [pc, #180]	; (8011350 <MGPIO_vDirectSetReset+0x12c>)
 801129c:	2101      	movs	r1, #1
 801129e:	fa01 f303 	lsl.w	r3, r1, r3
 80112a2:	6193      	str	r3, [r2, #24]
 80112a4:	e046      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOH_PORT: MGPIOH->BSRR = (1U<<Copy_u8PinNum); break;
 80112a6:	79bb      	ldrb	r3, [r7, #6]
 80112a8:	4a2a      	ldr	r2, [pc, #168]	; (8011354 <MGPIO_vDirectSetReset+0x130>)
 80112aa:	2101      	movs	r1, #1
 80112ac:	fa01 f303 	lsl.w	r3, r1, r3
 80112b0:	6193      	str	r3, [r2, #24]
 80112b2:	e03f      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
		}
	}
	else
	{
		Copy_u8PinNum += 16;
 80112b4:	79bb      	ldrb	r3, [r7, #6]
 80112b6:	3310      	adds	r3, #16
 80112b8:	71bb      	strb	r3, [r7, #6]
		switch (Copy_u8PortName)
 80112ba:	79fb      	ldrb	r3, [r7, #7]
 80112bc:	2b05      	cmp	r3, #5
 80112be:	d839      	bhi.n	8011334 <MGPIO_vDirectSetReset+0x110>
 80112c0:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <MGPIO_vDirectSetReset+0xa4>)
 80112c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c6:	bf00      	nop
 80112c8:	080112e1 	.word	0x080112e1
 80112cc:	080112ef 	.word	0x080112ef
 80112d0:	080112fd 	.word	0x080112fd
 80112d4:	0801130b 	.word	0x0801130b
 80112d8:	08011319 	.word	0x08011319
 80112dc:	08011327 	.word	0x08011327
		{
			case GPIOA_PORT: MGPIOA->BSRR = (1U<<Copy_u8PinNum); break;
 80112e0:	79bb      	ldrb	r3, [r7, #6]
 80112e2:	4a17      	ldr	r2, [pc, #92]	; (8011340 <MGPIO_vDirectSetReset+0x11c>)
 80112e4:	2101      	movs	r1, #1
 80112e6:	fa01 f303 	lsl.w	r3, r1, r3
 80112ea:	6193      	str	r3, [r2, #24]
 80112ec:	e022      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOB_PORT: MGPIOB->BSRR = (1U<<Copy_u8PinNum); break;
 80112ee:	79bb      	ldrb	r3, [r7, #6]
 80112f0:	4a14      	ldr	r2, [pc, #80]	; (8011344 <MGPIO_vDirectSetReset+0x120>)
 80112f2:	2101      	movs	r1, #1
 80112f4:	fa01 f303 	lsl.w	r3, r1, r3
 80112f8:	6193      	str	r3, [r2, #24]
 80112fa:	e01b      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOC_PORT: MGPIOC->BSRR = (1U<<Copy_u8PinNum); break;
 80112fc:	79bb      	ldrb	r3, [r7, #6]
 80112fe:	4a12      	ldr	r2, [pc, #72]	; (8011348 <MGPIO_vDirectSetReset+0x124>)
 8011300:	2101      	movs	r1, #1
 8011302:	fa01 f303 	lsl.w	r3, r1, r3
 8011306:	6193      	str	r3, [r2, #24]
 8011308:	e014      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOD_PORT: MGPIOD->BSRR = (1U<<Copy_u8PinNum); break;
 801130a:	79bb      	ldrb	r3, [r7, #6]
 801130c:	4a0f      	ldr	r2, [pc, #60]	; (801134c <MGPIO_vDirectSetReset+0x128>)
 801130e:	2101      	movs	r1, #1
 8011310:	fa01 f303 	lsl.w	r3, r1, r3
 8011314:	6193      	str	r3, [r2, #24]
 8011316:	e00d      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOE_PORT: MGPIOE->BSRR = (1U<<Copy_u8PinNum); break;
 8011318:	79bb      	ldrb	r3, [r7, #6]
 801131a:	4a0d      	ldr	r2, [pc, #52]	; (8011350 <MGPIO_vDirectSetReset+0x12c>)
 801131c:	2101      	movs	r1, #1
 801131e:	fa01 f303 	lsl.w	r3, r1, r3
 8011322:	6193      	str	r3, [r2, #24]
 8011324:	e006      	b.n	8011334 <MGPIO_vDirectSetReset+0x110>
			case GPIOH_PORT: MGPIOH->BSRR = (1U<<Copy_u8PinNum); break;
 8011326:	79bb      	ldrb	r3, [r7, #6]
 8011328:	4a0a      	ldr	r2, [pc, #40]	; (8011354 <MGPIO_vDirectSetReset+0x130>)
 801132a:	2101      	movs	r1, #1
 801132c:	fa01 f303 	lsl.w	r3, r1, r3
 8011330:	6193      	str	r3, [r2, #24]
 8011332:	bf00      	nop
		}
	}
}
 8011334:	bf00      	nop
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	40020000 	.word	0x40020000
 8011344:	40020400 	.word	0x40020400
 8011348:	40020800 	.word	0x40020800
 801134c:	40020c00 	.word	0x40020c00
 8011350:	40021000 	.word	0x40021000
 8011354:	40021c00 	.word	0x40021c00

08011358 <MGPIO_voidSetPinAltFn>:
/*******************************************************************************************************/
void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	4603      	mov	r3, r0
 8011360:	71fb      	strb	r3, [r7, #7]
 8011362:	460b      	mov	r3, r1
 8011364:	71bb      	strb	r3, [r7, #6]
 8011366:	4613      	mov	r3, r2
 8011368:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 801136a:	79bb      	ldrb	r3, [r7, #6]
 801136c:	2b07      	cmp	r3, #7
 801136e:	d85b      	bhi.n	8011428 <MGPIO_voidSetPinAltFn+0xd0>
	{
		/* Alf pins 0:7 */
		switch(Copy_u8PortNum )
 8011370:	79fb      	ldrb	r3, [r7, #7]
 8011372:	2b05      	cmp	r3, #5
 8011374:	f200 80be 	bhi.w	80114f4 <MGPIO_voidSetPinAltFn+0x19c>
 8011378:	a201      	add	r2, pc, #4	; (adr r2, 8011380 <MGPIO_voidSetPinAltFn+0x28>)
 801137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801137e:	bf00      	nop
 8011380:	08011399 	.word	0x08011399
 8011384:	080113b1 	.word	0x080113b1
 8011388:	080113c9 	.word	0x080113c9
 801138c:	080113e1 	.word	0x080113e1
 8011390:	080113f9 	.word	0x080113f9
 8011394:	08011411 	.word	0x08011411
		{
			 case GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8011398:	4b5b      	ldr	r3, [pc, #364]	; (8011508 <MGPIO_voidSetPinAltFn+0x1b0>)
 801139a:	6a1b      	ldr	r3, [r3, #32]
 801139c:	7979      	ldrb	r1, [r7, #5]
 801139e:	79ba      	ldrb	r2, [r7, #6]
 80113a0:	0092      	lsls	r2, r2, #2
 80113a2:	fa01 f202 	lsl.w	r2, r1, r2
 80113a6:	4611      	mov	r1, r2
 80113a8:	4a57      	ldr	r2, [pc, #348]	; (8011508 <MGPIO_voidSetPinAltFn+0x1b0>)
 80113aa:	430b      	orrs	r3, r1
 80113ac:	6213      	str	r3, [r2, #32]
 80113ae:	e0a4      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80113b0:	4b56      	ldr	r3, [pc, #344]	; (801150c <MGPIO_voidSetPinAltFn+0x1b4>)
 80113b2:	6a1b      	ldr	r3, [r3, #32]
 80113b4:	7979      	ldrb	r1, [r7, #5]
 80113b6:	79ba      	ldrb	r2, [r7, #6]
 80113b8:	0092      	lsls	r2, r2, #2
 80113ba:	fa01 f202 	lsl.w	r2, r1, r2
 80113be:	4611      	mov	r1, r2
 80113c0:	4a52      	ldr	r2, [pc, #328]	; (801150c <MGPIO_voidSetPinAltFn+0x1b4>)
 80113c2:	430b      	orrs	r3, r1
 80113c4:	6213      	str	r3, [r2, #32]
 80113c6:	e098      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80113c8:	4b51      	ldr	r3, [pc, #324]	; (8011510 <MGPIO_voidSetPinAltFn+0x1b8>)
 80113ca:	6a1b      	ldr	r3, [r3, #32]
 80113cc:	7979      	ldrb	r1, [r7, #5]
 80113ce:	79ba      	ldrb	r2, [r7, #6]
 80113d0:	0092      	lsls	r2, r2, #2
 80113d2:	fa01 f202 	lsl.w	r2, r1, r2
 80113d6:	4611      	mov	r1, r2
 80113d8:	4a4d      	ldr	r2, [pc, #308]	; (8011510 <MGPIO_voidSetPinAltFn+0x1b8>)
 80113da:	430b      	orrs	r3, r1
 80113dc:	6213      	str	r3, [r2, #32]
 80113de:	e08c      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80113e0:	4b4c      	ldr	r3, [pc, #304]	; (8011514 <MGPIO_voidSetPinAltFn+0x1bc>)
 80113e2:	6a1b      	ldr	r3, [r3, #32]
 80113e4:	7979      	ldrb	r1, [r7, #5]
 80113e6:	79ba      	ldrb	r2, [r7, #6]
 80113e8:	0092      	lsls	r2, r2, #2
 80113ea:	fa01 f202 	lsl.w	r2, r1, r2
 80113ee:	4611      	mov	r1, r2
 80113f0:	4a48      	ldr	r2, [pc, #288]	; (8011514 <MGPIO_voidSetPinAltFn+0x1bc>)
 80113f2:	430b      	orrs	r3, r1
 80113f4:	6213      	str	r3, [r2, #32]
 80113f6:	e080      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80113f8:	4b47      	ldr	r3, [pc, #284]	; (8011518 <MGPIO_voidSetPinAltFn+0x1c0>)
 80113fa:	6a1b      	ldr	r3, [r3, #32]
 80113fc:	7979      	ldrb	r1, [r7, #5]
 80113fe:	79ba      	ldrb	r2, [r7, #6]
 8011400:	0092      	lsls	r2, r2, #2
 8011402:	fa01 f202 	lsl.w	r2, r1, r2
 8011406:	4611      	mov	r1, r2
 8011408:	4a43      	ldr	r2, [pc, #268]	; (8011518 <MGPIO_voidSetPinAltFn+0x1c0>)
 801140a:	430b      	orrs	r3, r1
 801140c:	6213      	str	r3, [r2, #32]
 801140e:	e074      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8011410:	4b42      	ldr	r3, [pc, #264]	; (801151c <MGPIO_voidSetPinAltFn+0x1c4>)
 8011412:	6a1b      	ldr	r3, [r3, #32]
 8011414:	7979      	ldrb	r1, [r7, #5]
 8011416:	79ba      	ldrb	r2, [r7, #6]
 8011418:	0092      	lsls	r2, r2, #2
 801141a:	fa01 f202 	lsl.w	r2, r1, r2
 801141e:	4611      	mov	r1, r2
 8011420:	4a3e      	ldr	r2, [pc, #248]	; (801151c <MGPIO_voidSetPinAltFn+0x1c4>)
 8011422:	430b      	orrs	r3, r1
 8011424:	6213      	str	r3, [r2, #32]
 8011426:	e068      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
		
	}
	/* Alf pins 8:15 */
	else
	{
	switch(Copy_u8PortNum )
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	2b05      	cmp	r3, #5
 801142c:	d864      	bhi.n	80114f8 <MGPIO_voidSetPinAltFn+0x1a0>
 801142e:	a201      	add	r2, pc, #4	; (adr r2, 8011434 <MGPIO_voidSetPinAltFn+0xdc>)
 8011430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011434:	0801144d 	.word	0x0801144d
 8011438:	08011469 	.word	0x08011469
 801143c:	08011485 	.word	0x08011485
 8011440:	080114a1 	.word	0x080114a1
 8011444:	080114bd 	.word	0x080114bd
 8011448:	080114d9 	.word	0x080114d9
		{
			 case GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 801144c:	4b2e      	ldr	r3, [pc, #184]	; (8011508 <MGPIO_voidSetPinAltFn+0x1b0>)
 801144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011450:	7979      	ldrb	r1, [r7, #5]
 8011452:	79ba      	ldrb	r2, [r7, #6]
 8011454:	f002 0207 	and.w	r2, r2, #7
 8011458:	0092      	lsls	r2, r2, #2
 801145a:	fa01 f202 	lsl.w	r2, r1, r2
 801145e:	4611      	mov	r1, r2
 8011460:	4a29      	ldr	r2, [pc, #164]	; (8011508 <MGPIO_voidSetPinAltFn+0x1b0>)
 8011462:	430b      	orrs	r3, r1
 8011464:	6253      	str	r3, [r2, #36]	; 0x24
 8011466:	e048      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8011468:	4b28      	ldr	r3, [pc, #160]	; (801150c <MGPIO_voidSetPinAltFn+0x1b4>)
 801146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801146c:	7979      	ldrb	r1, [r7, #5]
 801146e:	79ba      	ldrb	r2, [r7, #6]
 8011470:	f002 0207 	and.w	r2, r2, #7
 8011474:	0092      	lsls	r2, r2, #2
 8011476:	fa01 f202 	lsl.w	r2, r1, r2
 801147a:	4611      	mov	r1, r2
 801147c:	4a23      	ldr	r2, [pc, #140]	; (801150c <MGPIO_voidSetPinAltFn+0x1b4>)
 801147e:	430b      	orrs	r3, r1
 8011480:	6253      	str	r3, [r2, #36]	; 0x24
 8011482:	e03a      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8011484:	4b22      	ldr	r3, [pc, #136]	; (8011510 <MGPIO_voidSetPinAltFn+0x1b8>)
 8011486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011488:	7979      	ldrb	r1, [r7, #5]
 801148a:	79ba      	ldrb	r2, [r7, #6]
 801148c:	f002 0207 	and.w	r2, r2, #7
 8011490:	0092      	lsls	r2, r2, #2
 8011492:	fa01 f202 	lsl.w	r2, r1, r2
 8011496:	4611      	mov	r1, r2
 8011498:	4a1d      	ldr	r2, [pc, #116]	; (8011510 <MGPIO_voidSetPinAltFn+0x1b8>)
 801149a:	430b      	orrs	r3, r1
 801149c:	6253      	str	r3, [r2, #36]	; 0x24
 801149e:	e02c      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80114a0:	4b1c      	ldr	r3, [pc, #112]	; (8011514 <MGPIO_voidSetPinAltFn+0x1bc>)
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	7979      	ldrb	r1, [r7, #5]
 80114a6:	79ba      	ldrb	r2, [r7, #6]
 80114a8:	f002 0207 	and.w	r2, r2, #7
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	fa01 f202 	lsl.w	r2, r1, r2
 80114b2:	4611      	mov	r1, r2
 80114b4:	4a17      	ldr	r2, [pc, #92]	; (8011514 <MGPIO_voidSetPinAltFn+0x1bc>)
 80114b6:	430b      	orrs	r3, r1
 80114b8:	6253      	str	r3, [r2, #36]	; 0x24
 80114ba:	e01e      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80114bc:	4b16      	ldr	r3, [pc, #88]	; (8011518 <MGPIO_voidSetPinAltFn+0x1c0>)
 80114be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c0:	7979      	ldrb	r1, [r7, #5]
 80114c2:	79ba      	ldrb	r2, [r7, #6]
 80114c4:	f002 0207 	and.w	r2, r2, #7
 80114c8:	0092      	lsls	r2, r2, #2
 80114ca:	fa01 f202 	lsl.w	r2, r1, r2
 80114ce:	4611      	mov	r1, r2
 80114d0:	4a11      	ldr	r2, [pc, #68]	; (8011518 <MGPIO_voidSetPinAltFn+0x1c0>)
 80114d2:	430b      	orrs	r3, r1
 80114d4:	6253      	str	r3, [r2, #36]	; 0x24
 80114d6:	e010      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 case GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80114d8:	4b10      	ldr	r3, [pc, #64]	; (801151c <MGPIO_voidSetPinAltFn+0x1c4>)
 80114da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114dc:	7979      	ldrb	r1, [r7, #5]
 80114de:	79ba      	ldrb	r2, [r7, #6]
 80114e0:	f002 0207 	and.w	r2, r2, #7
 80114e4:	0092      	lsls	r2, r2, #2
 80114e6:	fa01 f202 	lsl.w	r2, r1, r2
 80114ea:	4611      	mov	r1, r2
 80114ec:	4a0b      	ldr	r2, [pc, #44]	; (801151c <MGPIO_voidSetPinAltFn+0x1c4>)
 80114ee:	430b      	orrs	r3, r1
 80114f0:	6253      	str	r3, [r2, #36]	; 0x24
 80114f2:	e002      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 80114f4:	bf00      	nop
 80114f6:	e000      	b.n	80114fa <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 80114f8:	bf00      	nop
		
		
	}

	
}
 80114fa:	bf00      	nop
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	40020000 	.word	0x40020000
 801150c:	40020400 	.word	0x40020400
 8011510:	40020800 	.word	0x40020800
 8011514:	40020c00 	.word	0x40020c00
 8011518:	40021000 	.word	0x40021000
 801151c:	40021c00 	.word	0x40021c00

08011520 <MNVIC_voidEnableInterrupt>:
/*******************************************************************************************************/
/*
* Function: Set The enable for any Peripheral
* Range :	Copy_u8PeripheralID -> 84 "Refer to data sheet" */
/*******************************************************************************************************/
void MNVIC_voidEnableInterrupt(u8 Copy_u8PeripheralID){
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]
	NVIC_REG->ISER[Copy_u8PeripheralID / Reg_div] = (1U << Copy_u8PeripheralID % Reg_div);
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	f003 031f 	and.w	r3, r3, #31
 8011530:	4907      	ldr	r1, [pc, #28]	; (8011550 <MNVIC_voidEnableInterrupt+0x30>)
 8011532:	79fa      	ldrb	r2, [r7, #7]
 8011534:	0952      	lsrs	r2, r2, #5
 8011536:	b2d2      	uxtb	r2, r2
 8011538:	4610      	mov	r0, r2
 801153a:	2201      	movs	r2, #1
 801153c:	fa02 f303 	lsl.w	r3, r2, r3
 8011540:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 8011544:	bf00      	nop
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	e000e100 	.word	0xe000e100

08011554 <MNVIC_voidDisableInterrupt>:
/*******************************************************************************************************/
/*
* Function: Set The enable for any Peripheral
* Range :	Copy_u8PeripheralID -> 84 "Refer to data sheet" */
/*******************************************************************************************************/
void MNVIC_voidDisableInterrupt(u8 Copy_u8PeripheralID){
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	71fb      	strb	r3, [r7, #7]
	NVIC_REG->ICER[Copy_u8PeripheralID / Reg_div] = (1U << Copy_u8PeripheralID % Reg_div);
 801155e:	79fb      	ldrb	r3, [r7, #7]
 8011560:	f003 031f 	and.w	r3, r3, #31
 8011564:	4908      	ldr	r1, [pc, #32]	; (8011588 <MNVIC_voidDisableInterrupt+0x34>)
 8011566:	79fa      	ldrb	r2, [r7, #7]
 8011568:	0952      	lsrs	r2, r2, #5
 801156a:	b2d2      	uxtb	r2, r2
 801156c:	4610      	mov	r0, r2
 801156e:	2201      	movs	r2, #1
 8011570:	409a      	lsls	r2, r3
 8011572:	f100 0320 	add.w	r3, r0, #32
 8011576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	
}
 801157a:	bf00      	nop
 801157c:	370c      	adds	r7, #12
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	e000e100 	.word	0xe000e100

0801158c <MRCC_voidEnablePeripheralClock>:
/*******************************************************************************************************/
/*                                      Functions Implementations                                      */
/*******************************************************************************************************/

void MRCC_voidEnablePeripheralClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	4603      	mov	r3, r0
 8011594:	460a      	mov	r2, r1
 8011596:	71fb      	strb	r3, [r7, #7]
 8011598:	4613      	mov	r3, r2
 801159a:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 801159c:	79fb      	ldrb	r3, [r7, #7]
 801159e:	2b03      	cmp	r3, #3
 80115a0:	d836      	bhi.n	8011610 <MRCC_voidEnablePeripheralClock+0x84>
 80115a2:	a201      	add	r2, pc, #4	; (adr r2, 80115a8 <MRCC_voidEnablePeripheralClock+0x1c>)
 80115a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a8:	080115b9 	.word	0x080115b9
 80115ac:	080115cf 	.word	0x080115cf
 80115b0:	080115e5 	.word	0x080115e5
 80115b4:	080115fb 	.word	0x080115fb
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 80115b8:	4b19      	ldr	r3, [pc, #100]	; (8011620 <MRCC_voidEnablePeripheralClock+0x94>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	79ba      	ldrb	r2, [r7, #6]
 80115be:	2101      	movs	r1, #1
 80115c0:	fa01 f202 	lsl.w	r2, r1, r2
 80115c4:	4611      	mov	r1, r2
 80115c6:	4a16      	ldr	r2, [pc, #88]	; (8011620 <MRCC_voidEnablePeripheralClock+0x94>)
 80115c8:	430b      	orrs	r3, r1
 80115ca:	6013      	str	r3, [r2, #0]
 80115cc:	e021      	b.n	8011612 <MRCC_voidEnablePeripheralClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 80115ce:	4b15      	ldr	r3, [pc, #84]	; (8011624 <MRCC_voidEnablePeripheralClock+0x98>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	79ba      	ldrb	r2, [r7, #6]
 80115d4:	2101      	movs	r1, #1
 80115d6:	fa01 f202 	lsl.w	r2, r1, r2
 80115da:	4611      	mov	r1, r2
 80115dc:	4a11      	ldr	r2, [pc, #68]	; (8011624 <MRCC_voidEnablePeripheralClock+0x98>)
 80115de:	430b      	orrs	r3, r1
 80115e0:	6013      	str	r3, [r2, #0]
 80115e2:	e016      	b.n	8011612 <MRCC_voidEnablePeripheralClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 80115e4:	4b10      	ldr	r3, [pc, #64]	; (8011628 <MRCC_voidEnablePeripheralClock+0x9c>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	79ba      	ldrb	r2, [r7, #6]
 80115ea:	2101      	movs	r1, #1
 80115ec:	fa01 f202 	lsl.w	r2, r1, r2
 80115f0:	4611      	mov	r1, r2
 80115f2:	4a0d      	ldr	r2, [pc, #52]	; (8011628 <MRCC_voidEnablePeripheralClock+0x9c>)
 80115f4:	430b      	orrs	r3, r1
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	e00b      	b.n	8011612 <MRCC_voidEnablePeripheralClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 80115fa:	4b0c      	ldr	r3, [pc, #48]	; (801162c <MRCC_voidEnablePeripheralClock+0xa0>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	79ba      	ldrb	r2, [r7, #6]
 8011600:	2101      	movs	r1, #1
 8011602:	fa01 f202 	lsl.w	r2, r1, r2
 8011606:	4611      	mov	r1, r2
 8011608:	4a08      	ldr	r2, [pc, #32]	; (801162c <MRCC_voidEnablePeripheralClock+0xa0>)
 801160a:	430b      	orrs	r3, r1
 801160c:	6013      	str	r3, [r2, #0]
 801160e:	e000      	b.n	8011612 <MRCC_voidEnablePeripheralClock+0x86>
		default :     /*   ERROR   */          break ;
 8011610:	bf00      	nop
		
	}
}
 8011612:	bf00      	nop
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	40023830 	.word	0x40023830
 8011624:	40023834 	.word	0x40023834
 8011628:	40023840 	.word	0x40023840
 801162c:	40023844 	.word	0x40023844

08011630 <MRCC_voidInitSystemClk>:
	
}
/*******************************************************************************************************/

void MRCC_voidInitSystemClk(void)
{
 8011630:	b480      	push	{r7}
 8011632:	af00      	add	r7, sp, #0
	/********** HSI **********/
#if CLKSRC == HSI 
	/* 1- EN HSI */
	SET_BIT(MRCC->CR , 0U);
 8011634:	4b0b      	ldr	r3, [pc, #44]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a0a      	ldr	r2, [pc, #40]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 801163a:	f043 0301 	orr.w	r3, r3, #1
 801163e:	6013      	str	r3, [r2, #0]
	/* 2- CLK SYS --> HSI */
	CLR_BIT(MRCC->CFGR, 0U);
 8011640:	4b08      	ldr	r3, [pc, #32]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	4a07      	ldr	r2, [pc, #28]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 8011646:	f023 0301 	bic.w	r3, r3, #1
 801164a:	6093      	str	r3, [r2, #8]
	CLR_BIT(MRCC->CFGR, 1U);
 801164c:	4b05      	ldr	r3, [pc, #20]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	4a04      	ldr	r2, [pc, #16]	; (8011664 <MRCC_voidInitSystemClk+0x34>)
 8011652:	f023 0302 	bic.w	r3, r3, #2
 8011656:	6093      	str	r3, [r2, #8]
/****************************************************/

#else 
/* Error*/
#endif // The End Of Big IF	
}
 8011658:	bf00      	nop
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	40023800 	.word	0x40023800

08011668 <MSTK_voidInit>:
static void (* MSTK_CallBack) (void) = NULL;
static u8	MSTK_u8ModeOfInterval;

/*******************************************************************************************************/
/*                                      01- MSTK_voidInit                                              */
void MSTK_voidInit( void ){
 8011668:	b480      	push	{r7}
 801166a:	af00      	add	r7, sp, #0

	#if CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB
	SET_BIT(MSTK->CTRL , CLKSOURCE);
	#elif CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB_DIV8
	CLR_BIT(MSTK->CTRL , CLKSOURCE);
 801166c:	4b05      	ldr	r3, [pc, #20]	; (8011684 <MSTK_voidInit+0x1c>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a04      	ldr	r2, [pc, #16]	; (8011684 <MSTK_voidInit+0x1c>)
 8011672:	f023 0304 	bic.w	r3, r3, #4
 8011676:	6013      	str	r3, [r2, #0]
	#endif
}
 8011678:	bf00      	nop
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	e000e010 	.word	0xe000e010

08011688 <MSTK_voidStart>:

/*******************************************************************************************************/
/*                                      02- MSTK_voidStart                                              */
void MSTK_voidStart( u32 Copy_PreloadValue ){
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]

	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue;
 8011690:	4a12      	ldr	r2, [pc, #72]	; (80116dc <MSTK_voidStart+0x54>)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6053      	str	r3, [r2, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 8011696:	4b11      	ldr	r3, [pc, #68]	; (80116dc <MSTK_voidStart+0x54>)
 8011698:	2200      	movs	r2, #0
 801169a:	609a      	str	r2, [r3, #8]
	/* Enable Systick    */
	SET_BIT( MSTK->CTRL , 0 );
 801169c:	4b0f      	ldr	r3, [pc, #60]	; (80116dc <MSTK_voidStart+0x54>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a0e      	ldr	r2, [pc, #56]	; (80116dc <MSTK_voidStart+0x54>)
 80116a2:	f043 0301 	orr.w	r3, r3, #1
 80116a6:	6013      	str	r3, [r2, #0]
	/*  POLL On the Counter Flag */
	while(GET_BIT( MSTK->CTRL , COUNTFLAG ) == 0);
 80116a8:	bf00      	nop
 80116aa:	4b0c      	ldr	r3, [pc, #48]	; (80116dc <MSTK_voidStart+0x54>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d0f9      	beq.n	80116aa <MSTK_voidStart+0x22>

	/*		Stop Timer 						*/
	CLR_BIT(MSTK->CTRL , 0);
 80116b6:	4b09      	ldr	r3, [pc, #36]	; (80116dc <MSTK_voidStart+0x54>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4a08      	ldr	r2, [pc, #32]	; (80116dc <MSTK_voidStart+0x54>)
 80116bc:	f023 0301 	bic.w	r3, r3, #1
 80116c0:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 80116c2:	4b06      	ldr	r3, [pc, #24]	; (80116dc <MSTK_voidStart+0x54>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 80116c8:	4b04      	ldr	r3, [pc, #16]	; (80116dc <MSTK_voidStart+0x54>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	609a      	str	r2, [r3, #8]

}
 80116ce:	bf00      	nop
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	e000e010 	.word	0xe000e010

080116e0 <MSTK_voidStopInterval>:

/*******************************************************************************************************/
/*                                      03- MSTK_voidStopInterval                                              */
void MSTK_voidStopInterval(void) 
{
 80116e0:	b480      	push	{r7}
 80116e2:	af00      	add	r7, sp, #0
    /*	Stop Timer 	*/
	CLR_BIT(MSTK->CTRL , 0);
 80116e4:	4b08      	ldr	r3, [pc, #32]	; (8011708 <MSTK_voidStopInterval+0x28>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4a07      	ldr	r2, [pc, #28]	; (8011708 <MSTK_voidStopInterval+0x28>)
 80116ea:	f023 0301 	bic.w	r3, r3, #1
 80116ee:	6013      	str	r3, [r2, #0]
	/* Clear Load Reload      */
	MSTK->LOAD = 0;
 80116f0:	4b05      	ldr	r3, [pc, #20]	; (8011708 <MSTK_voidStopInterval+0x28>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	605a      	str	r2, [r3, #4]
	/* Clear Val Register     */
	MSTK->VAL  = 0 ;
 80116f6:	4b04      	ldr	r3, [pc, #16]	; (8011708 <MSTK_voidStopInterval+0x28>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	609a      	str	r2, [r3, #8]
}
 80116fc:	bf00      	nop
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	e000e010 	.word	0xe000e010

0801170c <_delay_ms>:
	return local_u32ElapsedTime;
}

/*******************************************************************************************************/
/*                                      09- _delay_ms                                              */
void _delay_ms( u32 Copy_u32Time ){
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]

	MSTK_voidInit();
 8011714:	f7ff ffa8 	bl	8011668 <MSTK_voidInit>
	/*	1- Disable the Interrupt 	*/
	CLR_BIT(MSTK->CTRL , 1);
 8011718:	4b09      	ldr	r3, [pc, #36]	; (8011740 <_delay_ms+0x34>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a08      	ldr	r2, [pc, #32]	; (8011740 <_delay_ms+0x34>)
 801171e:	f023 0302 	bic.w	r3, r3, #2
 8011722:	6013      	str	r3, [r2, #0]
	
	MSTK_voidStart( Copy_u32Time * 2000 );
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801172a:	fb02 f303 	mul.w	r3, r2, r3
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff ffaa 	bl	8011688 <MSTK_voidStart>
	/*    Stop Timer      */
	MSTK_voidStopInterval();
 8011734:	f7ff ffd4 	bl	80116e0 <MSTK_voidStopInterval>

}
 8011738:	bf00      	nop
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	e000e010 	.word	0xe000e010

08011744 <_delay_us>:

}

/*******************************************************************************************************/
/*                                      11- _delay_us                                              */
void _delay_us( u32 Copy_u32Time ){
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]

	MSTK_voidInit();
 801174c:	f7ff ff8c 	bl	8011668 <MSTK_voidInit>
	/*	1- Disable the Interrupt 	*/
	CLR_BIT(MSTK->CTRL , 1);
 8011750:	4b08      	ldr	r3, [pc, #32]	; (8011774 <_delay_us+0x30>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a07      	ldr	r2, [pc, #28]	; (8011774 <_delay_us+0x30>)
 8011756:	f023 0302 	bic.w	r3, r3, #2
 801175a:	6013      	str	r3, [r2, #0]
	
	MSTK_voidStart( Copy_u32Time * 2);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff ff91 	bl	8011688 <MSTK_voidStart>
	/*    Stop Timer      */
	MSTK_voidStopInterval();
 8011766:	f7ff ffbb 	bl	80116e0 <MSTK_voidStopInterval>
}
 801176a:	bf00      	nop
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	e000e010 	.word	0xe000e010

08011778 <SysTick_Handler>:

/*******************************************************************************************************/
/*                                      //Core Peripheral                                              */

void	SysTick_Handler(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
	u8 Local_u8Temp = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	71fb      	strb	r3, [r7, #7]
	if(MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8011782:	4b14      	ldr	r3, [pc, #80]	; (80117d4 <SysTick_Handler+0x5c>)
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d111      	bne.n	80117ae <SysTick_Handler+0x36>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(MSTK->CTRL , 1);
 801178a:	4b13      	ldr	r3, [pc, #76]	; (80117d8 <SysTick_Handler+0x60>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a12      	ldr	r2, [pc, #72]	; (80117d8 <SysTick_Handler+0x60>)
 8011790:	f023 0302 	bic.w	r3, r3, #2
 8011794:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(MSTK->CTRL , 0);
 8011796:	4b10      	ldr	r3, [pc, #64]	; (80117d8 <SysTick_Handler+0x60>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a0f      	ldr	r2, [pc, #60]	; (80117d8 <SysTick_Handler+0x60>)
 801179c:	f023 0301 	bic.w	r3, r3, #1
 80117a0:	6013      	str	r3, [r2, #0]
			MSTK->LOAD	= 0;
 80117a2:	4b0d      	ldr	r3, [pc, #52]	; (80117d8 <SysTick_Handler+0x60>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	605a      	str	r2, [r3, #4]
			MSTK->VAL	= 0;
 80117a8:	4b0b      	ldr	r3, [pc, #44]	; (80117d8 <SysTick_Handler+0x60>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	609a      	str	r2, [r3, #8]
	}
	 /*Execute Action to be done after the time passed*/
	if(MSTK_CallBack !=NULL)
 80117ae:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <SysTick_Handler+0x64>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d002      	beq.n	80117bc <SysTick_Handler+0x44>
	{	
	MSTK_CallBack();
 80117b6:	4b09      	ldr	r3, [pc, #36]	; (80117dc <SysTick_Handler+0x64>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4798      	blx	r3
	}
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(MSTK->CTRL , COUNTFLAG);
 80117bc:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <SysTick_Handler+0x60>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	0c1b      	lsrs	r3, r3, #16
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	71fb      	strb	r3, [r7, #7]
}
 80117ca:	bf00      	nop
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	20000098 	.word	0x20000098
 80117d8:	e000e010 	.word	0xe000e010
 80117dc:	20000094 	.word	0x20000094

080117e0 <GET_TIMER>:

/*******************************************************************************************************/
/*                                      GET_TIMER Function                                         */
/*-----------------------------------------------------------------------------------------------------*/

static TIM2_5_MemMap_t* GET_TIMER(u32 Copy_u8TimerNum) {
 80117e0:	b4b0      	push	{r4, r5, r7}
 80117e2:	b08d      	sub	sp, #52	; 0x34
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	// Array containing the offsets of TIMER registers for different TIMers.
	u32 Timer_Offset[8] = TIMERS_OFFSET;
 80117e8:	4b0c      	ldr	r3, [pc, #48]	; (801181c <GET_TIMER+0x3c>)
 80117ea:	f107 040c 	add.w	r4, r7, #12
 80117ee:	461d      	mov	r5, r3
 80117f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80117f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Calculate the base address of the specified TIMER using its offset.
	TIM2_5_MemMap_t* TIMx = (TIM2_5_MemMap_t*)((u32)TIM2 + Timer_Offset[Copy_u8TimerNum - 1]);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3b01      	subs	r3, #1
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	3330      	adds	r3, #48	; 0x30
 8011804:	443b      	add	r3, r7
 8011806:	f853 3c24 	ldr.w	r3, [r3, #-36]
 801180a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801180e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Return the pointer to the memory-mapped structure of the specified TIMER.
	return TIMx;
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011812:	4618      	mov	r0, r3
 8011814:	3734      	adds	r7, #52	; 0x34
 8011816:	46bd      	mov	sp, r7
 8011818:	bcb0      	pop	{r4, r5, r7}
 801181a:	4770      	bx	lr
 801181c:	08012b60 	.word	0x08012b60

08011820 <MTIMER_vStartTime>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      01- MTIMER_vStartTime                                          */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vStartTime(Enum_TIMER_NUM Copy_u8TimerNum) {
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	4603      	mov	r3, r0
 8011828:	71fb      	strb	r3, [r7, #7]
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 801182a:	79fb      	ldrb	r3, [r7, #7]
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff ffd7 	bl	80117e0 <GET_TIMER>
 8011832:	60f8      	str	r0, [r7, #12]

	// Reset Control Register 1 Value
	TIMx->CR1 = 0;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2200      	movs	r2, #0
 8011838:	601a      	str	r2, [r3, #0]

	// Set the prescaler value to achieve a 1ms time base
	TIMx->PSC = SYS_CLOCK * 1000 - 1;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8011840:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the auto-reload value to MAX Value
	TIMx->ARR = 0xFFFFFFFF;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f04f 32ff 	mov.w	r2, #4294967295
 8011848:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Counter Enable bit to start the timer
	SET_BIT(TIMx->CR1, CEN);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f043 0201 	orr.w	r2, r3, #1
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	601a      	str	r2, [r3, #0]

	// Ensure Starting CNT from 0 as of some problems with TIMER2 and TIMER 5 if "ARR >0x0020000"
	TIMx->CNT = 0xFFFFFFFF;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f04f 32ff 	mov.w	r2, #4294967295
 801185c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801185e:	bf00      	nop
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <MTIMER_vPWM>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      05- MTIMER_vPWM                                       		   */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vPWM(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel,u16 Copy_u16TotalTime_uSec,u16 Copy_u16PositiveDutyCycle_uSec){
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	4604      	mov	r4, r0
 8011870:	4608      	mov	r0, r1
 8011872:	4611      	mov	r1, r2
 8011874:	461a      	mov	r2, r3
 8011876:	4623      	mov	r3, r4
 8011878:	71fb      	strb	r3, [r7, #7]
 801187a:	4603      	mov	r3, r0
 801187c:	71bb      	strb	r3, [r7, #6]
 801187e:	460b      	mov	r3, r1
 8011880:	80bb      	strh	r3, [r7, #4]
 8011882:	4613      	mov	r3, r2
 8011884:	807b      	strh	r3, [r7, #2]

	// Configure GPIO pins and alternative functions based on the selected timer and channel
	/*-----------------------------------------------------------------------------------------------------*/
	MGPIO_voidSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8011886:	79fb      	ldrb	r3, [r7, #7]
 8011888:	1e5a      	subs	r2, r3, #1
 801188a:	79bb      	ldrb	r3, [r7, #6]
 801188c:	3b01      	subs	r3, #1
 801188e:	49a2      	ldr	r1, [pc, #648]	; (8011b18 <MTIMER_vPWM+0x2b0>)
 8011890:	0092      	lsls	r2, r2, #2
 8011892:	440a      	add	r2, r1
 8011894:	4413      	add	r3, r2
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	1e5a      	subs	r2, r3, #1
 801189e:	79bb      	ldrb	r3, [r7, #6]
 80118a0:	3b01      	subs	r3, #1
 80118a2:	499e      	ldr	r1, [pc, #632]	; (8011b1c <MTIMER_vPWM+0x2b4>)
 80118a4:	0092      	lsls	r2, r2, #2
 80118a6:	440a      	add	r2, r1
 80118a8:	4413      	add	r3, r2
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinMode(
 80118ae:	2202      	movs	r2, #2
 80118b0:	4619      	mov	r1, r3
 80118b2:	f7ff fafd 	bl	8010eb0 <MGPIO_voidSetPinMode>
			MODE_ALTF
	);
	MGPIO_voidSetPinAltFn(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 80118b6:	79fb      	ldrb	r3, [r7, #7]
 80118b8:	1e5a      	subs	r2, r3, #1
 80118ba:	79bb      	ldrb	r3, [r7, #6]
 80118bc:	3b01      	subs	r3, #1
 80118be:	4996      	ldr	r1, [pc, #600]	; (8011b18 <MTIMER_vPWM+0x2b0>)
 80118c0:	0092      	lsls	r2, r2, #2
 80118c2:	440a      	add	r2, r1
 80118c4:	4413      	add	r3, r2
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 80118ca:	79fb      	ldrb	r3, [r7, #7]
 80118cc:	1e5a      	subs	r2, r3, #1
 80118ce:	79bb      	ldrb	r3, [r7, #6]
 80118d0:	3b01      	subs	r3, #1
 80118d2:	4992      	ldr	r1, [pc, #584]	; (8011b1c <MTIMER_vPWM+0x2b4>)
 80118d4:	0092      	lsls	r2, r2, #2
 80118d6:	440a      	add	r2, r1
 80118d8:	4413      	add	r3, r2
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 80118de:	79fb      	ldrb	r3, [r7, #7]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	4a8f      	ldr	r2, [pc, #572]	; (8011b20 <MTIMER_vPWM+0x2b8>)
 80118e4:	5cd3      	ldrb	r3, [r2, r3]
 80118e6:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinAltFn(
 80118e8:	461a      	mov	r2, r3
 80118ea:	f7ff fd35 	bl	8011358 <MGPIO_voidSetPinAltFn>
	);
	/*-----------------------------------------------------------------------------------------------------*/


	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 80118ee:	79fb      	ldrb	r3, [r7, #7]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff ff75 	bl	80117e0 <GET_TIMER>
 80118f6:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR); 		// UP COUNT
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f023 0210 	bic.w	r2, r3, #16
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0); 	// 00: Edge-aligned mode. The counter counts up
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f023 0220 	bic.w	r2, r3, #32
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1);     // 	   or down depending on the direction bit(DIR)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as output  "PWM"
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0+(((Copy_u8Channel-1)%2)*8)) );
 8011928:	79bb      	ldrb	r3, [r7, #6]
 801192a:	4a7e      	ldr	r2, [pc, #504]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 801192c:	fba2 2303 	umull	r2, r3, r2, r3
 8011930:	085b      	lsrs	r3, r3, #1
 8011932:	b2d8      	uxtb	r0, r3
 8011934:	4602      	mov	r2, r0
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3206      	adds	r2, #6
 801193a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801193e:	79bb      	ldrb	r3, [r7, #6]
 8011940:	3b01      	subs	r3, #1
 8011942:	2b00      	cmp	r3, #0
 8011944:	f003 0301 	and.w	r3, r3, #1
 8011948:	bfb8      	it	lt
 801194a:	425b      	neglt	r3, r3
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	2101      	movs	r1, #1
 8011950:	fa01 f303 	lsl.w	r3, r1, r3
 8011954:	43db      	mvns	r3, r3
 8011956:	ea02 0103 	and.w	r1, r2, r3
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	1d82      	adds	r2, r0, #6
 801195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1+(((Copy_u8Channel-1)%2)*8)) );
 8011962:	79bb      	ldrb	r3, [r7, #6]
 8011964:	4a6f      	ldr	r2, [pc, #444]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 8011966:	fba2 2303 	umull	r2, r3, r2, r3
 801196a:	085b      	lsrs	r3, r3, #1
 801196c:	b2d8      	uxtb	r0, r3
 801196e:	4602      	mov	r2, r0
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	3206      	adds	r2, #6
 8011974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011978:	79bb      	ldrb	r3, [r7, #6]
 801197a:	3b01      	subs	r3, #1
 801197c:	2b00      	cmp	r3, #0
 801197e:	f003 0301 	and.w	r3, r3, #1
 8011982:	bfb8      	it	lt
 8011984:	425b      	neglt	r3, r3
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	3301      	adds	r3, #1
 801198a:	2101      	movs	r1, #1
 801198c:	fa01 f303 	lsl.w	r3, r1, r3
 8011990:	43db      	mvns	r3, r3
 8011992:	ea02 0103 	and.w	r1, r2, r3
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	1d82      	adds	r2, r0, #6
 801199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	/* TIME Calculation of Total Period:
	 * Total_Period = (PSC / (SYS_CLOCK * 10^6)) * ARR
	 */
	TIMx->PSC = SYS_CLOCK*10-1;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	229f      	movs	r2, #159	; 0x9f
 80119a2:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = ( Copy_u16TotalTime_uSec*100 )/1000; // Timer auto-reload to max <<Periodic time>>
 80119a4:	88bb      	ldrh	r3, [r7, #4]
 80119a6:	4a60      	ldr	r2, [pc, #384]	; (8011b28 <MTIMER_vPWM+0x2c0>)
 80119a8:	fb82 1203 	smull	r1, r2, r2, r3
 80119ac:	1092      	asrs	r2, r2, #2
 80119ae:	17db      	asrs	r3, r3, #31
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	461a      	mov	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCR[Copy_u8Channel-1] = ( Copy_u16PositiveDutyCycle_uSec*100 )/1000; // << DUTY CYCLE >>
 80119b8:	887b      	ldrh	r3, [r7, #2]
 80119ba:	4a5b      	ldr	r2, [pc, #364]	; (8011b28 <MTIMER_vPWM+0x2c0>)
 80119bc:	fb82 1203 	smull	r1, r2, r2, r3
 80119c0:	1092      	asrs	r2, r2, #2
 80119c2:	17db      	asrs	r3, r3, #31
 80119c4:	1ad2      	subs	r2, r2, r3
 80119c6:	79bb      	ldrb	r3, [r7, #6]
 80119c8:	3b01      	subs	r3, #1
 80119ca:	4611      	mov	r1, r2
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	330c      	adds	r3, #12
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	6059      	str	r1, [r3, #4]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxPE+(((Copy_u8Channel-1)%2)*8)) );  //1: Preload register on TIMx_CCRx enabled
 80119d6:	79bb      	ldrb	r3, [r7, #6]
 80119d8:	4a52      	ldr	r2, [pc, #328]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 80119da:	fba2 2303 	umull	r2, r3, r2, r3
 80119de:	085b      	lsrs	r3, r3, #1
 80119e0:	b2d8      	uxtb	r0, r3
 80119e2:	4602      	mov	r2, r0
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	3206      	adds	r2, #6
 80119e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80119ec:	79bb      	ldrb	r3, [r7, #6]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	bfb8      	it	lt
 80119f8:	425b      	neglt	r3, r3
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	3303      	adds	r3, #3
 80119fe:	2101      	movs	r1, #1
 8011a00:	fa01 f303 	lsl.w	r3, r1, r3
 8011a04:	ea42 0103 	orr.w	r1, r2, r3
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	1d82      	adds	r2, r0, #6
 8011a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM0+(((Copy_u8Channel-1)%2)*8)) );// PWM Mode1 (high then low)
 8011a10:	79bb      	ldrb	r3, [r7, #6]
 8011a12:	4a44      	ldr	r2, [pc, #272]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 8011a14:	fba2 2303 	umull	r2, r3, r2, r3
 8011a18:	085b      	lsrs	r3, r3, #1
 8011a1a:	b2d8      	uxtb	r0, r3
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	3206      	adds	r2, #6
 8011a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a26:	79bb      	ldrb	r3, [r7, #6]
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f003 0301 	and.w	r3, r3, #1
 8011a30:	bfb8      	it	lt
 8011a32:	425b      	neglt	r3, r3
 8011a34:	00db      	lsls	r3, r3, #3
 8011a36:	3304      	adds	r3, #4
 8011a38:	2101      	movs	r1, #1
 8011a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a3e:	43db      	mvns	r3, r3
 8011a40:	ea02 0103 	and.w	r1, r2, r3
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	1d82      	adds	r2, r0, #6
 8011a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM1+(((Copy_u8Channel-1)%2)*8)) );
 8011a4c:	79bb      	ldrb	r3, [r7, #6]
 8011a4e:	4a35      	ldr	r2, [pc, #212]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 8011a50:	fba2 2303 	umull	r2, r3, r2, r3
 8011a54:	085b      	lsrs	r3, r3, #1
 8011a56:	b2d8      	uxtb	r0, r3
 8011a58:	4602      	mov	r2, r0
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	3206      	adds	r2, #6
 8011a5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a62:	79bb      	ldrb	r3, [r7, #6]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f003 0301 	and.w	r3, r3, #1
 8011a6c:	bfb8      	it	lt
 8011a6e:	425b      	neglt	r3, r3
 8011a70:	00db      	lsls	r3, r3, #3
 8011a72:	3305      	adds	r3, #5
 8011a74:	2101      	movs	r1, #1
 8011a76:	fa01 f303 	lsl.w	r3, r1, r3
 8011a7a:	ea42 0103 	orr.w	r1, r2, r3
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	1d82      	adds	r2, r0, #6
 8011a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM2+(((Copy_u8Channel-1)%2)*8)) );
 8011a86:	79bb      	ldrb	r3, [r7, #6]
 8011a88:	4a26      	ldr	r2, [pc, #152]	; (8011b24 <MTIMER_vPWM+0x2bc>)
 8011a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a8e:	085b      	lsrs	r3, r3, #1
 8011a90:	b2d8      	uxtb	r0, r3
 8011a92:	4602      	mov	r2, r0
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	3206      	adds	r2, #6
 8011a98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a9c:	79bb      	ldrb	r3, [r7, #6]
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f003 0301 	and.w	r3, r3, #1
 8011aa6:	bfb8      	it	lt
 8011aa8:	425b      	neglt	r3, r3
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	3306      	adds	r3, #6
 8011aae:	2101      	movs	r1, #1
 8011ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8011ab4:	ea42 0103 	orr.w	r1, r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	1d82      	adds	r2, r0, #6
 8011abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCER ,( CCxP + (Copy_u8Channel-1)*4) ); //Polarity 0: active high
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6a1b      	ldr	r3, [r3, #32]
 8011ac4:	79ba      	ldrb	r2, [r7, #6]
 8011ac6:	3a01      	subs	r2, #1
 8011ac8:	0092      	lsls	r2, r2, #2
 8011aca:	3201      	adds	r2, #1
 8011acc:	2101      	movs	r1, #1
 8011ace:	fa01 f202 	lsl.w	r2, r1, r2
 8011ad2:	43d2      	mvns	r2, r2
 8011ad4:	401a      	ands	r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	621a      	str	r2, [r3, #32]
	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER ,( CCxE + (Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6a1b      	ldr	r3, [r3, #32]
 8011ade:	79ba      	ldrb	r2, [r7, #6]
 8011ae0:	3a01      	subs	r2, #1
 8011ae2:	0092      	lsls	r2, r2, #2
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8011aea:	431a      	orrs	r2, r3
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx->RESERVED2 , 15 );// MOE 1: OC and OCN outputs are enabled
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	645a      	str	r2, [r3, #68]	; 0x44

	SET_BIT( TIMx->CR1 , CEN );// Enable timer
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f043 0201 	orr.w	r2, r3, #1
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	601a      	str	r2, [r3, #0]
	TIMx->CNT = 0xFFFFFFFF;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011b10:	bf00      	nop
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd90      	pop	{r4, r7, pc}
 8011b18:	20000000 	.word	0x20000000
 8011b1c:	20000020 	.word	0x20000020
 8011b20:	20000040 	.word	0x20000040
 8011b24:	aaaaaaab 	.word	0xaaaaaaab
 8011b28:	66666667 	.word	0x66666667

08011b2c <MTIMER_vICU>:


/*******************************************************************************************************/
/*                                      06- MTIMER_vICU                                       		   */
/*-----------------------------------------------------------------------------------------------------*/
void MTIMER_vICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel){
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	460a      	mov	r2, r1
 8011b36:	71fb      	strb	r3, [r7, #7]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	71bb      	strb	r3, [r7, #6]

	// Configure GPIO pins and alternative functions based on the selected timer and channel
	/*-----------------------------------------------------------------------------------------------------*/

	MGPIO_voidSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	1e5a      	subs	r2, r3, #1
 8011b40:	79bb      	ldrb	r3, [r7, #6]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	4999      	ldr	r1, [pc, #612]	; (8011dac <MTIMER_vICU+0x280>)
 8011b46:	0092      	lsls	r2, r2, #2
 8011b48:	440a      	add	r2, r1
 8011b4a:	4413      	add	r3, r2
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8011b50:	79fb      	ldrb	r3, [r7, #7]
 8011b52:	1e5a      	subs	r2, r3, #1
 8011b54:	79bb      	ldrb	r3, [r7, #6]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	4995      	ldr	r1, [pc, #596]	; (8011db0 <MTIMER_vICU+0x284>)
 8011b5a:	0092      	lsls	r2, r2, #2
 8011b5c:	440a      	add	r2, r1
 8011b5e:	4413      	add	r3, r2
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinMode(
 8011b64:	2202      	movs	r2, #2
 8011b66:	4619      	mov	r1, r3
 8011b68:	f7ff f9a2 	bl	8010eb0 <MGPIO_voidSetPinMode>
			MODE_ALTF
	);
	MGPIO_voidSetPinAltFn(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8011b6c:	79fb      	ldrb	r3, [r7, #7]
 8011b6e:	1e5a      	subs	r2, r3, #1
 8011b70:	79bb      	ldrb	r3, [r7, #6]
 8011b72:	3b01      	subs	r3, #1
 8011b74:	498d      	ldr	r1, [pc, #564]	; (8011dac <MTIMER_vICU+0x280>)
 8011b76:	0092      	lsls	r2, r2, #2
 8011b78:	440a      	add	r2, r1
 8011b7a:	4413      	add	r3, r2
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8011b80:	79fb      	ldrb	r3, [r7, #7]
 8011b82:	1e5a      	subs	r2, r3, #1
 8011b84:	79bb      	ldrb	r3, [r7, #6]
 8011b86:	3b01      	subs	r3, #1
 8011b88:	4989      	ldr	r1, [pc, #548]	; (8011db0 <MTIMER_vICU+0x284>)
 8011b8a:	0092      	lsls	r2, r2, #2
 8011b8c:	440a      	add	r2, r1
 8011b8e:	4413      	add	r3, r2
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 8011b94:	79fb      	ldrb	r3, [r7, #7]
 8011b96:	3b01      	subs	r3, #1
 8011b98:	4a86      	ldr	r2, [pc, #536]	; (8011db4 <MTIMER_vICU+0x288>)
 8011b9a:	5cd3      	ldrb	r3, [r2, r3]
 8011b9c:	b2db      	uxtb	r3, r3
	MGPIO_voidSetPinAltFn(
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	f7ff fbda 	bl	8011358 <MGPIO_voidSetPinAltFn>
	);
	/*-----------------------------------------------------------------------------------------------------*/


	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum);
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff fe1a 	bl	80117e0 <GET_TIMER>
 8011bac:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR ); 	// UP COUNT
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f023 0210 	bic.w	r2, r3, #16
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0 ); 	// 00: Edge-aligned mode. The counter counts up
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f023 0220 	bic.w	r2, r3, #32
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1 );    // 		or down depending on the direction bit(DIR)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as ICU
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0 + ( ((Copy_u8Channel-1)%2)*8)) );
 8011bde:	79bb      	ldrb	r3, [r7, #6]
 8011be0:	4a75      	ldr	r2, [pc, #468]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011be2:	fba2 2303 	umull	r2, r3, r2, r3
 8011be6:	085b      	lsrs	r3, r3, #1
 8011be8:	b2d8      	uxtb	r0, r3
 8011bea:	4602      	mov	r2, r0
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	3206      	adds	r2, #6
 8011bf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011bf4:	79bb      	ldrb	r3, [r7, #6]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	bfb8      	it	lt
 8011c00:	425b      	neglt	r3, r3
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	2101      	movs	r1, #1
 8011c06:	fa01 f303 	lsl.w	r3, r1, r3
 8011c0a:	ea42 0103 	orr.w	r1, r2, r3
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	1d82      	adds	r2, r0, #6
 8011c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1 + ( ((Copy_u8Channel-1)%2)*8)) );
 8011c16:	79bb      	ldrb	r3, [r7, #6]
 8011c18:	4a67      	ldr	r2, [pc, #412]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011c1e:	085b      	lsrs	r3, r3, #1
 8011c20:	b2d8      	uxtb	r0, r3
 8011c22:	4602      	mov	r2, r0
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	3206      	adds	r2, #6
 8011c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c2c:	79bb      	ldrb	r3, [r7, #6]
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f003 0301 	and.w	r3, r3, #1
 8011c36:	bfb8      	it	lt
 8011c38:	425b      	neglt	r3, r3
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	2101      	movs	r1, #1
 8011c40:	fa01 f303 	lsl.w	r3, r1, r3
 8011c44:	43db      	mvns	r3, r3
 8011c46:	ea02 0103 	and.w	r1, r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	1d82      	adds	r2, r0, #6
 8011c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//FILTERING
	SET_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF0 + ( ((Copy_u8Channel-1)%2)*8)));
 8011c52:	79bb      	ldrb	r3, [r7, #6]
 8011c54:	4a58      	ldr	r2, [pc, #352]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011c56:	fba2 2303 	umull	r2, r3, r2, r3
 8011c5a:	085b      	lsrs	r3, r3, #1
 8011c5c:	b2d8      	uxtb	r0, r3
 8011c5e:	4602      	mov	r2, r0
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	3206      	adds	r2, #6
 8011c64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c68:	79bb      	ldrb	r3, [r7, #6]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	bfb8      	it	lt
 8011c74:	425b      	neglt	r3, r3
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	3304      	adds	r3, #4
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c80:	ea42 0103 	orr.w	r1, r2, r3
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	1d82      	adds	r2, r0, #6
 8011c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF1 + ( ((Copy_u8Channel-1)%2)*8)));
 8011c8c:	79bb      	ldrb	r3, [r7, #6]
 8011c8e:	4a4a      	ldr	r2, [pc, #296]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011c90:	fba2 2303 	umull	r2, r3, r2, r3
 8011c94:	085b      	lsrs	r3, r3, #1
 8011c96:	b2d8      	uxtb	r0, r3
 8011c98:	4602      	mov	r2, r0
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3206      	adds	r2, #6
 8011c9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011ca2:	79bb      	ldrb	r3, [r7, #6]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f003 0301 	and.w	r3, r3, #1
 8011cac:	bfb8      	it	lt
 8011cae:	425b      	neglt	r3, r3
 8011cb0:	00db      	lsls	r3, r3, #3
 8011cb2:	3305      	adds	r3, #5
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8011cba:	ea42 0103 	orr.w	r1, r2, r3
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	1d82      	adds	r2, r0, #6
 8011cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF2 + ( ((Copy_u8Channel-1)%2)*8)));
 8011cc6:	79bb      	ldrb	r3, [r7, #6]
 8011cc8:	4a3b      	ldr	r2, [pc, #236]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011cca:	fba2 2303 	umull	r2, r3, r2, r3
 8011cce:	085b      	lsrs	r3, r3, #1
 8011cd0:	b2d8      	uxtb	r0, r3
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3206      	adds	r2, #6
 8011cd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011cdc:	79bb      	ldrb	r3, [r7, #6]
 8011cde:	3b01      	subs	r3, #1
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f003 0301 	and.w	r3, r3, #1
 8011ce6:	bfb8      	it	lt
 8011ce8:	425b      	neglt	r3, r3
 8011cea:	00db      	lsls	r3, r3, #3
 8011cec:	3306      	adds	r3, #6
 8011cee:	2101      	movs	r1, #1
 8011cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8011cf4:	43db      	mvns	r3, r3
 8011cf6:	ea02 0103 	and.w	r1, r2, r3
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	1d82      	adds	r2, r0, #6
 8011cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF3 + ( ((Copy_u8Channel-1)%2)*8)));
 8011d02:	79bb      	ldrb	r3, [r7, #6]
 8011d04:	4a2c      	ldr	r2, [pc, #176]	; (8011db8 <MTIMER_vICU+0x28c>)
 8011d06:	fba2 2303 	umull	r2, r3, r2, r3
 8011d0a:	085b      	lsrs	r3, r3, #1
 8011d0c:	b2d8      	uxtb	r0, r3
 8011d0e:	4602      	mov	r2, r0
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	3206      	adds	r2, #6
 8011d14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011d18:	79bb      	ldrb	r3, [r7, #6]
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f003 0301 	and.w	r3, r3, #1
 8011d22:	bfb8      	it	lt
 8011d24:	425b      	neglt	r3, r3
 8011d26:	00db      	lsls	r3, r3, #3
 8011d28:	3307      	adds	r3, #7
 8011d2a:	2101      	movs	r1, #1
 8011d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8011d30:	43db      	mvns	r3, r3
 8011d32:	ea02 0103 	and.w	r1, r2, r3
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	1d82      	adds	r2, r0, #6
 8011d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	TIMx -> PSC = (SYS_CLOCK * 100)-1;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f240 623f 	movw	r2, #1599	; 0x63f
 8011d44:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx -> ARR = 0xFFFFFFFF;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4c:	62da      	str	r2, [r3, #44]	; 0x2c

	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER  , ( CCxE + (Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	79ba      	ldrb	r2, [r7, #6]
 8011d54:	3a01      	subs	r2, #1
 8011d56:	0092      	lsls	r2, r2, #2
 8011d58:	2101      	movs	r1, #1
 8011d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8011d5e:	431a      	orrs	r2, r3
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	621a      	str	r2, [r3, #32]
	CLR_BIT( TIMx->CCER  , ( CCxP + (Copy_u8Channel-1)*4) );
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	6a1b      	ldr	r3, [r3, #32]
 8011d68:	79ba      	ldrb	r2, [r7, #6]
 8011d6a:	3a01      	subs	r2, #1
 8011d6c:	0092      	lsls	r2, r2, #2
 8011d6e:	3201      	adds	r2, #1
 8011d70:	2101      	movs	r1, #1
 8011d72:	fa01 f202 	lsl.w	r2, r1, r2
 8011d76:	43d2      	mvns	r2, r2
 8011d78:	401a      	ands	r2, r3
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx->DIER  , Copy_u8Channel );
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	79ba      	ldrb	r2, [r7, #6]
 8011d84:	2101      	movs	r1, #1
 8011d86:	fa01 f202 	lsl.w	r2, r1, r2
 8011d8a:	431a      	orrs	r2, r3
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	60da      	str	r2, [r3, #12]

	SET_BIT( TIMx->CR1   , CEN );// Enable timer
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f043 0201 	orr.w	r2, r3, #1
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	601a      	str	r2, [r3, #0]
	TIMx-> CNT = 0xFFFFFFFF;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011da2:	625a      	str	r2, [r3, #36]	; 0x24

}
 8011da4:	bf00      	nop
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	20000000 	.word	0x20000000
 8011db0:	20000020 	.word	0x20000020
 8011db4:	20000040 	.word	0x20000040
 8011db8:	aaaaaaab 	.word	0xaaaaaaab

08011dbc <LOC_TIMER_ICU>:
/*******************************************************************************************************/

/*******************************************************************************************************/
static void LOC_TIMER_ICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8ChannelNum) {
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	460a      	mov	r2, r1
 8011dc6:	71fb      	strb	r3, [r7, #7]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	71bb      	strb	r3, [r7, #6]
	static u8  captureState [29] = {0};
	static u32 captureValue1[29] = {0};
	static u32 captureValue2[29] = {0};
	TIM2_5_MemMap_t* TIMx = GET_TIMER(Copy_u8TimerNum+1);
 8011dcc:	79fb      	ldrb	r3, [r7, #7]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff fd05 	bl	80117e0 <GET_TIMER>
 8011dd6:	60f8      	str	r0, [r7, #12]
	if (captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] == 0) {
 8011dd8:	79fb      	ldrb	r3, [r7, #7]
 8011dda:	009a      	lsls	r2, r3, #2
 8011ddc:	79bb      	ldrb	r3, [r7, #6]
 8011dde:	4413      	add	r3, r2
 8011de0:	4a2e      	ldr	r2, [pc, #184]	; (8011e9c <LOC_TIMER_ICU+0xe0>)
 8011de2:	5cd3      	ldrb	r3, [r2, r3]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d11f      	bne.n	8011e28 <LOC_TIMER_ICU+0x6c>
		// Capture the time on the rising edge
		captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8011de8:	79bb      	ldrb	r3, [r7, #6]
 8011dea:	79fa      	ldrb	r2, [r7, #7]
 8011dec:	0091      	lsls	r1, r2, #2
 8011dee:	79ba      	ldrb	r2, [r7, #6]
 8011df0:	440a      	add	r2, r1
 8011df2:	68f9      	ldr	r1, [r7, #12]
 8011df4:	330c      	adds	r3, #12
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	440b      	add	r3, r1
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	4928      	ldr	r1, [pc, #160]	; (8011ea0 <LOC_TIMER_ICU+0xe4>)
 8011dfe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

		// Enable falling edge capture
		SET_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	6a1b      	ldr	r3, [r3, #32]
 8011e06:	79ba      	ldrb	r2, [r7, #6]
 8011e08:	0092      	lsls	r2, r2, #2
 8011e0a:	3201      	adds	r2, #1
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8011e12:	431a      	orrs	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	621a      	str	r2, [r3, #32]

		// Move to the next state
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 1;
 8011e18:	79fb      	ldrb	r3, [r7, #7]
 8011e1a:	009a      	lsls	r2, r3, #2
 8011e1c:	79bb      	ldrb	r3, [r7, #6]
 8011e1e:	4413      	add	r3, r2
 8011e20:	4a1e      	ldr	r2, [pc, #120]	; (8011e9c <LOC_TIMER_ICU+0xe0>)
 8011e22:	2101      	movs	r1, #1
 8011e24:	54d1      	strb	r1, [r2, r3]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];

		// Reset state value
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
	}
}
 8011e26:	e035      	b.n	8011e94 <LOC_TIMER_ICU+0xd8>
		captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = TIMx->CCR[Copy_u8ChannelNum];
 8011e28:	79bb      	ldrb	r3, [r7, #6]
 8011e2a:	79fa      	ldrb	r2, [r7, #7]
 8011e2c:	0091      	lsls	r1, r2, #2
 8011e2e:	79ba      	ldrb	r2, [r7, #6]
 8011e30:	440a      	add	r2, r1
 8011e32:	68f9      	ldr	r1, [r7, #12]
 8011e34:	330c      	adds	r3, #12
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	440b      	add	r3, r1
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	4919      	ldr	r1, [pc, #100]	; (8011ea4 <LOC_TIMER_ICU+0xe8>)
 8011e3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		CLR_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	6a1b      	ldr	r3, [r3, #32]
 8011e46:	79ba      	ldrb	r2, [r7, #6]
 8011e48:	0092      	lsls	r2, r2, #2
 8011e4a:	3201      	adds	r2, #1
 8011e4c:	2101      	movs	r1, #1
 8011e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8011e52:	43d2      	mvns	r2, r2
 8011e54:	401a      	ands	r2, r3
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	621a      	str	r2, [r3, #32]
		Time[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = captureValue2[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] - captureValue1[(4*Copy_u8TimerNum+Copy_u8ChannelNum)];
 8011e5a:	79fb      	ldrb	r3, [r7, #7]
 8011e5c:	009a      	lsls	r2, r3, #2
 8011e5e:	79bb      	ldrb	r3, [r7, #6]
 8011e60:	4413      	add	r3, r2
 8011e62:	4a10      	ldr	r2, [pc, #64]	; (8011ea4 <LOC_TIMER_ICU+0xe8>)
 8011e64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	009a      	lsls	r2, r3, #2
 8011e6c:	79bb      	ldrb	r3, [r7, #6]
 8011e6e:	4413      	add	r3, r2
 8011e70:	4a0b      	ldr	r2, [pc, #44]	; (8011ea0 <LOC_TIMER_ICU+0xe4>)
 8011e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011e76:	79fb      	ldrb	r3, [r7, #7]
 8011e78:	0098      	lsls	r0, r3, #2
 8011e7a:	79bb      	ldrb	r3, [r7, #6]
 8011e7c:	4403      	add	r3, r0
 8011e7e:	1a8a      	subs	r2, r1, r2
 8011e80:	4909      	ldr	r1, [pc, #36]	; (8011ea8 <LOC_TIMER_ICU+0xec>)
 8011e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		captureState[(4*Copy_u8TimerNum+Copy_u8ChannelNum)] = 0;
 8011e86:	79fb      	ldrb	r3, [r7, #7]
 8011e88:	009a      	lsls	r2, r3, #2
 8011e8a:	79bb      	ldrb	r3, [r7, #6]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	4a03      	ldr	r2, [pc, #12]	; (8011e9c <LOC_TIMER_ICU+0xe0>)
 8011e90:	2100      	movs	r1, #0
 8011e92:	54d1      	strb	r1, [r2, r3]
}
 8011e94:	bf00      	nop
 8011e96:	3710      	adds	r7, #16
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	20000130 	.word	0x20000130
 8011ea0:	20000150 	.word	0x20000150
 8011ea4:	200001c4 	.word	0x200001c4
 8011ea8:	200000bc 	.word	0x200000bc

08011eac <MTIMER_GET_ICU>:
/*******************************************************************************************************/

/*******************************************************************************************************/
/*                                      07- MTIMER_GET_ICU                                       	   */
/*-----------------------------------------------------------------------------------------------------*/
u32 MTIMER_GET_ICU(Enum_TIMER_NUM Copy_u8TimerNum, Enum_TIMER_CHs Copy_u8Channel) {
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	460a      	mov	r2, r1
 8011eb6:	71fb      	strb	r3, [r7, #7]
 8011eb8:	4613      	mov	r3, r2
 8011eba:	71bb      	strb	r3, [r7, #6]
	return Time[(4 * (Copy_u8TimerNum - 1) + (Copy_u8Channel - 1))];//return Time[(4 * (Copy_u8TimerNum - 1) + Copy_u8Channel)];
 8011ebc:	79fb      	ldrb	r3, [r7, #7]
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	009a      	lsls	r2, r3, #2
 8011ec2:	79bb      	ldrb	r3, [r7, #6]
 8011ec4:	3b01      	subs	r3, #1
 8011ec6:	4413      	add	r3, r2
 8011ec8:	4a04      	ldr	r2, [pc, #16]	; (8011edc <MTIMER_GET_ICU+0x30>)
 8011eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	370c      	adds	r7, #12
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	200000bc 	.word	0x200000bc

08011ee0 <TIM1_UP_TIM10_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 or TIM10 triggers an interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	af00      	add	r7, sp, #0
	// Check if the update interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 0)) {
 8011ee4:	4b1f      	ldr	r3, [pc, #124]	; (8011f64 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	f003 0301 	and.w	r3, r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00d      	beq.n	8011f0c <TIM1_UP_TIM10_IRQHandler+0x2c>

		// Check if a callback function is registered for TIM1
		if (GLOBAL_Ptr[0] != NULL) {
 8011ef0:	4b1d      	ldr	r3, [pc, #116]	; (8011f68 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d002      	beq.n	8011efe <TIM1_UP_TIM10_IRQHandler+0x1e>
			// Call the callback function for TIM1
			GLOBAL_Ptr[0]();
 8011ef8:	4b1b      	ldr	r3, [pc, #108]	; (8011f68 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM1
		CLR_BIT(TIM1->SR, 0);
 8011efe:	4b19      	ldr	r3, [pc, #100]	; (8011f64 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	4a18      	ldr	r2, [pc, #96]	; (8011f64 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8011f04:	f023 0301 	bic.w	r3, r3, #1
 8011f08:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM10 without calling a callback function
				CLR_BIT(TIM10->SR, 0);
			}
		}
	}
}
 8011f0a:	e029      	b.n	8011f60 <TIM1_UP_TIM10_IRQHandler+0x80>
		if (GET_BIT(TIM10->SR, 1)) {
 8011f0c:	4b17      	ldr	r3, [pc, #92]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f0e:	691b      	ldr	r3, [r3, #16]
 8011f10:	f003 0302 	and.w	r3, r3, #2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d009      	beq.n	8011f2c <TIM1_UP_TIM10_IRQHandler+0x4c>
			LOC_TIMER_ICU(TIMER10 - 1, CH1 - 1);
 8011f18:	2100      	movs	r1, #0
 8011f1a:	2006      	movs	r0, #6
 8011f1c:	f7ff ff4e 	bl	8011dbc <LOC_TIMER_ICU>
			CLR_BIT(TIM10->SR, CH1);
 8011f20:	4b12      	ldr	r3, [pc, #72]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	4a11      	ldr	r2, [pc, #68]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f26:	f023 0302 	bic.w	r3, r3, #2
 8011f2a:	6113      	str	r3, [r2, #16]
		if (GET_BIT(TIM10->SR, 0)) {
 8011f2c:	4b0f      	ldr	r3, [pc, #60]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	f003 0301 	and.w	r3, r3, #1
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d013      	beq.n	8011f60 <TIM1_UP_TIM10_IRQHandler+0x80>
			if (GLOBAL_Ptr[6] != NULL) {
 8011f38:	4b0b      	ldr	r3, [pc, #44]	; (8011f68 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8011f3a:	699b      	ldr	r3, [r3, #24]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d009      	beq.n	8011f54 <TIM1_UP_TIM10_IRQHandler+0x74>
				GLOBAL_Ptr[6]();
 8011f40:	4b09      	ldr	r3, [pc, #36]	; (8011f68 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8011f42:	699b      	ldr	r3, [r3, #24]
 8011f44:	4798      	blx	r3
				CLR_BIT(TIM10->SR, 0);
 8011f46:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	4a08      	ldr	r2, [pc, #32]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f4c:	f023 0301 	bic.w	r3, r3, #1
 8011f50:	6113      	str	r3, [r2, #16]
}
 8011f52:	e005      	b.n	8011f60 <TIM1_UP_TIM10_IRQHandler+0x80>
				CLR_BIT(TIM10->SR, 0);
 8011f54:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f56:	691b      	ldr	r3, [r3, #16]
 8011f58:	4a04      	ldr	r2, [pc, #16]	; (8011f6c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8011f5a:	f023 0301 	bic.w	r3, r3, #1
 8011f5e:	6113      	str	r3, [r2, #16]
}
 8011f60:	bf00      	nop
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	40010000 	.word	0x40010000
 8011f68:	2000009c 	.word	0x2000009c
 8011f6c:	40014400 	.word	0x40014400

08011f70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 triggers a trigger/completion or TIM11 triggers an interrupt.
 */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8011f70:	b580      	push	{r7, lr}
 8011f72:	af00      	add	r7, sp, #0

	// Check if the trigger interrupt or COM interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 5) || GET_BIT(TIM1->SR, 6)) {
 8011f74:	4b1b      	ldr	r3, [pc, #108]	; (8011fe4 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	f003 0320 	and.w	r3, r3, #32
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d12f      	bne.n	8011fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
 8011f80:	4b18      	ldr	r3, [pc, #96]	; (8011fe4 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d129      	bne.n	8011fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
		// Handle TIMER1 trigger or COM interrupt
		// Add the necessary code or call a function for TIMER1 trigger or COM handling
	}
	else {
		// Check if the capture/compare interrupt flag for CH1 of TIM11 is set
		if (GET_BIT(TIM11->SR, 1)) {
 8011f8c:	4b16      	ldr	r3, [pc, #88]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	f003 0302 	and.w	r3, r3, #2
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d009      	beq.n	8011fac <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM11
			LOC_TIMER_ICU(TIMER11 - 1, CH1 - 1);
 8011f98:	2100      	movs	r1, #0
 8011f9a:	2007      	movs	r0, #7
 8011f9c:	f7ff ff0e 	bl	8011dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM11
			CLR_BIT(TIM11->SR, CH1);
 8011fa0:	4b11      	ldr	r3, [pc, #68]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fa2:	691b      	ldr	r3, [r3, #16]
 8011fa4:	4a10      	ldr	r2, [pc, #64]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fa6:	f023 0302 	bic.w	r3, r3, #2
 8011faa:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM11 is set
		if (GET_BIT(TIM11->SR, 0)) {
 8011fac:	4b0e      	ldr	r3, [pc, #56]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fae:	691b      	ldr	r3, [r3, #16]
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d013      	beq.n	8011fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>

			// Check if a callback function is registered for TIM11 (at index 7 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[7] != NULL) {
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8011fba:	69db      	ldr	r3, [r3, #28]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d009      	beq.n	8011fd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>

				// Call the callback function for TIM11
				GLOBAL_Ptr[7]();
 8011fc0:	4b0a      	ldr	r3, [pc, #40]	; (8011fec <TIM1_TRG_COM_TIM11_IRQHandler+0x7c>)
 8011fc2:	69db      	ldr	r3, [r3, #28]
 8011fc4:	4798      	blx	r3

				// Clear the update interrupt flag of TIM11
				CLR_BIT(TIM11->SR, 0);
 8011fc6:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fc8:	691b      	ldr	r3, [r3, #16]
 8011fca:	4a07      	ldr	r2, [pc, #28]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fcc:	f023 0301 	bic.w	r3, r3, #1
 8011fd0:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM11 without calling a callback function
				CLR_BIT(TIM11->SR, 0);
			}
		}
	}
}
 8011fd2:	e005      	b.n	8011fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>
				CLR_BIT(TIM11->SR, 0);
 8011fd4:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fd6:	691b      	ldr	r3, [r3, #16]
 8011fd8:	4a03      	ldr	r2, [pc, #12]	; (8011fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x78>)
 8011fda:	f023 0301 	bic.w	r3, r3, #1
 8011fde:	6113      	str	r3, [r2, #16]
}
 8011fe0:	bf00      	nop
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	40010000 	.word	0x40010000
 8011fe8:	40014800 	.word	0x40014800
 8011fec:	2000009c 	.word	0x2000009c

08011ff0 <TIM1_BRK_TIM9_IRQHandler>:

/*******************************************************************************************************/
/*
 * @note    This function is called when either TIM1 triggers a break interrupt or TIM9 triggers an interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	af00      	add	r7, sp, #0
	// Check if the break interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 7)) {
 8011ff4:	4b21      	ldr	r3, [pc, #132]	; (801207c <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8011ff6:	691b      	ldr	r3, [r3, #16]
 8011ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d13a      	bne.n	8012076 <TIM1_BRK_TIM9_IRQHandler+0x86>
		// Add the necessary code or call a function for TIMER1 break handling
	}
	else {

		// Check if the capture/compare interrupt flag for CH1 of TIM9 is set
		if (GET_BIT(TIM9->SR, 1)) {
 8012000:	4b1f      	ldr	r3, [pc, #124]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012002:	691b      	ldr	r3, [r3, #16]
 8012004:	f003 0302 	and.w	r3, r3, #2
 8012008:	2b00      	cmp	r3, #0
 801200a:	d00a      	beq.n	8012022 <TIM1_BRK_TIM9_IRQHandler+0x32>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH1 - 1);
 801200c:	2100      	movs	r1, #0
 801200e:	2005      	movs	r0, #5
 8012010:	f7ff fed4 	bl	8011dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM9
			CLR_BIT(TIM9->SR, CH1);
 8012014:	4b1a      	ldr	r3, [pc, #104]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	4a19      	ldr	r2, [pc, #100]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 801201a:	f023 0302 	bic.w	r3, r3, #2
 801201e:	6113      	str	r3, [r2, #16]
 8012020:	e00f      	b.n	8012042 <TIM1_BRK_TIM9_IRQHandler+0x52>
		}
		else if (GET_BIT(TIM9->SR, 2)) {
 8012022:	4b17      	ldr	r3, [pc, #92]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	f003 0304 	and.w	r3, r3, #4
 801202a:	2b00      	cmp	r3, #0
 801202c:	d009      	beq.n	8012042 <TIM1_BRK_TIM9_IRQHandler+0x52>
			// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM9
			LOC_TIMER_ICU(TIMER9 - 1, CH2 - 1);
 801202e:	2101      	movs	r1, #1
 8012030:	2005      	movs	r0, #5
 8012032:	f7ff fec3 	bl	8011dbc <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH2 of TIM9
			CLR_BIT(TIM9->SR, CH2);
 8012036:	4b12      	ldr	r3, [pc, #72]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012038:	691b      	ldr	r3, [r3, #16]
 801203a:	4a11      	ldr	r2, [pc, #68]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 801203c:	f023 0304 	bic.w	r3, r3, #4
 8012040:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM9 is set
		if (GET_BIT(TIM9->SR, 0)) {
 8012042:	4b0f      	ldr	r3, [pc, #60]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	f003 0301 	and.w	r3, r3, #1
 801204a:	2b00      	cmp	r3, #0
 801204c:	d013      	beq.n	8012076 <TIM1_BRK_TIM9_IRQHandler+0x86>

			// Check if a callback function is registered for TIM9 (at index 5 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[5] != NULL) {
 801204e:	4b0d      	ldr	r3, [pc, #52]	; (8012084 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d009      	beq.n	801206a <TIM1_BRK_TIM9_IRQHandler+0x7a>

				// Call the callback function for TIM9
				GLOBAL_Ptr[5]();
 8012056:	4b0b      	ldr	r3, [pc, #44]	; (8012084 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8012058:	695b      	ldr	r3, [r3, #20]
 801205a:	4798      	blx	r3

				// Clear the update interrupt flag of TIM9
				CLR_BIT(TIM9->SR, 0);
 801205c:	4b08      	ldr	r3, [pc, #32]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	4a07      	ldr	r2, [pc, #28]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012062:	f023 0301 	bic.w	r3, r3, #1
 8012066:	6113      	str	r3, [r2, #16]
				// Clear the update interrupt flag of TIM9 without calling a callback function
				CLR_BIT(TIM9->SR, 0);
			}
		}
	}
}
 8012068:	e005      	b.n	8012076 <TIM1_BRK_TIM9_IRQHandler+0x86>
				CLR_BIT(TIM9->SR, 0);
 801206a:	4b05      	ldr	r3, [pc, #20]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	4a04      	ldr	r2, [pc, #16]	; (8012080 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8012070:	f023 0301 	bic.w	r3, r3, #1
 8012074:	6113      	str	r3, [r2, #16]
}
 8012076:	bf00      	nop
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	40010000 	.word	0x40010000
 8012080:	40014000 	.word	0x40014000
 8012084:	2000009c 	.word	0x2000009c

08012088 <TIM1_CC_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4)
 * 				 of TIM1 triggers an interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM1 is set
	if (GET_BIT(TIM1->SR, 1)) {
 801208c:	4b1f      	ldr	r3, [pc, #124]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 801208e:	691b      	ldr	r3, [r3, #16]
 8012090:	f003 0302 	and.w	r3, r3, #2
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00a      	beq.n	80120ae <TIM1_CC_IRQHandler+0x26>

		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM1
		LOC_TIMER_ICU(TIMER1 - 1, CH1 - 1);
 8012098:	2100      	movs	r1, #0
 801209a:	2000      	movs	r0, #0
 801209c:	f7ff fe8e 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM1
		CLR_BIT(TIM1->SR, CH1);
 80120a0:	4b1a      	ldr	r3, [pc, #104]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	4a19      	ldr	r2, [pc, #100]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120a6:	f023 0302 	bic.w	r3, r3, #2
 80120aa:	6113      	str	r3, [r2, #16]
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);

		// Clear the capture/compare interrupt flag for CH4 of TIM1
		CLR_BIT(TIM1->SR, CH4);
	}
}
 80120ac:	e02b      	b.n	8012106 <TIM1_CC_IRQHandler+0x7e>
	else if (GET_BIT(TIM1->SR, 2)) {
 80120ae:	4b17      	ldr	r3, [pc, #92]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	f003 0304 	and.w	r3, r3, #4
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d00a      	beq.n	80120d0 <TIM1_CC_IRQHandler+0x48>
		LOC_TIMER_ICU(TIMER1 - 1, CH2 - 1);
 80120ba:	2101      	movs	r1, #1
 80120bc:	2000      	movs	r0, #0
 80120be:	f7ff fe7d 	bl	8011dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH2);
 80120c2:	4b12      	ldr	r3, [pc, #72]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	4a11      	ldr	r2, [pc, #68]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120c8:	f023 0304 	bic.w	r3, r3, #4
 80120cc:	6113      	str	r3, [r2, #16]
}
 80120ce:	e01a      	b.n	8012106 <TIM1_CC_IRQHandler+0x7e>
	else if (GET_BIT(TIM1->SR, 3)) {
 80120d0:	4b0e      	ldr	r3, [pc, #56]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120d2:	691b      	ldr	r3, [r3, #16]
 80120d4:	f003 0308 	and.w	r3, r3, #8
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00a      	beq.n	80120f2 <TIM1_CC_IRQHandler+0x6a>
		LOC_TIMER_ICU(TIMER1 - 1, CH3 - 1);
 80120dc:	2102      	movs	r1, #2
 80120de:	2000      	movs	r0, #0
 80120e0:	f7ff fe6c 	bl	8011dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH3);
 80120e4:	4b09      	ldr	r3, [pc, #36]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120e6:	691b      	ldr	r3, [r3, #16]
 80120e8:	4a08      	ldr	r2, [pc, #32]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120ea:	f023 0308 	bic.w	r3, r3, #8
 80120ee:	6113      	str	r3, [r2, #16]
}
 80120f0:	e009      	b.n	8012106 <TIM1_CC_IRQHandler+0x7e>
		LOC_TIMER_ICU(TIMER1 - 1, CH4 - 1);
 80120f2:	2103      	movs	r1, #3
 80120f4:	2000      	movs	r0, #0
 80120f6:	f7ff fe61 	bl	8011dbc <LOC_TIMER_ICU>
		CLR_BIT(TIM1->SR, CH4);
 80120fa:	4b04      	ldr	r3, [pc, #16]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 80120fc:	691b      	ldr	r3, [r3, #16]
 80120fe:	4a03      	ldr	r2, [pc, #12]	; (801210c <TIM1_CC_IRQHandler+0x84>)
 8012100:	f023 0310 	bic.w	r3, r3, #16
 8012104:	6113      	str	r3, [r2, #16]
}
 8012106:	bf00      	nop
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	40010000 	.word	0x40010000

08012110 <TIM2_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 				the update interrupt of TIM2 triggers an interrupt.
 */
void TIM2_IRQHandler(void) {
 8012110:	b580      	push	{r7, lr}
 8012112:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM2 is set
	if (GET_BIT(TIM2->SR, 1)) {
 8012114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012118:	691b      	ldr	r3, [r3, #16]
 801211a:	f003 0302 	and.w	r3, r3, #2
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00c      	beq.n	801213c <TIM2_IRQHandler+0x2c>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH1 - 1);
 8012122:	2100      	movs	r1, #0
 8012124:	2001      	movs	r0, #1
 8012126:	f7ff fe49 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM2
		CLR_BIT(TIM2->SR, CH1);
 801212a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801212e:	691b      	ldr	r3, [r3, #16]
 8012130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012134:	f023 0302 	bic.w	r3, r3, #2
 8012138:	6113      	str	r3, [r2, #16]
 801213a:	e03a      	b.n	80121b2 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 2)) {
 801213c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012140:	691b      	ldr	r3, [r3, #16]
 8012142:	f003 0304 	and.w	r3, r3, #4
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00c      	beq.n	8012164 <TIM2_IRQHandler+0x54>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH2 - 1);
 801214a:	2101      	movs	r1, #1
 801214c:	2001      	movs	r0, #1
 801214e:	f7ff fe35 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM2
		CLR_BIT(TIM2->SR, CH2);
 8012152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801215c:	f023 0304 	bic.w	r3, r3, #4
 8012160:	6113      	str	r3, [r2, #16]
 8012162:	e026      	b.n	80121b2 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 3)) {
 8012164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	f003 0308 	and.w	r3, r3, #8
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00c      	beq.n	801218c <TIM2_IRQHandler+0x7c>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH3 - 1);
 8012172:	2102      	movs	r1, #2
 8012174:	2001      	movs	r0, #1
 8012176:	f7ff fe21 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM2
		CLR_BIT(TIM2->SR, CH3);
 801217a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012184:	f023 0308 	bic.w	r3, r3, #8
 8012188:	6113      	str	r3, [r2, #16]
 801218a:	e012      	b.n	80121b2 <TIM2_IRQHandler+0xa2>
	}
	else if (GET_BIT(TIM2->SR, 4)) {
 801218c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	f003 0310 	and.w	r3, r3, #16
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00b      	beq.n	80121b2 <TIM2_IRQHandler+0xa2>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM2
		LOC_TIMER_ICU(TIMER2 - 1, CH4 - 1);
 801219a:	2103      	movs	r1, #3
 801219c:	2001      	movs	r0, #1
 801219e:	f7ff fe0d 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM2
		CLR_BIT(TIM2->SR, CH4);
 80121a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80121ac:	f023 0310 	bic.w	r3, r3, #16
 80121b0:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM2 is set
	if (GET_BIT(TIM2->SR, 0)) {
 80121b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121b6:	691b      	ldr	r3, [r3, #16]
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d017      	beq.n	80121f0 <TIM2_IRQHandler+0xe0>
		// Check if a callback function is registered for TIM2 (at index 2 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[1] != NULL) {
 80121c0:	4b0c      	ldr	r3, [pc, #48]	; (80121f4 <TIM2_IRQHandler+0xe4>)
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00b      	beq.n	80121e0 <TIM2_IRQHandler+0xd0>

			// Call the callback function for TIM2
			GLOBAL_Ptr[1]();
 80121c8:	4b0a      	ldr	r3, [pc, #40]	; (80121f4 <TIM2_IRQHandler+0xe4>)
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	4798      	blx	r3

			// Clear the update interrupt flag of TIM2
			CLR_BIT(TIM2->SR, 0);
 80121ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80121d8:	f023 0301 	bic.w	r3, r3, #1
 80121dc:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM2 without calling a callback function
			CLR_BIT(TIM2->SR, 0);
		}
	}
}
 80121de:	e007      	b.n	80121f0 <TIM2_IRQHandler+0xe0>
			CLR_BIT(TIM2->SR, 0);
 80121e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121e4:	691b      	ldr	r3, [r3, #16]
 80121e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80121ea:	f023 0301 	bic.w	r3, r3, #1
 80121ee:	6113      	str	r3, [r2, #16]
}
 80121f0:	bf00      	nop
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	2000009c 	.word	0x2000009c

080121f8 <TIM3_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM3 triggers an interrupt.
 */
void TIM3_IRQHandler(void) {
 80121f8:	b580      	push	{r7, lr}
 80121fa:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM3 is set
	if (GET_BIT(TIM3->SR, 1)) {
 80121fc:	4b2f      	ldr	r3, [pc, #188]	; (80122bc <TIM3_IRQHandler+0xc4>)
 80121fe:	691b      	ldr	r3, [r3, #16]
 8012200:	f003 0302 	and.w	r3, r3, #2
 8012204:	2b00      	cmp	r3, #0
 8012206:	d00a      	beq.n	801221e <TIM3_IRQHandler+0x26>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH1 - 1);
 8012208:	2100      	movs	r1, #0
 801220a:	2002      	movs	r0, #2
 801220c:	f7ff fdd6 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM3
		CLR_BIT(TIM3->SR, CH1);
 8012210:	4b2a      	ldr	r3, [pc, #168]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	4a29      	ldr	r2, [pc, #164]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012216:	f023 0302 	bic.w	r3, r3, #2
 801221a:	6113      	str	r3, [r2, #16]
 801221c:	e031      	b.n	8012282 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 2)) {
 801221e:	4b27      	ldr	r3, [pc, #156]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	f003 0304 	and.w	r3, r3, #4
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00a      	beq.n	8012240 <TIM3_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH2 - 1);
 801222a:	2101      	movs	r1, #1
 801222c:	2002      	movs	r0, #2
 801222e:	f7ff fdc5 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM3
		CLR_BIT(TIM3->SR, CH2);
 8012232:	4b22      	ldr	r3, [pc, #136]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012234:	691b      	ldr	r3, [r3, #16]
 8012236:	4a21      	ldr	r2, [pc, #132]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012238:	f023 0304 	bic.w	r3, r3, #4
 801223c:	6113      	str	r3, [r2, #16]
 801223e:	e020      	b.n	8012282 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 3)) {
 8012240:	4b1e      	ldr	r3, [pc, #120]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012242:	691b      	ldr	r3, [r3, #16]
 8012244:	f003 0308 	and.w	r3, r3, #8
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00a      	beq.n	8012262 <TIM3_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH3 - 1);
 801224c:	2102      	movs	r1, #2
 801224e:	2002      	movs	r0, #2
 8012250:	f7ff fdb4 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM3
		CLR_BIT(TIM3->SR, CH3);
 8012254:	4b19      	ldr	r3, [pc, #100]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012256:	691b      	ldr	r3, [r3, #16]
 8012258:	4a18      	ldr	r2, [pc, #96]	; (80122bc <TIM3_IRQHandler+0xc4>)
 801225a:	f023 0308 	bic.w	r3, r3, #8
 801225e:	6113      	str	r3, [r2, #16]
 8012260:	e00f      	b.n	8012282 <TIM3_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM3->SR, 4)) {
 8012262:	4b16      	ldr	r3, [pc, #88]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012264:	691b      	ldr	r3, [r3, #16]
 8012266:	f003 0310 	and.w	r3, r3, #16
 801226a:	2b00      	cmp	r3, #0
 801226c:	d009      	beq.n	8012282 <TIM3_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM3
		LOC_TIMER_ICU(TIMER3 - 1, CH4 - 1);
 801226e:	2103      	movs	r1, #3
 8012270:	2002      	movs	r0, #2
 8012272:	f7ff fda3 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM3
		CLR_BIT(TIM3->SR, CH4);
 8012276:	4b11      	ldr	r3, [pc, #68]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	4a10      	ldr	r2, [pc, #64]	; (80122bc <TIM3_IRQHandler+0xc4>)
 801227c:	f023 0310 	bic.w	r3, r3, #16
 8012280:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM3 is set
	if (GET_BIT(TIM3->SR, 0)) {
 8012282:	4b0e      	ldr	r3, [pc, #56]	; (80122bc <TIM3_IRQHandler+0xc4>)
 8012284:	691b      	ldr	r3, [r3, #16]
 8012286:	f003 0301 	and.w	r3, r3, #1
 801228a:	2b00      	cmp	r3, #0
 801228c:	d013      	beq.n	80122b6 <TIM3_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM3 (at index 3 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[2] != NULL) {
 801228e:	4b0c      	ldr	r3, [pc, #48]	; (80122c0 <TIM3_IRQHandler+0xc8>)
 8012290:	689b      	ldr	r3, [r3, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d009      	beq.n	80122aa <TIM3_IRQHandler+0xb2>

			// Call the callback function for TIM3
			GLOBAL_Ptr[2]();
 8012296:	4b0a      	ldr	r3, [pc, #40]	; (80122c0 <TIM3_IRQHandler+0xc8>)
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	4798      	blx	r3

			// Clear the update interrupt flag of TIM3
			CLR_BIT(TIM3->SR, 0);
 801229c:	4b07      	ldr	r3, [pc, #28]	; (80122bc <TIM3_IRQHandler+0xc4>)
 801229e:	691b      	ldr	r3, [r3, #16]
 80122a0:	4a06      	ldr	r2, [pc, #24]	; (80122bc <TIM3_IRQHandler+0xc4>)
 80122a2:	f023 0301 	bic.w	r3, r3, #1
 80122a6:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM3 without calling a callback function
			CLR_BIT(TIM3->SR, 0);
		}
	}
}
 80122a8:	e005      	b.n	80122b6 <TIM3_IRQHandler+0xbe>
			CLR_BIT(TIM3->SR, 0);
 80122aa:	4b04      	ldr	r3, [pc, #16]	; (80122bc <TIM3_IRQHandler+0xc4>)
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	4a03      	ldr	r2, [pc, #12]	; (80122bc <TIM3_IRQHandler+0xc4>)
 80122b0:	f023 0301 	bic.w	r3, r3, #1
 80122b4:	6113      	str	r3, [r2, #16]
}
 80122b6:	bf00      	nop
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	40000400 	.word	0x40000400
 80122c0:	2000009c 	.word	0x2000009c

080122c4 <TIM4_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM4 triggers an interrupt.
 */
void TIM4_IRQHandler(void) {
 80122c4:	b580      	push	{r7, lr}
 80122c6:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM4 is set
	if (GET_BIT(TIM4->SR, 1)) {
 80122c8:	4b2f      	ldr	r3, [pc, #188]	; (8012388 <TIM4_IRQHandler+0xc4>)
 80122ca:	691b      	ldr	r3, [r3, #16]
 80122cc:	f003 0302 	and.w	r3, r3, #2
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d00a      	beq.n	80122ea <TIM4_IRQHandler+0x26>

		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH1 - 1);
 80122d4:	2100      	movs	r1, #0
 80122d6:	2003      	movs	r0, #3
 80122d8:	f7ff fd70 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM4
		CLR_BIT(TIM4->SR, CH1);
 80122dc:	4b2a      	ldr	r3, [pc, #168]	; (8012388 <TIM4_IRQHandler+0xc4>)
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	4a29      	ldr	r2, [pc, #164]	; (8012388 <TIM4_IRQHandler+0xc4>)
 80122e2:	f023 0302 	bic.w	r3, r3, #2
 80122e6:	6113      	str	r3, [r2, #16]
 80122e8:	e031      	b.n	801234e <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 2)) {
 80122ea:	4b27      	ldr	r3, [pc, #156]	; (8012388 <TIM4_IRQHandler+0xc4>)
 80122ec:	691b      	ldr	r3, [r3, #16]
 80122ee:	f003 0304 	and.w	r3, r3, #4
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00a      	beq.n	801230c <TIM4_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH2 - 1);
 80122f6:	2101      	movs	r1, #1
 80122f8:	2003      	movs	r0, #3
 80122fa:	f7ff fd5f 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM4
		CLR_BIT(TIM4->SR, CH2);
 80122fe:	4b22      	ldr	r3, [pc, #136]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012300:	691b      	ldr	r3, [r3, #16]
 8012302:	4a21      	ldr	r2, [pc, #132]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012304:	f023 0304 	bic.w	r3, r3, #4
 8012308:	6113      	str	r3, [r2, #16]
 801230a:	e020      	b.n	801234e <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 3)) {
 801230c:	4b1e      	ldr	r3, [pc, #120]	; (8012388 <TIM4_IRQHandler+0xc4>)
 801230e:	691b      	ldr	r3, [r3, #16]
 8012310:	f003 0308 	and.w	r3, r3, #8
 8012314:	2b00      	cmp	r3, #0
 8012316:	d00a      	beq.n	801232e <TIM4_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH3 - 1);
 8012318:	2102      	movs	r1, #2
 801231a:	2003      	movs	r0, #3
 801231c:	f7ff fd4e 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM4
		CLR_BIT(TIM4->SR, CH3);
 8012320:	4b19      	ldr	r3, [pc, #100]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	4a18      	ldr	r2, [pc, #96]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012326:	f023 0308 	bic.w	r3, r3, #8
 801232a:	6113      	str	r3, [r2, #16]
 801232c:	e00f      	b.n	801234e <TIM4_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM4->SR, 4)) {
 801232e:	4b16      	ldr	r3, [pc, #88]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	f003 0310 	and.w	r3, r3, #16
 8012336:	2b00      	cmp	r3, #0
 8012338:	d009      	beq.n	801234e <TIM4_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM4
		LOC_TIMER_ICU(TIMER4 - 1, CH4 - 1);
 801233a:	2103      	movs	r1, #3
 801233c:	2003      	movs	r0, #3
 801233e:	f7ff fd3d 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM4
		CLR_BIT(TIM4->SR, CH4);
 8012342:	4b11      	ldr	r3, [pc, #68]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012344:	691b      	ldr	r3, [r3, #16]
 8012346:	4a10      	ldr	r2, [pc, #64]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012348:	f023 0310 	bic.w	r3, r3, #16
 801234c:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM4 is set
	if (GET_BIT(TIM4->SR, 0)) {
 801234e:	4b0e      	ldr	r3, [pc, #56]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012350:	691b      	ldr	r3, [r3, #16]
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	2b00      	cmp	r3, #0
 8012358:	d013      	beq.n	8012382 <TIM4_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM4 (at index 4 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[3] != NULL) {
 801235a:	4b0c      	ldr	r3, [pc, #48]	; (801238c <TIM4_IRQHandler+0xc8>)
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d009      	beq.n	8012376 <TIM4_IRQHandler+0xb2>

			// Call the callback function for TIM4
			GLOBAL_Ptr[3]();
 8012362:	4b0a      	ldr	r3, [pc, #40]	; (801238c <TIM4_IRQHandler+0xc8>)
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	4798      	blx	r3

			// Clear the update interrupt flag of TIM4
			CLR_BIT(TIM4->SR, 0);
 8012368:	4b07      	ldr	r3, [pc, #28]	; (8012388 <TIM4_IRQHandler+0xc4>)
 801236a:	691b      	ldr	r3, [r3, #16]
 801236c:	4a06      	ldr	r2, [pc, #24]	; (8012388 <TIM4_IRQHandler+0xc4>)
 801236e:	f023 0301 	bic.w	r3, r3, #1
 8012372:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM4 without calling a callback function
			CLR_BIT(TIM4->SR, 0);
		}
	}
}
 8012374:	e005      	b.n	8012382 <TIM4_IRQHandler+0xbe>
			CLR_BIT(TIM4->SR, 0);
 8012376:	4b04      	ldr	r3, [pc, #16]	; (8012388 <TIM4_IRQHandler+0xc4>)
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	4a03      	ldr	r2, [pc, #12]	; (8012388 <TIM4_IRQHandler+0xc4>)
 801237c:	f023 0301 	bic.w	r3, r3, #1
 8012380:	6113      	str	r3, [r2, #16]
}
 8012382:	bf00      	nop
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	40000800 	.word	0x40000800
 801238c:	2000009c 	.word	0x2000009c

08012390 <TIM5_IRQHandler>:
/*******************************************************************************************************/
/*
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 *  			the update interrupt of TIM5 triggers an interrupt.
 */
void TIM5_IRQHandler(void) {
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
	// Check if the capture/compare interrupt flag for CH1 of TIM5 is set
	if (GET_BIT(TIM5->SR, 1)) {
 8012394:	4b2f      	ldr	r3, [pc, #188]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012396:	691b      	ldr	r3, [r3, #16]
 8012398:	f003 0302 	and.w	r3, r3, #2
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00a      	beq.n	80123b6 <TIM5_IRQHandler+0x26>
		// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH1 - 1);
 80123a0:	2100      	movs	r1, #0
 80123a2:	2004      	movs	r0, #4
 80123a4:	f7ff fd0a 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH1 of TIM5
		CLR_BIT(TIM5->SR, CH1);
 80123a8:	4b2a      	ldr	r3, [pc, #168]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	4a29      	ldr	r2, [pc, #164]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123ae:	f023 0302 	bic.w	r3, r3, #2
 80123b2:	6113      	str	r3, [r2, #16]
 80123b4:	e031      	b.n	801241a <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 2)) {
 80123b6:	4b27      	ldr	r3, [pc, #156]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123b8:	691b      	ldr	r3, [r3, #16]
 80123ba:	f003 0304 	and.w	r3, r3, #4
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00a      	beq.n	80123d8 <TIM5_IRQHandler+0x48>
		// Call the LOC_TIMER_ICU function for handling CH2 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH2 - 1);
 80123c2:	2101      	movs	r1, #1
 80123c4:	2004      	movs	r0, #4
 80123c6:	f7ff fcf9 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH2 of TIM5
		CLR_BIT(TIM5->SR, CH2);
 80123ca:	4b22      	ldr	r3, [pc, #136]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123cc:	691b      	ldr	r3, [r3, #16]
 80123ce:	4a21      	ldr	r2, [pc, #132]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123d0:	f023 0304 	bic.w	r3, r3, #4
 80123d4:	6113      	str	r3, [r2, #16]
 80123d6:	e020      	b.n	801241a <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 3)) {
 80123d8:	4b1e      	ldr	r3, [pc, #120]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123da:	691b      	ldr	r3, [r3, #16]
 80123dc:	f003 0308 	and.w	r3, r3, #8
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00a      	beq.n	80123fa <TIM5_IRQHandler+0x6a>
		// Call the LOC_TIMER_ICU function for handling CH3 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH3 - 1);
 80123e4:	2102      	movs	r1, #2
 80123e6:	2004      	movs	r0, #4
 80123e8:	f7ff fce8 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH3 of TIM5
		CLR_BIT(TIM5->SR, CH3);
 80123ec:	4b19      	ldr	r3, [pc, #100]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123ee:	691b      	ldr	r3, [r3, #16]
 80123f0:	4a18      	ldr	r2, [pc, #96]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123f2:	f023 0308 	bic.w	r3, r3, #8
 80123f6:	6113      	str	r3, [r2, #16]
 80123f8:	e00f      	b.n	801241a <TIM5_IRQHandler+0x8a>
	}
	else if (GET_BIT(TIM5->SR, 4)) {
 80123fa:	4b16      	ldr	r3, [pc, #88]	; (8012454 <TIM5_IRQHandler+0xc4>)
 80123fc:	691b      	ldr	r3, [r3, #16]
 80123fe:	f003 0310 	and.w	r3, r3, #16
 8012402:	2b00      	cmp	r3, #0
 8012404:	d009      	beq.n	801241a <TIM5_IRQHandler+0x8a>
		// Call the LOC_TIMER_ICU function for handling CH4 interrupt of TIM5
		LOC_TIMER_ICU(TIMER5 - 1, CH4 - 1);
 8012406:	2103      	movs	r1, #3
 8012408:	2004      	movs	r0, #4
 801240a:	f7ff fcd7 	bl	8011dbc <LOC_TIMER_ICU>

		// Clear the capture/compare interrupt flag for CH4 of TIM5
		CLR_BIT(TIM5->SR, CH4);
 801240e:	4b11      	ldr	r3, [pc, #68]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012410:	691b      	ldr	r3, [r3, #16]
 8012412:	4a10      	ldr	r2, [pc, #64]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012414:	f023 0310 	bic.w	r3, r3, #16
 8012418:	6113      	str	r3, [r2, #16]
	}

	// Check if the update interrupt flag of TIM5 is set
	if (GET_BIT(TIM5->SR, 0)) {
 801241a:	4b0e      	ldr	r3, [pc, #56]	; (8012454 <TIM5_IRQHandler+0xc4>)
 801241c:	691b      	ldr	r3, [r3, #16]
 801241e:	f003 0301 	and.w	r3, r3, #1
 8012422:	2b00      	cmp	r3, #0
 8012424:	d013      	beq.n	801244e <TIM5_IRQHandler+0xbe>
		// Check if a callback function is registered for TIM5 (at index 5 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[4] != NULL) {
 8012426:	4b0c      	ldr	r3, [pc, #48]	; (8012458 <TIM5_IRQHandler+0xc8>)
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d009      	beq.n	8012442 <TIM5_IRQHandler+0xb2>

			// Call the callback function for TIM5
			GLOBAL_Ptr[4]();
 801242e:	4b0a      	ldr	r3, [pc, #40]	; (8012458 <TIM5_IRQHandler+0xc8>)
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	4798      	blx	r3

			// Clear the update interrupt flag of TIM5
			CLR_BIT(TIM5->SR, 0);
 8012434:	4b07      	ldr	r3, [pc, #28]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012436:	691b      	ldr	r3, [r3, #16]
 8012438:	4a06      	ldr	r2, [pc, #24]	; (8012454 <TIM5_IRQHandler+0xc4>)
 801243a:	f023 0301 	bic.w	r3, r3, #1
 801243e:	6113      	str	r3, [r2, #16]
		else {
			// Clear the update interrupt flag of TIM5 without calling a callback function
			CLR_BIT(TIM5->SR, 0);
		}
	}
}
 8012440:	e005      	b.n	801244e <TIM5_IRQHandler+0xbe>
			CLR_BIT(TIM5->SR, 0);
 8012442:	4b04      	ldr	r3, [pc, #16]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012444:	691b      	ldr	r3, [r3, #16]
 8012446:	4a03      	ldr	r2, [pc, #12]	; (8012454 <TIM5_IRQHandler+0xc4>)
 8012448:	f023 0301 	bic.w	r3, r3, #1
 801244c:	6113      	str	r3, [r2, #16]
}
 801244e:	bf00      	nop
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	40000c00 	.word	0x40000c00
 8012458:	2000009c 	.word	0x2000009c

0801245c <MUSART_voidInit>:
/*******************************************************************************************************/


/*******************************************************************************************************/
void MUSART_voidInit(void)
{
 801245c:	b480      	push	{r7}
 801245e:	af00      	add	r7, sp, #0

	/***********	USART_1		***********/
#if (USART1_USED == U_ENABLE)
	/**< Configure USART baud rate  */
	USART1_REG->BRR = USART1_BUAD_RATE;
 8012460:	4b1c      	ldr	r3, [pc, #112]	; (80124d4 <MUSART_voidInit+0x78>)
 8012462:	f240 6283 	movw	r2, #1667	; 0x683
 8012466:	609a      	str	r2, [r3, #8]
	/**< Configure USART stop bits */
	USART1_REG->CR2 |= (USART1_STOP_BITS << 12);
 8012468:	4b1a      	ldr	r3, [pc, #104]	; (80124d4 <MUSART_voidInit+0x78>)
 801246a:	4a1a      	ldr	r2, [pc, #104]	; (80124d4 <MUSART_voidInit+0x78>)
 801246c:	691b      	ldr	r3, [r3, #16]
 801246e:	6113      	str	r3, [r2, #16]
	/**< Configure USART send break character */
	USART1_REG->CR1.SBK = USART1_SEND_BREAK;
 8012470:	4a18      	ldr	r2, [pc, #96]	; (80124d4 <MUSART_voidInit+0x78>)
 8012472:	68d3      	ldr	r3, [r2, #12]
 8012474:	f36f 0300 	bfc	r3, #0, #1
 8012478:	60d3      	str	r3, [r2, #12]
	/**< Configure USART RX enable/Disable */
	USART1_REG->CR1.RE = USART1_RECEIVER;
 801247a:	4a16      	ldr	r2, [pc, #88]	; (80124d4 <MUSART_voidInit+0x78>)
 801247c:	68d3      	ldr	r3, [r2, #12]
 801247e:	f043 0304 	orr.w	r3, r3, #4
 8012482:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 TX enable/Disable */
	USART1_REG->CR1.TE = USART1_TRANSMITTER;
 8012484:	4a13      	ldr	r2, [pc, #76]	; (80124d4 <MUSART_voidInit+0x78>)
 8012486:	68d3      	ldr	r3, [r2, #12]
 8012488:	f043 0308 	orr.w	r3, r3, #8
 801248c:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 RX Interrupt enable/Disable */
	USART1_REG->CR1.RXNEIE = USART1_RX_INT;
 801248e:	4a11      	ldr	r2, [pc, #68]	; (80124d4 <MUSART_voidInit+0x78>)
 8012490:	68d3      	ldr	r3, [r2, #12]
 8012492:	f043 0320 	orr.w	r3, r3, #32
 8012496:	60d3      	str	r3, [r2, #12]
	/*< Configure USART1 Transmission complete interrupt enable/disable/*/
	USART1_REG->CR1.TCIE = USART1_T_COMP_INT;
 8012498:	4a0e      	ldr	r2, [pc, #56]	; (80124d4 <MUSART_voidInit+0x78>)
 801249a:	68d3      	ldr	r3, [r2, #12]
 801249c:	f36f 1386 	bfc	r3, #6, #1
 80124a0:	60d3      	str	r3, [r2, #12]
	/**< Enable/Disable USART1 parity mode */
	USART1_REG->CR1.PCE = USART1_PARITY_ENABLE;
 80124a2:	4a0c      	ldr	r2, [pc, #48]	; (80124d4 <MUSART_voidInit+0x78>)
 80124a4:	68d3      	ldr	r3, [r2, #12]
 80124a6:	f36f 238a 	bfc	r3, #10, #1
 80124aa:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 parity mode */
	USART1_REG->CR1.PS = USART1_PARITY_MODE;
 80124ac:	4a09      	ldr	r2, [pc, #36]	; (80124d4 <MUSART_voidInit+0x78>)
 80124ae:	68d3      	ldr	r3, [r2, #12]
 80124b0:	f36f 2349 	bfc	r3, #9, #1
 80124b4:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART1_REG->CR1.M = USART1_WORD_LEN;
 80124b6:	4a07      	ldr	r2, [pc, #28]	; (80124d4 <MUSART_voidInit+0x78>)
 80124b8:	68d3      	ldr	r3, [r2, #12]
 80124ba:	f36f 330c 	bfc	r3, #12, #1
 80124be:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 Over-sampling mode */
	USART1_REG->CR1.OVER8	= USART1_OVER_SAMPLING;
 80124c0:	4a04      	ldr	r2, [pc, #16]	; (80124d4 <MUSART_voidInit+0x78>)
 80124c2:	68d3      	ldr	r3, [r2, #12]
 80124c4:	f36f 33cf 	bfc	r3, #15, #1
 80124c8:	60d3      	str	r3, [r2, #12]
	/**< Configure USART1 word length (data bits) */
	USART6_REG->CR1.M = USART6_WORD_LEN;
	/**< Configure USART1 Over-sampling mode */
	USART6_REG->CR1.OVER8	= USART6_OVER_SAMPLING;
#endif
}
 80124ca:	bf00      	nop
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr
 80124d4:	40011000 	.word	0x40011000

080124d8 <MUSART_voidEnable>:

/*******************************************************************************************************/

void MUSART_voidEnable(u8 copy_u8Index){
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	4603      	mov	r3, r0
 80124e0:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8Index){
 80124e2:	79fb      	ldrb	r3, [r7, #7]
 80124e4:	2b06      	cmp	r3, #6
 80124e6:	d012      	beq.n	801250e <MUSART_voidEnable+0x36>
 80124e8:	2b06      	cmp	r3, #6
 80124ea:	dc16      	bgt.n	801251a <MUSART_voidEnable+0x42>
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d002      	beq.n	80124f6 <MUSART_voidEnable+0x1e>
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d006      	beq.n	8012502 <MUSART_voidEnable+0x2a>
	case 1: USART1_REG -> CR1.UE = 1; break;
	case 2: USART2_REG -> CR1.UE = 1; break;
	case 6: USART6_REG -> CR1.UE = 1; break;
	}
}
 80124f4:	e011      	b.n	801251a <MUSART_voidEnable+0x42>
	case 1: USART1_REG -> CR1.UE = 1; break;
 80124f6:	4a0c      	ldr	r2, [pc, #48]	; (8012528 <MUSART_voidEnable+0x50>)
 80124f8:	68d3      	ldr	r3, [r2, #12]
 80124fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80124fe:	60d3      	str	r3, [r2, #12]
 8012500:	e00b      	b.n	801251a <MUSART_voidEnable+0x42>
	case 2: USART2_REG -> CR1.UE = 1; break;
 8012502:	4a0a      	ldr	r2, [pc, #40]	; (801252c <MUSART_voidEnable+0x54>)
 8012504:	68d3      	ldr	r3, [r2, #12]
 8012506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801250a:	60d3      	str	r3, [r2, #12]
 801250c:	e005      	b.n	801251a <MUSART_voidEnable+0x42>
	case 6: USART6_REG -> CR1.UE = 1; break;
 801250e:	4a08      	ldr	r2, [pc, #32]	; (8012530 <MUSART_voidEnable+0x58>)
 8012510:	68d3      	ldr	r3, [r2, #12]
 8012512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012516:	60d3      	str	r3, [r2, #12]
 8012518:	bf00      	nop
}
 801251a:	bf00      	nop
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	40011000 	.word	0x40011000
 801252c:	40004400 	.word	0x40004400
 8012530:	40011400 	.word	0x40011400

08012534 <MUSART_voidDisable>:

/*******************************************************************************************************/

void MUSART_voidDisable(u8 copy_u8Index){
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8Index)
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	2b06      	cmp	r3, #6
 8012542:	d012      	beq.n	801256a <MUSART_voidDisable+0x36>
 8012544:	2b06      	cmp	r3, #6
 8012546:	dc16      	bgt.n	8012576 <MUSART_voidDisable+0x42>
 8012548:	2b01      	cmp	r3, #1
 801254a:	d002      	beq.n	8012552 <MUSART_voidDisable+0x1e>
 801254c:	2b02      	cmp	r3, #2
 801254e:	d006      	beq.n	801255e <MUSART_voidDisable+0x2a>
	{
	case 1: USART1_REG -> CR1.UE = 0; break;
	case 2: USART2_REG -> CR1.UE = 0; break;
	case 6: USART6_REG -> CR1.UE = 0; break;
	}
}
 8012550:	e011      	b.n	8012576 <MUSART_voidDisable+0x42>
	case 1: USART1_REG -> CR1.UE = 0; break;
 8012552:	4a0c      	ldr	r2, [pc, #48]	; (8012584 <MUSART_voidDisable+0x50>)
 8012554:	68d3      	ldr	r3, [r2, #12]
 8012556:	f36f 334d 	bfc	r3, #13, #1
 801255a:	60d3      	str	r3, [r2, #12]
 801255c:	e00b      	b.n	8012576 <MUSART_voidDisable+0x42>
	case 2: USART2_REG -> CR1.UE = 0; break;
 801255e:	4a0a      	ldr	r2, [pc, #40]	; (8012588 <MUSART_voidDisable+0x54>)
 8012560:	68d3      	ldr	r3, [r2, #12]
 8012562:	f36f 334d 	bfc	r3, #13, #1
 8012566:	60d3      	str	r3, [r2, #12]
 8012568:	e005      	b.n	8012576 <MUSART_voidDisable+0x42>
	case 6: USART6_REG -> CR1.UE = 0; break;
 801256a:	4a08      	ldr	r2, [pc, #32]	; (801258c <MUSART_voidDisable+0x58>)
 801256c:	68d3      	ldr	r3, [r2, #12]
 801256e:	f36f 334d 	bfc	r3, #13, #1
 8012572:	60d3      	str	r3, [r2, #12]
 8012574:	bf00      	nop
}
 8012576:	bf00      	nop
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop
 8012584:	40011000 	.word	0x40011000
 8012588:	40004400 	.word	0x40004400
 801258c:	40011400 	.word	0x40011400

08012590 <MUSART_u8Send_Byte>:

/*******************************************************************************************************/
void MUSART_u8Send_Byte(u8 copy_u8Index ,u8 copy_u8Data){
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	4603      	mov	r3, r0
 8012598:	460a      	mov	r2, r1
 801259a:	71fb      	strb	r3, [r7, #7]
 801259c:	4613      	mov	r3, r2
 801259e:	71bb      	strb	r3, [r7, #6]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 80125a0:	79fb      	ldrb	r3, [r7, #7]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 f84e 	bl	8012644 <MUSART_SetUSART>
 80125a8:	60f8      	str	r0, [r7, #12]
	while(0==GET_BIT(_USART_->SR, 7));// wait until transmission complete into the shift register
 80125aa:	bf00      	nop
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d0f9      	beq.n	80125ac <MUSART_u8Send_Byte+0x1c>
	_USART_->DR = copy_u8Data;
 80125b8:	79ba      	ldrb	r2, [r7, #6]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	605a      	str	r2, [r3, #4]
	while(0==GET_BIT(_USART_->SR, 6));// wait until transmission of a frame containing data is complete
 80125be:	bf00      	nop
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d0f9      	beq.n	80125c0 <MUSART_u8Send_Byte+0x30>
}
 80125cc:	bf00      	nop
 80125ce:	bf00      	nop
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <MUSART_u8Send_Data>:

/*******************************************************************************************************/
void MUSART_u8Send_Data(u8 copy_u8Index , u8 *copy_u8Data){
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b084      	sub	sp, #16
 80125da:	af00      	add	r7, sp, #0
 80125dc:	4603      	mov	r3, r0
 80125de:	6039      	str	r1, [r7, #0]
 80125e0:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index =0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 80125e6:	e00b      	b.n	8012600 <MUSART_u8Send_Data+0x2a>
	{
		MUSART_u8Send_Byte(copy_u8Index,copy_u8Data[Local_u8Index]);
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	683a      	ldr	r2, [r7, #0]
 80125ec:	4413      	add	r3, r2
 80125ee:	781a      	ldrb	r2, [r3, #0]
 80125f0:	79fb      	ldrb	r3, [r7, #7]
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ff ffcb 	bl	8012590 <MUSART_u8Send_Byte>
		Local_u8Index++;
 80125fa:	7bfb      	ldrb	r3, [r7, #15]
 80125fc:	3301      	adds	r3, #1
 80125fe:	73fb      	strb	r3, [r7, #15]
	while('\0'!=copy_u8Data[Local_u8Index])
 8012600:	7bfb      	ldrb	r3, [r7, #15]
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	4413      	add	r3, r2
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1ed      	bne.n	80125e8 <MUSART_u8Send_Data+0x12>
	}
}
 801260c:	bf00      	nop
 801260e:	bf00      	nop
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <MUSART_u8INT_Receive_Byte>:
		Statue = NoReceive ;
	}
		return Statue ;
}
/*******************************************************************************************************/
u8 MUSART_u8INT_Receive_Byte(u8 copy_u8Index,u8 *copy_u8Data){
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	4603      	mov	r3, r0
 801261e:	6039      	str	r1, [r7, #0]
 8012620:	71fb      	strb	r3, [r7, #7]
	USART_REG _USART_ = MUSART_SetUSART(copy_u8Index);
 8012622:	79fb      	ldrb	r3, [r7, #7]
 8012624:	4618      	mov	r0, r3
 8012626:	f000 f80d 	bl	8012644 <MUSART_SetUSART>
 801262a:	60f8      	str	r0, [r7, #12]
	//while(0==GET_BIT(_USART_->SR, 5));
	*copy_u8Data= _USART_->DR;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	b2da      	uxtb	r2, r3
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	701a      	strb	r2, [r3, #0]
	return *copy_u8Data ;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	781b      	ldrb	r3, [r3, #0]

}
 801263a:	4618      	mov	r0, r3
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
	...

08012644 <MUSART_SetUSART>:
/*******************************************************************************************************/
USART_REG MUSART_SetUSART(u8 copy_u8Index){
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	4603      	mov	r3, r0
 801264c:	71fb      	strb	r3, [r7, #7]
	USART_REG L_handle= (USART_REG) USART1_BASE_ADRESS;
 801264e:	4b0e      	ldr	r3, [pc, #56]	; (8012688 <MUSART_SetUSART+0x44>)
 8012650:	60fb      	str	r3, [r7, #12]
	switch (copy_u8Index)
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	2b06      	cmp	r3, #6
 8012656:	d00c      	beq.n	8012672 <MUSART_SetUSART+0x2e>
 8012658:	2b06      	cmp	r3, #6
 801265a:	dc0d      	bgt.n	8012678 <MUSART_SetUSART+0x34>
 801265c:	2b01      	cmp	r3, #1
 801265e:	d002      	beq.n	8012666 <MUSART_SetUSART+0x22>
 8012660:	2b02      	cmp	r3, #2
 8012662:	d003      	beq.n	801266c <MUSART_SetUSART+0x28>
 8012664:	e008      	b.n	8012678 <MUSART_SetUSART+0x34>
	{
	case 1: L_handle =  (USART_REG) USART1_BASE_ADRESS; break;
 8012666:	4b08      	ldr	r3, [pc, #32]	; (8012688 <MUSART_SetUSART+0x44>)
 8012668:	60fb      	str	r3, [r7, #12]
 801266a:	e005      	b.n	8012678 <MUSART_SetUSART+0x34>
	case 2: L_handle =  (USART_REG) USART2_BASE_ADRESS; break;
 801266c:	4b07      	ldr	r3, [pc, #28]	; (801268c <MUSART_SetUSART+0x48>)
 801266e:	60fb      	str	r3, [r7, #12]
 8012670:	e002      	b.n	8012678 <MUSART_SetUSART+0x34>
	case 6: L_handle =  (USART_REG) USART6_BASE_ADRESS; break;
 8012672:	4b07      	ldr	r3, [pc, #28]	; (8012690 <MUSART_SetUSART+0x4c>)
 8012674:	60fb      	str	r3, [r7, #12]
 8012676:	bf00      	nop
	}
	return L_handle;
 8012678:	68fb      	ldr	r3, [r7, #12]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3714      	adds	r7, #20
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	40011000 	.word	0x40011000
 801268c:	40004400 	.word	0x40004400
 8012690:	40011400 	.word	0x40011400

08012694 <USART1_voidSetCallBack>:

/*******************************************************************************************************/
/*                                      07- USART1_voidSetCallBack                                     */
/*-----------------------------------------------------------------------------------------------------*/
void USART1_voidSetCallBack( void (*ptr) (void) )
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
	USART_USART1Function = ptr;
 801269c:	4a04      	ldr	r2, [pc, #16]	; (80126b0 <USART1_voidSetCallBack+0x1c>)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6013      	str	r3, [r2, #0]
}
 80126a2:	bf00      	nop
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20000238 	.word	0x20000238

080126b4 <USART1_IRQHandler>:
}

/*******************************************************************************************************/
/** ISR of USART1 **/
void USART1_IRQHandler(void)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
	USART1_REG->SR = 0 ;	//reset flags
 80126b8:	4b03      	ldr	r3, [pc, #12]	; (80126c8 <USART1_IRQHandler+0x14>)
 80126ba:	2200      	movs	r2, #0
 80126bc:	601a      	str	r2, [r3, #0]
	USART_USART1Function();
 80126be:	4b03      	ldr	r3, [pc, #12]	; (80126cc <USART1_IRQHandler+0x18>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	4798      	blx	r3
}
 80126c4:	bf00      	nop
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	40011000 	.word	0x40011000
 80126cc:	20000238 	.word	0x20000238

080126d0 <USART2_IRQHandler>:

/** ISR of USART2 **/
void USART2_IRQHandler(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
	USART2_REG->SR = 0 ;
 80126d4:	4b03      	ldr	r3, [pc, #12]	; (80126e4 <USART2_IRQHandler+0x14>)
 80126d6:	2200      	movs	r2, #0
 80126d8:	601a      	str	r2, [r3, #0]
	USART_USART2Function();
 80126da:	4b03      	ldr	r3, [pc, #12]	; (80126e8 <USART2_IRQHandler+0x18>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4798      	blx	r3
}
 80126e0:	bf00      	nop
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	40004400 	.word	0x40004400
 80126e8:	2000023c 	.word	0x2000023c

080126ec <USART6_IRQHandler>:

/** ISR of USART6 **/
void USART6_IRQHandler(void)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	af00      	add	r7, sp, #0
	USART6_REG->SR = 0 ;
 80126f0:	4b03      	ldr	r3, [pc, #12]	; (8012700 <USART6_IRQHandler+0x14>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	601a      	str	r2, [r3, #0]
	USART_USART6Function();
 80126f6:	4b03      	ldr	r3, [pc, #12]	; (8012704 <USART6_IRQHandler+0x18>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4798      	blx	r3
}
 80126fc:	bf00      	nop
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	40011400 	.word	0x40011400
 8012704:	20000240 	.word	0x20000240

08012708 <main>:
/* functions deceleration  END */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
	u8 Parking_Available=0;
 801270e:	2300      	movs	r3, #0
 8012710:	71fb      	strb	r3, [r7, #7]
	/*System Clock is 16MHz from HSI*/
	MRCC_voidInitSystemClk();
 8012712:	f7fe ff8d 	bl	8011630 <MRCC_voidInitSystemClk>
	MSTK_voidInit();
 8012716:	f7fe ffa7 	bl	8011668 <MSTK_voidInit>
	_delay_ms(500);
 801271a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801271e:	f7fe fff5 	bl	801170c <_delay_ms>
	//--------LEDs --------//
	MRCC_voidEnablePeripheralClock(AHB1,GPIOC_PORT );
 8012722:	2102      	movs	r1, #2
 8012724:	2000      	movs	r0, #0
 8012726:	f7fe ff31 	bl	801158c <MRCC_voidEnablePeripheralClock>
	LED_Init(&Led_0);
 801272a:	489c      	ldr	r0, [pc, #624]	; (801299c <main+0x294>)
 801272c:	f7fe f9aa 	bl	8010a84 <LED_Init>
	LED_Off(&Led_0);
 8012730:	489a      	ldr	r0, [pc, #616]	; (801299c <main+0x294>)
 8012732:	f7fe f9b9 	bl	8010aa8 <LED_Off>
	//LED_Off (&Led_0);
	//--------USART--------//
	MRCC_voidEnablePeripheralClock(AHB1,GPIOA_PORT);
 8012736:	2100      	movs	r1, #0
 8012738:	2000      	movs	r0, #0
 801273a:	f7fe ff27 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2,PERIPHERAL_EN_USART1);
 801273e:	2104      	movs	r1, #4
 8012740:	2003      	movs	r0, #3
 8012742:	f7fe ff23 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_9,  MODE_ALTF);
 8012746:	2202      	movs	r2, #2
 8012748:	2109      	movs	r1, #9
 801274a:	2000      	movs	r0, #0
 801274c:	f7fe fbb0 	bl	8010eb0 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode (GPIOA_PORT, PIN_10, MODE_ALTF);
 8012750:	2202      	movs	r2, #2
 8012752:	210a      	movs	r1, #10
 8012754:	2000      	movs	r0, #0
 8012756:	f7fe fbab 	bl	8010eb0 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_9,  ALTFN_7);
 801275a:	2207      	movs	r2, #7
 801275c:	2109      	movs	r1, #9
 801275e:	2000      	movs	r0, #0
 8012760:	f7fe fdfa 	bl	8011358 <MGPIO_voidSetPinAltFn>
	MGPIO_voidSetPinAltFn(GPIOA_PORT, PIN_10, ALTFN_7);
 8012764:	2207      	movs	r2, #7
 8012766:	210a      	movs	r1, #10
 8012768:	2000      	movs	r0, #0
 801276a:	f7fe fdf5 	bl	8011358 <MGPIO_voidSetPinAltFn>
	MUSART_voidInit();
 801276e:	f7ff fe75 	bl	801245c <MUSART_voidInit>
	MUSART_voidEnable(USART1);
 8012772:	2001      	movs	r0, #1
 8012774:	f7ff feb0 	bl	80124d8 <MUSART_voidEnable>
	USART1_voidSetCallBack(RECIVE_INT);
 8012778:	4889      	ldr	r0, [pc, #548]	; (80129a0 <main+0x298>)
 801277a:	f7ff ff8b 	bl	8012694 <USART1_voidSetCallBack>
	//--------ULTRASONIC echo & its Timer--------// F  B
	// the front one	(B3)
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOB);
 801277e:	2101      	movs	r1, #1
 8012780:	2000      	movs	r0, #0
 8012782:	f7fe ff03 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM2);
 8012786:	2100      	movs	r1, #0
 8012788:	2002      	movs	r0, #2
 801278a:	f7fe feff 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MTIMER_vStartTime(TIMER2);
 801278e:	2002      	movs	r0, #2
 8012790:	f7ff f846 	bl	8011820 <MTIMER_vStartTime>
	MNVIC_voidEnableInterrupt(MNVIC_TIM2);
 8012794:	201c      	movs	r0, #28
 8012796:	f7fe fec3 	bl	8011520 <MNVIC_voidEnableInterrupt>
	HULTRA_vInitialize(ULTRA_SONIC2, TIMER2, CH2);
 801279a:	2202      	movs	r2, #2
 801279c:	2102      	movs	r1, #2
 801279e:	2001      	movs	r0, #1
 80127a0:	f7fe faa6 	bl	8010cf0 <HULTRA_vInitialize>
	// the back one		(A15)
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOA);
 80127a4:	2100      	movs	r1, #0
 80127a6:	2000      	movs	r0, #0
 80127a8:	f7fe fef0 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM2);
 80127ac:	2100      	movs	r1, #0
 80127ae:	2002      	movs	r0, #2
 80127b0:	f7fe feec 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MTIMER_vStartTime(TIMER2);
 80127b4:	2002      	movs	r0, #2
 80127b6:	f7ff f833 	bl	8011820 <MTIMER_vStartTime>
	MNVIC_voidEnableInterrupt(MNVIC_TIM2);
 80127ba:	201c      	movs	r0, #28
 80127bc:	f7fe feb0 	bl	8011520 <MNVIC_voidEnableInterrupt>
	HULTRA_vInitialize(ULTRA_SONIC1, TIMER2, CH1);
 80127c0:	2201      	movs	r2, #1
 80127c2:	2102      	movs	r1, #2
 80127c4:	2000      	movs	r0, #0
 80127c6:	f7fe fa93 	bl	8010cf0 <HULTRA_vInitialize>
	// the front right	(A3)
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOA);
 80127ca:	2100      	movs	r1, #0
 80127cc:	2000      	movs	r0, #0
 80127ce:	f7fe fedd 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM2);
 80127d2:	2100      	movs	r1, #0
 80127d4:	2002      	movs	r0, #2
 80127d6:	f7fe fed9 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MTIMER_vStartTime(TIMER2);
 80127da:	2002      	movs	r0, #2
 80127dc:	f7ff f820 	bl	8011820 <MTIMER_vStartTime>
	MNVIC_voidEnableInterrupt(MNVIC_TIM2);
 80127e0:	201c      	movs	r0, #28
 80127e2:	f7fe fe9d 	bl	8011520 <MNVIC_voidEnableInterrupt>
	HULTRA_vInitialize(ULTRA_SONIC3, TIMER2, CH4);
 80127e6:	2204      	movs	r2, #4
 80127e8:	2102      	movs	r1, #2
 80127ea:	2002      	movs	r0, #2
 80127ec:	f7fe fa80 	bl	8010cf0 <HULTRA_vInitialize>
	// the front back	A2
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOA);
 80127f0:	2100      	movs	r1, #0
 80127f2:	2000      	movs	r0, #0
 80127f4:	f7fe feca 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM2);
 80127f8:	2100      	movs	r1, #0
 80127fa:	2002      	movs	r0, #2
 80127fc:	f7fe fec6 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MTIMER_vStartTime(TIMER2);
 8012800:	2002      	movs	r0, #2
 8012802:	f7ff f80d 	bl	8011820 <MTIMER_vStartTime>
	MNVIC_voidEnableInterrupt(MNVIC_TIM2);
 8012806:	201c      	movs	r0, #28
 8012808:	f7fe fe8a 	bl	8011520 <MNVIC_voidEnableInterrupt>
	HULTRA_vInitialize(ULTRA_SONIC4, TIMER2, CH3);
 801280c:	2203      	movs	r2, #3
 801280e:	2102      	movs	r1, #2
 8012810:	2003      	movs	r0, #3
 8012812:	f7fe fa6d 	bl	8010cf0 <HULTRA_vInitialize>




	//--------Motor Driver--------// 	PWM pin:	B6	B7
	HAL_MOTOR_Init(&Motor_1);
 8012816:	4863      	ldr	r0, [pc, #396]	; (80129a4 <main+0x29c>)
 8012818:	f7fe f96a 	bl	8010af0 <HAL_MOTOR_Init>
	HAL_MOTOR_STOP(&Motor_1);
 801281c:	4861      	ldr	r0, [pc, #388]	; (80129a4 <main+0x29c>)
 801281e:	f7fe fa02 	bl	8010c26 <HAL_MOTOR_STOP>
	HAL_MOTOR_Init(&Motor_2);
 8012822:	4861      	ldr	r0, [pc, #388]	; (80129a8 <main+0x2a0>)
 8012824:	f7fe f964 	bl	8010af0 <HAL_MOTOR_Init>
	HAL_MOTOR_STOP(&Motor_2);
 8012828:	485f      	ldr	r0, [pc, #380]	; (80129a8 <main+0x2a0>)
 801282a:	f7fe f9fc 	bl	8010c26 <HAL_MOTOR_STOP>
	//--------Servo motor --------// 	A6
	MRCC_voidEnablePeripheralClock(AHB1_BUS, PERIPHERAL_EN_GPIOA);
 801282e:	2100      	movs	r1, #0
 8012830:	2000      	movs	r0, #0
 8012832:	f7fe feab 	bl	801158c <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB1_BUS, PERIPHERAL_EN_TIM3);
 8012836:	2101      	movs	r1, #1
 8012838:	2002      	movs	r0, #2
 801283a:	f7fe fea7 	bl	801158c <MRCC_voidEnablePeripheralClock>
	HSERVO_vServoInit(TIMER3,CH1);
 801283e:	2101      	movs	r1, #1
 8012840:	2003      	movs	r0, #3
 8012842:	f7fe fa17 	bl	8010c74 <HSERVO_vServoInit>
	HSERVO_vServoDeg(NO_TURN);
 8012846:	2052      	movs	r0, #82	; 0x52
 8012848:	f7fe fa2e 	bl	8010ca8 <HSERVO_vServoDeg>
	//------------------------------------------------------*/



	//--------Enable Interrupts-------------//
	MNVIC_voidEnableInterrupt(MNVIC_USART1);		//UART
 801284c:	2025      	movs	r0, #37	; 0x25
 801284e:	f7fe fe67 	bl	8011520 <MNVIC_voidEnableInterrupt>
	//--------------------------------------*/

	while(1){
		//---------------//
		Led_Toggle(&Led_0);//Indicate the App is not stuck in something
 8012852:	4852      	ldr	r0, [pc, #328]	; (801299c <main+0x294>)
 8012854:	f7fe f93a 	bl	8010acc <Led_Toggle>
		//---------------//

		//get ULTRA_SONIC_X distances_X
		HULTRA_vSendTrigger(&UltraS_t_F_B);				//send trigeer for both 1,2,3,4
 8012858:	4854      	ldr	r0, [pc, #336]	; (80129ac <main+0x2a4>)
 801285a:	f7fe fa69 	bl	8010d30 <HULTRA_vSendTrigger>

		HULTRA_vGetDistance(ULTRA_SONIC2, &Distance_F);
 801285e:	4954      	ldr	r1, [pc, #336]	; (80129b0 <main+0x2a8>)
 8012860:	2001      	movs	r0, #1
 8012862:	f7fe fa91 	bl	8010d88 <HULTRA_vGetDistance>
		HULTRA_vGetDistance(ULTRA_SONIC1, &Distance_B);
 8012866:	4953      	ldr	r1, [pc, #332]	; (80129b4 <main+0x2ac>)
 8012868:	2000      	movs	r0, #0
 801286a:	f7fe fa8d 	bl	8010d88 <HULTRA_vGetDistance>
		HULTRA_vGetDistance(ULTRA_SONIC3, &Distance_Rf);
 801286e:	4952      	ldr	r1, [pc, #328]	; (80129b8 <main+0x2b0>)
 8012870:	2002      	movs	r0, #2
 8012872:	f7fe fa89 	bl	8010d88 <HULTRA_vGetDistance>
		HULTRA_vGetDistance(ULTRA_SONIC4, &Distance_Rb);
 8012876:	4951      	ldr	r1, [pc, #324]	; (80129bc <main+0x2b4>)
 8012878:	2003      	movs	r0, #3
 801287a:	f7fe fa85 	bl	8010d88 <HULTRA_vGetDistance>

		//---------------------------------------------------------------------------------------
		//-------------------------------------	 FORWARD APP  -----------------------------------

		if ((('W'==R_data_Flag)||(currunt_motion==FORWARD)) && (Distance_F<=20)) {
 801287e:	4b50      	ldr	r3, [pc, #320]	; (80129c0 <main+0x2b8>)
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	2b57      	cmp	r3, #87	; 0x57
 8012884:	d003      	beq.n	801288e <main+0x186>
 8012886:	4b4f      	ldr	r3, [pc, #316]	; (80129c4 <main+0x2bc>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b01      	cmp	r3, #1
 801288c:	d11a      	bne.n	80128c4 <main+0x1bc>
 801288e:	4b48      	ldr	r3, [pc, #288]	; (80129b0 <main+0x2a8>)
 8012890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012894:	f04f 0200 	mov.w	r2, #0
 8012898:	4b4b      	ldr	r3, [pc, #300]	; (80129c8 <main+0x2c0>)
 801289a:	f7fe f8d5 	bl	8010a48 <__aeabi_dcmple>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d00f      	beq.n	80128c4 <main+0x1bc>
			HAL_Rear_Drive(STOP);
 80128a4:	2000      	movs	r0, #0
 80128a6:	f000 f893 	bl	80129d0 <HAL_Rear_Drive>
			HSERVO_vServoDeg(NO_TURN);
 80128aa:	2052      	movs	r0, #82	; 0x52
 80128ac:	f7fe f9fc 	bl	8010ca8 <HSERVO_vServoDeg>
			//MUSART_u8Send_Data(USART1,"STOP ");//--
			R_data_Flag='0';
 80128b0:	4b43      	ldr	r3, [pc, #268]	; (80129c0 <main+0x2b8>)
 80128b2:	2230      	movs	r2, #48	; 0x30
 80128b4:	701a      	strb	r2, [r3, #0]
			currunt_motion=STOP;
 80128b6:	4b43      	ldr	r3, [pc, #268]	; (80129c4 <main+0x2bc>)
 80128b8:	2200      	movs	r2, #0
 80128ba:	701a      	strb	r2, [r3, #0]
			currunt_turn=NO_TURN;
 80128bc:	4b43      	ldr	r3, [pc, #268]	; (80129cc <main+0x2c4>)
 80128be:	2252      	movs	r2, #82	; 0x52
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e01d      	b.n	8012900 <main+0x1f8>
			//MNVIC_voidEnableInterrupt(MNVIC_USART1);
		}
		else if(('W'==R_data_Flag) && (Distance_F>20)){
 80128c4:	4b3e      	ldr	r3, [pc, #248]	; (80129c0 <main+0x2b8>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	2b57      	cmp	r3, #87	; 0x57
 80128ca:	d119      	bne.n	8012900 <main+0x1f8>
 80128cc:	4b38      	ldr	r3, [pc, #224]	; (80129b0 <main+0x2a8>)
 80128ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128d2:	f04f 0200 	mov.w	r2, #0
 80128d6:	4b3c      	ldr	r3, [pc, #240]	; (80129c8 <main+0x2c0>)
 80128d8:	f7fe f8ca 	bl	8010a70 <__aeabi_dcmpgt>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d00e      	beq.n	8012900 <main+0x1f8>
			//MNVIC_voidDisableInterrupt(MNVIC_USART1);
			HAL_Rear_Drive(FORWARD);
 80128e2:	2001      	movs	r0, #1
 80128e4:	f000 f874 	bl	80129d0 <HAL_Rear_Drive>
			HSERVO_vServoDeg(NO_TURN);
 80128e8:	2052      	movs	r0, #82	; 0x52
 80128ea:	f7fe f9dd 	bl	8010ca8 <HSERVO_vServoDeg>
			//MUSART_u8Send_Data(USART1,"FORWARD ");//--
			R_data_Flag='0';
 80128ee:	4b34      	ldr	r3, [pc, #208]	; (80129c0 <main+0x2b8>)
 80128f0:	2230      	movs	r2, #48	; 0x30
 80128f2:	701a      	strb	r2, [r3, #0]
			currunt_motion=FORWARD;
 80128f4:	4b33      	ldr	r3, [pc, #204]	; (80129c4 <main+0x2bc>)
 80128f6:	2201      	movs	r2, #1
 80128f8:	701a      	strb	r2, [r3, #0]
			currunt_turn=NO_TURN;
 80128fa:	4b34      	ldr	r3, [pc, #208]	; (80129cc <main+0x2c4>)
 80128fc:	2252      	movs	r2, #82	; 0x52
 80128fe:	701a      	strb	r2, [r3, #0]
		}

		//---------------------------------------------------------------------------------------
		//-------------------------------------	 BACKWARD APP  ----------------------------------
		//make it to stop after a delay and with the ultra sonic to be logiacly
		if ((('S'==R_data_Flag)||(currunt_motion==BACKWARD)) && ((Distance_B<=20)||(Distance_Rf>=20))) {
 8012900:	4b2f      	ldr	r3, [pc, #188]	; (80129c0 <main+0x2b8>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b53      	cmp	r3, #83	; 0x53
 8012906:	d003      	beq.n	8012910 <main+0x208>
 8012908:	4b2e      	ldr	r3, [pc, #184]	; (80129c4 <main+0x2bc>)
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b02      	cmp	r3, #2
 801290e:	d125      	bne.n	801295c <main+0x254>
 8012910:	4b28      	ldr	r3, [pc, #160]	; (80129b4 <main+0x2ac>)
 8012912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012916:	f04f 0200 	mov.w	r2, #0
 801291a:	4b2b      	ldr	r3, [pc, #172]	; (80129c8 <main+0x2c0>)
 801291c:	f7fe f894 	bl	8010a48 <__aeabi_dcmple>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10a      	bne.n	801293c <main+0x234>
 8012926:	4b24      	ldr	r3, [pc, #144]	; (80129b8 <main+0x2b0>)
 8012928:	e9d3 0100 	ldrd	r0, r1, [r3]
 801292c:	f04f 0200 	mov.w	r2, #0
 8012930:	4b25      	ldr	r3, [pc, #148]	; (80129c8 <main+0x2c0>)
 8012932:	f7fe f893 	bl	8010a5c <__aeabi_dcmpge>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00f      	beq.n	801295c <main+0x254>
			HAL_Rear_Drive(STOP);
 801293c:	2000      	movs	r0, #0
 801293e:	f000 f847 	bl	80129d0 <HAL_Rear_Drive>
			HSERVO_vServoDeg(NO_TURN);
 8012942:	2052      	movs	r0, #82	; 0x52
 8012944:	f7fe f9b0 	bl	8010ca8 <HSERVO_vServoDeg>
			//MUSART_u8Send_Data(USART1,"STOP ");//--
			R_data_Flag='0';
 8012948:	4b1d      	ldr	r3, [pc, #116]	; (80129c0 <main+0x2b8>)
 801294a:	2230      	movs	r2, #48	; 0x30
 801294c:	701a      	strb	r2, [r3, #0]
			currunt_motion=STOP;
 801294e:	4b1d      	ldr	r3, [pc, #116]	; (80129c4 <main+0x2bc>)
 8012950:	2200      	movs	r2, #0
 8012952:	701a      	strb	r2, [r3, #0]
			currunt_turn=NO_TURN;
 8012954:	4b1d      	ldr	r3, [pc, #116]	; (80129cc <main+0x2c4>)
 8012956:	2252      	movs	r2, #82	; 0x52
 8012958:	701a      	strb	r2, [r3, #0]
 801295a:	e01e      	b.n	801299a <main+0x292>
			//MNVIC_voidEnableInterrupt(MNVIC_USART1);
		}
		else if(('S'==R_data_Flag) && (Distance_B>20)){
 801295c:	4b18      	ldr	r3, [pc, #96]	; (80129c0 <main+0x2b8>)
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	2b53      	cmp	r3, #83	; 0x53
 8012962:	f47f af76 	bne.w	8012852 <main+0x14a>
 8012966:	4b13      	ldr	r3, [pc, #76]	; (80129b4 <main+0x2ac>)
 8012968:	e9d3 0100 	ldrd	r0, r1, [r3]
 801296c:	f04f 0200 	mov.w	r2, #0
 8012970:	4b15      	ldr	r3, [pc, #84]	; (80129c8 <main+0x2c0>)
 8012972:	f7fe f87d 	bl	8010a70 <__aeabi_dcmpgt>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00e      	beq.n	801299a <main+0x292>
			//MNVIC_voidDisableInterrupt(MNVIC_USART1);
			HAL_Rear_Drive(BACKWARD);
 801297c:	2002      	movs	r0, #2
 801297e:	f000 f827 	bl	80129d0 <HAL_Rear_Drive>
			HSERVO_vServoDeg(NO_TURN);
 8012982:	2052      	movs	r0, #82	; 0x52
 8012984:	f7fe f990 	bl	8010ca8 <HSERVO_vServoDeg>
			//MUSART_u8Send_Data(USART1,"FORWARD ");//--
			R_data_Flag='0';
 8012988:	4b0d      	ldr	r3, [pc, #52]	; (80129c0 <main+0x2b8>)
 801298a:	2230      	movs	r2, #48	; 0x30
 801298c:	701a      	strb	r2, [r3, #0]
			currunt_motion=BACKWARD;
 801298e:	4b0d      	ldr	r3, [pc, #52]	; (80129c4 <main+0x2bc>)
 8012990:	2202      	movs	r2, #2
 8012992:	701a      	strb	r2, [r3, #0]
			currunt_turn=NO_TURN;
 8012994:	4b0d      	ldr	r3, [pc, #52]	; (80129cc <main+0x2c4>)
 8012996:	2252      	movs	r2, #82	; 0x52
 8012998:	701a      	strb	r2, [r3, #0]
		Led_Toggle(&Led_0);//Indicate the App is not stuck in something
 801299a:	e75a      	b.n	8012852 <main+0x14a>
 801299c:	08012b84 	.word	0x08012b84
 80129a0:	08012a0d 	.word	0x08012a0d
 80129a4:	08012b94 	.word	0x08012b94
 80129a8:	08012bac 	.word	0x08012bac
 80129ac:	08012b8c 	.word	0x08012b8c
 80129b0:	20000248 	.word	0x20000248
 80129b4:	20000250 	.word	0x20000250
 80129b8:	20000258 	.word	0x20000258
 80129bc:	20000260 	.word	0x20000260
 80129c0:	20000245 	.word	0x20000245
 80129c4:	20000246 	.word	0x20000246
 80129c8:	40340000 	.word	0x40340000
 80129cc:	20000048 	.word	0x20000048

080129d0 <HAL_Rear_Drive>:
}
/* USER CODE END 0 */
/* Functions ---------------------------------------------------------*/

void HAL_Rear_Drive(u8 DIRCTION)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	4603      	mov	r3, r0
 80129d8:	71fb      	strb	r3, [r7, #7]
	HAL_MOTOR_MOVE(&Motor_1, DIRCTION, SPEED);
 80129da:	4b09      	ldr	r3, [pc, #36]	; (8012a00 <HAL_Rear_Drive+0x30>)
 80129dc:	781a      	ldrb	r2, [r3, #0]
 80129de:	79fb      	ldrb	r3, [r7, #7]
 80129e0:	4619      	mov	r1, r3
 80129e2:	4808      	ldr	r0, [pc, #32]	; (8012a04 <HAL_Rear_Drive+0x34>)
 80129e4:	f7fe f8bd 	bl	8010b62 <HAL_MOTOR_MOVE>
	HAL_MOTOR_MOVE(&Motor_2, DIRCTION, SPEED);
 80129e8:	4b05      	ldr	r3, [pc, #20]	; (8012a00 <HAL_Rear_Drive+0x30>)
 80129ea:	781a      	ldrb	r2, [r3, #0]
 80129ec:	79fb      	ldrb	r3, [r7, #7]
 80129ee:	4619      	mov	r1, r3
 80129f0:	4805      	ldr	r0, [pc, #20]	; (8012a08 <HAL_Rear_Drive+0x38>)
 80129f2:	f7fe f8b6 	bl	8010b62 <HAL_MOTOR_MOVE>

}
 80129f6:	bf00      	nop
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	20000049 	.word	0x20000049
 8012a04:	08012b94 	.word	0x08012b94
 8012a08:	08012bac 	.word	0x08012bac

08012a0c <RECIVE_INT>:
	HAL_MOTOR_MOVE(&Motor_2, DIRCTION, speed);

}

void RECIVE_INT(void)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	af00      	add	r7, sp, #0
	MUSART_u8INT_Receive_Byte(USART1,&R_data);
 8012a10:	491c      	ldr	r1, [pc, #112]	; (8012a84 <RECIVE_INT+0x78>)
 8012a12:	2001      	movs	r0, #1
 8012a14:	f7ff fdff 	bl	8012616 <MUSART_u8INT_Receive_Byte>
	// software rest to the bootloader
	if('1'==R_data){
 8012a18:	4b1a      	ldr	r3, [pc, #104]	; (8012a84 <RECIVE_INT+0x78>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b31      	cmp	r3, #49	; 0x31
 8012a1e:	d10b      	bne.n	8012a38 <RECIVE_INT+0x2c>
		LED_Off(&Led_0);
 8012a20:	4819      	ldr	r0, [pc, #100]	; (8012a88 <RECIVE_INT+0x7c>)
 8012a22:	f7fe f841 	bl	8010aa8 <LED_Off>
		MNVIC_voidDisableInterrupt(MNVIC_USART1);
 8012a26:	2025      	movs	r0, #37	; 0x25
 8012a28:	f7fe fd94 	bl	8011554 <MNVIC_voidDisableInterrupt>
		MUSART_voidDisable(USART1);
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	f7ff fd81 	bl	8012534 <MUSART_voidDisable>
		//reset soft//
		WWDT_voidMakeSoftWareReset();
 8012a32:	f000 f82f 	bl	8012a94 <WWDT_voidMakeSoftWareReset>
 8012a36:	e01e      	b.n	8012a76 <RECIVE_INT+0x6a>
	}
	// Forward parking
	else if('W'==R_data){
 8012a38:	4b12      	ldr	r3, [pc, #72]	; (8012a84 <RECIVE_INT+0x78>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b57      	cmp	r3, #87	; 0x57
 8012a3e:	d103      	bne.n	8012a48 <RECIVE_INT+0x3c>
		R_data_Flag='W';
 8012a40:	4b12      	ldr	r3, [pc, #72]	; (8012a8c <RECIVE_INT+0x80>)
 8012a42:	2257      	movs	r2, #87	; 0x57
 8012a44:	701a      	strb	r2, [r3, #0]
 8012a46:	e016      	b.n	8012a76 <RECIVE_INT+0x6a>
	}
	// Backward parking
	else if('S'==R_data){
 8012a48:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <RECIVE_INT+0x78>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b53      	cmp	r3, #83	; 0x53
 8012a4e:	d103      	bne.n	8012a58 <RECIVE_INT+0x4c>
		R_data_Flag='S';
 8012a50:	4b0e      	ldr	r3, [pc, #56]	; (8012a8c <RECIVE_INT+0x80>)
 8012a52:	2253      	movs	r2, #83	; 0x53
 8012a54:	701a      	strb	r2, [r3, #0]
 8012a56:	e00e      	b.n	8012a76 <RECIVE_INT+0x6a>
	}
	// Auto parking
	else if('A'==R_data){
 8012a58:	4b0a      	ldr	r3, [pc, #40]	; (8012a84 <RECIVE_INT+0x78>)
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b41      	cmp	r3, #65	; 0x41
 8012a5e:	d103      	bne.n	8012a68 <RECIVE_INT+0x5c>
		R_data_Flag='A';
 8012a60:	4b0a      	ldr	r3, [pc, #40]	; (8012a8c <RECIVE_INT+0x80>)
 8012a62:	2241      	movs	r2, #65	; 0x41
 8012a64:	701a      	strb	r2, [r3, #0]
 8012a66:	e006      	b.n	8012a76 <RECIVE_INT+0x6a>
	}
	else if('O'==R_data){
 8012a68:	4b06      	ldr	r3, [pc, #24]	; (8012a84 <RECIVE_INT+0x78>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	2b4f      	cmp	r3, #79	; 0x4f
 8012a6e:	d102      	bne.n	8012a76 <RECIVE_INT+0x6a>
		R_data_Flag='O';
 8012a70:	4b06      	ldr	r3, [pc, #24]	; (8012a8c <RECIVE_INT+0x80>)
 8012a72:	224f      	movs	r2, #79	; 0x4f
 8012a74:	701a      	strb	r2, [r3, #0]
	//
	else{
		//MUSART_u8Send_Data(USART1,"ERROR ");//-----
	}
	//MUSART_u8Send_Data(USART1,"recived int \n ");//-----
	MUSART_u8Send_Data(USART1,MUSART_NewLine);
 8012a76:	4906      	ldr	r1, [pc, #24]	; (8012a90 <RECIVE_INT+0x84>)
 8012a78:	2001      	movs	r0, #1
 8012a7a:	f7ff fdac 	bl	80125d6 <MUSART_u8Send_Data>
}
 8012a7e:	bf00      	nop
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	20000244 	.word	0x20000244
 8012a88:	08012b84 	.word	0x08012b84
 8012a8c:	20000245 	.word	0x20000245
 8012a90:	08012b80 	.word	0x08012b80

08012a94 <WWDT_voidMakeSoftWareReset>:


#define WWDT_CR            *((volatile u32 *)(0x40002C00))
void WWDT_voidMakeSoftWareReset(void)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	af00      	add	r7, sp, #0
	MRCC_voidEnablePeripheralClock(APB1,PERIPHERAL_EN_WWDG);
 8012a98:	210b      	movs	r1, #11
 8012a9a:	2002      	movs	r0, #2
 8012a9c:	f7fe fd76 	bl	801158c <MRCC_voidEnablePeripheralClock>
	WWDT_CR=0xBF;
 8012aa0:	4b01      	ldr	r3, [pc, #4]	; (8012aa8 <WWDT_voidMakeSoftWareReset+0x14>)
 8012aa2:	22bf      	movs	r2, #191	; 0xbf
 8012aa4:	601a      	str	r2, [r3, #0]
	while(1);
 8012aa6:	e7fe      	b.n	8012aa6 <WWDT_voidMakeSoftWareReset+0x12>
 8012aa8:	40002c00 	.word	0x40002c00

08012aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8012aac:	480d      	ldr	r0, [pc, #52]	; (8012ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8012aae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8012ab0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012ab4:	480c      	ldr	r0, [pc, #48]	; (8012ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8012ab6:	490d      	ldr	r1, [pc, #52]	; (8012aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8012ab8:	4a0d      	ldr	r2, [pc, #52]	; (8012af0 <LoopForever+0xe>)
  movs r3, #0
 8012aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012abc:	e002      	b.n	8012ac4 <LoopCopyDataInit>

08012abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012ac2:	3304      	adds	r3, #4

08012ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012ac8:	d3f9      	bcc.n	8012abe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012aca:	4a0a      	ldr	r2, [pc, #40]	; (8012af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8012acc:	4c0a      	ldr	r4, [pc, #40]	; (8012af8 <LoopForever+0x16>)
  movs r3, #0
 8012ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012ad0:	e001      	b.n	8012ad6 <LoopFillZerobss>

08012ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012ad4:	3204      	adds	r2, #4

08012ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012ad8:	d3fb      	bcc.n	8012ad2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8012ada:	f000 f811 	bl	8012b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8012ade:	f7ff fe13 	bl	8012708 <main>

08012ae2 <LoopForever>:

LoopForever:
  b LoopForever
 8012ae2:	e7fe      	b.n	8012ae2 <LoopForever>
  ldr   r0, =_estack
 8012ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012aec:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8012af0:	08012bcc 	.word	0x08012bcc
  ldr r2, =_sbss
 8012af4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8012af8:	20000268 	.word	0x20000268

08012afc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012afc:	e7fe      	b.n	8012afc <ADC_IRQHandler>
	...

08012b00 <__libc_init_array>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	4d0d      	ldr	r5, [pc, #52]	; (8012b38 <__libc_init_array+0x38>)
 8012b04:	4c0d      	ldr	r4, [pc, #52]	; (8012b3c <__libc_init_array+0x3c>)
 8012b06:	1b64      	subs	r4, r4, r5
 8012b08:	10a4      	asrs	r4, r4, #2
 8012b0a:	2600      	movs	r6, #0
 8012b0c:	42a6      	cmp	r6, r4
 8012b0e:	d109      	bne.n	8012b24 <__libc_init_array+0x24>
 8012b10:	4d0b      	ldr	r5, [pc, #44]	; (8012b40 <__libc_init_array+0x40>)
 8012b12:	4c0c      	ldr	r4, [pc, #48]	; (8012b44 <__libc_init_array+0x44>)
 8012b14:	f000 f818 	bl	8012b48 <_init>
 8012b18:	1b64      	subs	r4, r4, r5
 8012b1a:	10a4      	asrs	r4, r4, #2
 8012b1c:	2600      	movs	r6, #0
 8012b1e:	42a6      	cmp	r6, r4
 8012b20:	d105      	bne.n	8012b2e <__libc_init_array+0x2e>
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b28:	4798      	blx	r3
 8012b2a:	3601      	adds	r6, #1
 8012b2c:	e7ee      	b.n	8012b0c <__libc_init_array+0xc>
 8012b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b32:	4798      	blx	r3
 8012b34:	3601      	adds	r6, #1
 8012b36:	e7f2      	b.n	8012b1e <__libc_init_array+0x1e>
 8012b38:	08012bc4 	.word	0x08012bc4
 8012b3c:	08012bc4 	.word	0x08012bc4
 8012b40:	08012bc4 	.word	0x08012bc4
 8012b44:	08012bc8 	.word	0x08012bc8

08012b48 <_init>:
 8012b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b4a:	bf00      	nop
 8012b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b4e:	bc08      	pop	{r3}
 8012b50:	469e      	mov	lr, r3
 8012b52:	4770      	bx	lr

08012b54 <_fini>:
 8012b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b56:	bf00      	nop
 8012b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b5a:	bc08      	pop	{r3}
 8012b5c:	469e      	mov	lr, r3
 8012b5e:	4770      	bx	lr
